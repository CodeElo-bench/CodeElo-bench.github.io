[
    {
        "problem_id": "1971A",
        "url": "https://codeforces.com/problemset/problem/1971/A",
        "title": "My First Sorting Problem",
        "rating": 800,
        "tags": [
            "implementation",
            "sortings"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given two integers $x$ and $y$.\n\nOutput two integers: the minimum of $x$ and $y$, followed by the\nmaximum of $x$ and $y$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 100$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains two space-separated integers $x$\nand $y$ ($0 \\leq x, y \\leq 9$).",
        "output": "For each test case, output two integers: the minimum of $x$ and $y$,\nfollowed by the maximum of $x$ and $y$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n1 9\n8 4\n1 4\n3 4\n2 0\n2 4\n6 9\n3 3\n0 0\n9 9\n</pre></td>\n    <td><pre>1 9\n4 8\n1 4\n3 4\n0 2\n2 4\n6 9\n3 3\n0 0\n9 9\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1971B",
        "url": "https://codeforces.com/problemset/problem/1971/B",
        "title": "Different String",
        "rating": 800,
        "tags": [
            "implementation",
            "strings"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given a string $s$ consisting of lowercase English letters.\n\nRearrange the characters of $s$ to form a new string $r$ that is not\nequal to $s$, or report that it's impossible.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 1000$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains a string $s$ of length at most\n$10$ consisting of lowercase English letters.",
        "output": "For each test case, if no such string $r$ exists as described in the\nstatement, output \"NO\" (without quotes).\n\nOtherwise, output \"YES\" (without quotes). Then, output one line \u2014 the string\n$r$, consisting of letters of string $s$.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\",\nand \"Yes\" will be recognized as a positive response).\n\nIf multiple answers are possible, you can output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\ncodeforces\naaaaa\nxxxxy\nco\nd\nnutdealer\nmwistht\nhhhhhhhhhh\n</pre></td>\n    <td><pre>YES\nforcodesec\nNO\nYES\nxxyxx\nYES\noc\nNO\nYES\nundertale\nYES\nthtsiwm\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, another possible answer is $\\texttt{forcescode}$.\n\nIn the second test case, all rearrangements of $\\texttt{aaaaa}$ are equal\nto $\\texttt{aaaaa}$."
    },
    {
        "problem_id": "1971C",
        "url": "https://codeforces.com/problemset/problem/1971/C",
        "title": "Clock and Strings",
        "rating": 900,
        "tags": [
            "implementation"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "There is a clock labeled with the numbers $1$ through $12$ in\nclockwise order, as shown below.\n\n![](CDN_BASE_URL/d18290022594db5fbc2eb2c94222b5d4)\n\nIn this example, $(a,b,c,d)=(2,9,10,6)$, and the strings intersect.\n\nAlice and Bob have four distinct integers $a$, $b$, $c$, $d$\nnot more than $12$. Alice ties a red string connecting $a$ and\n$b$, and Bob ties a blue string connecting $c$ and $d$. Do the\nstrings intersect? (The strings are straight line segments.)",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 5940$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains four distinct integers $a$,\n$b$, $c$, $d$ ($1 \\leq a, b, c, d \\leq 12$).",
        "output": "For each test case, output \"YES\" (without quotes) if the strings intersect,\nand \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\",\nand \"Yes\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>15\n2 9 10 6\n3 8 9 1\n1 2 3 4\n5 3 4 12\n1 8 2 10\n3 12 11 8\n9 10 12 1\n12 1 10 2\n3 12 6 9\n1 9 8 4\n6 7 9 12\n7 12 9 6\n10 12 11 1\n3 9 6 12\n1 4 3 5\n</pre></td>\n    <td><pre>YES\nNO\nNO\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nYES\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The first test case is pictured in the statement.\n\nIn the second test case, the strings do not intersect, as shown below.\n\n![](CDN_BASE_URL/0a595d35f9075140d31c876c88cd46dc)"
    },
    {
        "problem_id": "1971D",
        "url": "https://codeforces.com/problemset/problem/1971/D",
        "title": "Binary Cut",
        "rating": 1100,
        "tags": [
            "dp",
            "greedy",
            "implementation",
            "sortings",
            "strings"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a binary string$^{\\dagger}$. Please find the minimum number\nof pieces you need to cut it into, so that the resulting pieces can be\nrearranged into a sorted binary string.\n\n![](CDN_BASE_URL/f49d41e3510eec9591123a65ee9389ab)\n\nNote that:\n\n  * each character must lie in exactly one of the pieces; \n  * the pieces must be contiguous substrings of the original string; \n  * you must use all the pieces in the rearrangement. \n\n$^{\\dagger}$ A binary string is a string consisting of characters\n$\\texttt{0}$ and $\\texttt{1}$. A sorted binary string is a binary\nstring such that all characters $\\texttt{0}$ come before all characters\n$\\texttt{1}$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 500$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains a single string $s$ ($1 \\leq\n|s| \\leq 500$) consisting of characters $\\texttt{0}$ and\n$\\texttt{1}$, where $|s|$ denotes the length of the string $s$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of pieces\nneeded to be able to rearrange the string into a sorted binary string.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n11010\n00000000\n1\n10\n0001111\n0110\n</pre></td>\n    <td><pre>3\n1\n1\n2\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The first test case is pictured in the statement. It can be proven that you\ncan't use fewer than $3$ pieces.\n\nIn the second and third test cases, the binary string is already sorted, so\nonly $1$ piece is needed.\n\nIn the fourth test case, you need to make a single cut between the two\ncharacters and rearrange them to make the string $\\texttt{01}$."
    },
    {
        "problem_id": "1971E",
        "url": "https://codeforces.com/problemset/problem/1971/E",
        "title": "Find the Car",
        "rating": 1500,
        "tags": [
            "binary search",
            "math",
            "sortings"
        ],
        "div": "Div. 4",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Timur is in a car traveling on the number line from point $0$ to point\n$n$. The car starts moving from point $0$ at minute $0$.\n\nThere are $k+1$ signs on the line at points $0, a_1, a_2, \\dots, a_k$,\nand Timur knows that the car will arrive there at minutes $0, b_1, b_2,\n\\dots, b_k$, respectively. The sequences $a$ and $b$ are strictly\nincreasing with $a_k = n$.\n\n![](CDN_BASE_URL/bacc58f5d5013f5922e96a1311487b97)\n\nBetween any two adjacent signs, the car travels with a constant speed. Timur\nhas $q$ queries: each query will be an integer $d$, and Timur wants\nyou to output how many minutes it takes the car to reach point $d$,\nrounded down to the nearest integer.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains three integers $n$, $k$, and\n$q$, ($k \\leq n \\leq 10^9$; $1 \\leq k, q \\leq 10^5$) \u2014 the final\ndestination, the number of points Timur knows the time for, and the number of\nqueries respectively.\n\nThe second line of each test case contains $k$ integers $a_i$ ($1\n\\leq a_i \\leq n$; $a_i < a_{i+1}$ for every $1 \\leq i \\leq k-1$;\n$a_k = n$).\n\nThe third line of each test case contains $k$ integers $b_i$ ($1\n\\leq b_i \\leq 10^9$; $b_i < b_{i+1}$ for every $1 \\leq i \\leq k-1$).\n\nEach of the following $q$ lines contains a single integer $d$ ($0\n\\leq d \\leq n$) \u2014 the distance that Timur asks the minutes passed for.\n\nThe sum of $k$ over all test cases doesn't exceed $10^5$, and the sum\nof $q$ over all test cases doesn't exceed $10^5$.",
        "output": "For each query, output a single integer \u2014 the number of minutes passed until\nthe car reaches the point $d$, rounded down.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n10 1 3\n10\n10\n0\n6\n7\n10 2 4\n4 10\n4 7\n6\n4\n2\n7\n1000000000 1 1\n1000000000\n1000000000\n99999999\n6 1 3\n6\n5\n2\n6\n5\n</pre></td>\n    <td><pre>0 6 7 \n5 4 2 5 \n99999999 \n1 5 4 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, the car goes from point $0$ to point $10$ in\n$10$ minutes, so the speed is $1$ unit per minute and:\n\n  * At point $0$, the time will be $0$ minutes. \n  * At point $6$, the time will be $6$ minutes. \n  * At point $7$, the time will be $7$ minutes. \n\nFor the second test case, between points $0$ and $4$, the car travels\nat a speed of $1$ unit per minute and between $4$ and $10$ with a\nspeed of $2$ units per minute and:\n\n  * At point $6$, the time will be $5$ minutes. \n  * At point $4$, the time will be $4$ minutes. \n  * At point $2$, the time will be $2$ minutes. \n  * At point $7$, the time will be $5.5$ minutes, so the answer is $5$. \n\nFor the fourth test case, the car travels with $1.2$ units per minute, so\nthe answers to the queries are:\n\n  * At point $2$, the time will be $1.66\\dots$ minutes, so the answer is $1$. \n  * At point $6$, the time will be $5$ minutes. \n  * At point $5$, the time will be $4.16\\dots$ minutes, so the answer is $4$."
    },
    {
        "problem_id": "1971F",
        "url": "https://codeforces.com/problemset/problem/1971/F",
        "title": "Circle Perimeter",
        "rating": 1600,
        "tags": [
            "binary search",
            "brute force",
            "dfs and similar",
            "geometry",
            "implementation",
            "math"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Given an integer $r$, find the number of lattice points that have a\nEuclidean distance from $(0, 0)$ greater than or equal to $r$ but\nstrictly less than $r+1$.\n\nA lattice point is a point with integer coordinates. The Euclidean distance\nfrom $(0, 0)$ to the point $(x,y)$ is $\\sqrt{x^2 + y^2}$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 1000$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains a single integer $r$ ($1 \\leq r\n\\leq 10^5$).\n\nThe sum of $r$ over all test cases does not exceed $10^5$.",
        "output": "For each test case, output a single integer \u2014 the number of lattice points\nthat have an Euclidean distance $d$ from $(0, 0)$ such that $r \\leq\nd < r+1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1\n2\n3\n4\n5\n1984\n</pre></td>\n    <td><pre>8\n16\n20\n24\n40\n12504\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The points for the first three test cases are shown below.\n\n![](CDN_BASE_URL/798fdc9e24a49612fd77928f7fc973f8)"
    },
    {
        "problem_id": "1971G",
        "url": "https://codeforces.com/problemset/problem/1971/G",
        "title": "XOUR",
        "rating": 1700,
        "tags": [
            "data structures",
            "dsu",
            "sortings"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given an array $a$ consisting of $n$ nonnegative integers.\n\nYou can swap the elements at positions $i$ and $j$ if\n$a_i~\\mathsf{XOR}~a_j < 4$, where $\\mathsf{XOR}$ is the [bitwise XOR\noperation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nFind the lexicographically smallest array that can be made with any number of\nswaps.\n\nAn array $x$ is lexicographically smaller than an array $y$ if in the\nfirst position where $x$ and $y$ differ, $x_i < y_i$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq\nn \\leq 2\\cdot10^5$) \u2014 the length of the array.\n\nThe second line of each test case contains $n$ integers $a_i$ ($0\n\\leq a_i \\leq 10^9$) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $n$ integers \u2014 the lexicographically smallest\narray that can be made with any number of swaps.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n4\n1 0 3 2\n5\n2 7 1 5 6\n8\n1 2 1 2 1 2 1 2\n4\n16 4 1 64\n</pre></td>\n    <td><pre>0 1 2 3 \n1 5 2 6 7 \n1 1 1 1 2 2 2 2 \n16 4 1 64 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, you can swap any two elements, so we can produce the\nsorted array.\n\nFor the second test case, you can swap $2$ and $1$ (their\n$\\mathsf{XOR}$ is $3$), $7$ and $5$ (their $\\mathsf{XOR}$\nis $2$), and $7$ and $6$ (their $\\mathsf{XOR}$ is $1$) to\nget the lexicographically smallest array."
    },
    {
        "problem_id": "1971H",
        "url": "https://codeforces.com/problemset/problem/1971/H",
        "title": "\u00b11",
        "rating": 2100,
        "tags": [
            "2-sat",
            "dfs and similar",
            "graphs"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Bob has a grid with $3$ rows and $n$ columns, each of which contains\neither $a_i$ or $-a_i$ for some integer $1 \\leq i \\leq n$. For\nexample, one possible grid for $n=4$ is shown below:\n\n$$\\begin{bmatrix} a_1 & -a_2 & -a_3 & -a_2 \\\\\\ -a_4 & a_4 & -a_1 & -a_3\n\\\\\\ a_1 & a_2 & -a_2 & a_4 \\end{bmatrix}$$\n\nAlice and Bob play a game as follows:\n\n  * Bob shows Alice his grid. \n  * Alice gives Bob an array $a_1, a_2, \\dots, a_n$ of her choosing, whose elements are all $\\mathbf{-1}$ or $\\mathbf{1}$. \n  * Bob substitutes these values into his grid to make a grid of $-1$s and $1$s. \n  * Bob sorts the elements of each column in non-decreasing order. \n  * Alice wins if all the elements in the middle row are $1$; otherwise, Bob wins. \n\nFor example, suppose Alice gives Bob the array $[1, -1, -1, 1]$ for the\ngrid above. Then the following will happen (colors are added for clarity):\n\n$$\\begin{bmatrix} \\color{red}{a_1} & \\color{green}{-a_2} &\n\\color{blue}{-a_3} & \\color{green}{-a_2} \\\\\\ -a_4 & a_4 & \\color{red}{-a_1} &\n\\color{blue}{-a_3} \\\\\\ \\color{red}{a_1} & \\color{green}{a_2} &\n\\color{green}{-a_2} & a_4 \\end{bmatrix}\n\\xrightarrow{[\\color{red}{1},\\color{green}{-1},\\color{blue}{-1},1]}\n\\begin{bmatrix} \\color{red}{1} & \\color{green}{1} & \\color{blue}{1} &\n\\color{green}{1} \\\\\\ -1 & 1 & \\color{red}{-1} & \\color{blue}{1} \\\\\\\n\\color{red}{1} & \\color{green}{-1} & \\color{green}{1} & 1 \\end{bmatrix}\n\\xrightarrow{\\text{sort each column}} \\begin{bmatrix} -1 & -1 & -1 & 1 \\\\\\\n\\mathbf{1} & \\mathbf{1} & \\mathbf{1} & \\mathbf{1} \\\\\\ 1 & 1 & 1 & 1 \\\\\\\n\\end{bmatrix}\\,. $$ Since the middle row is all $1$, Alice wins.\n\nGiven Bob's grid, determine whether or not Alice can choose the array $a$\nto win the game.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 1000$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq\nn \\leq 500$) \u2014 the number of columns of Bob's grid.\n\nThe next three lines each contain $n$ integers, the $i$-th of which\ncontains $g_{i,1}, g_{i,2}, \\dots, g_{i,n}$ ($-n \\leq g_{i,j} \\leq n$,\n$g_{i,j} \\neq 0$), representing Bob's grid.\n\nIf cell $x > 0$ is in the input, that cell in Bob's grid should contain\n$a_x$; if $x < 0$ is in the input, that cell in Bob's grid should\ncontain $-a_{-x}$. See the sample input and notes for a better\nunderstanding.",
        "output": "For each test case, output \"YES\" (without quotes) if Alice can win, and \"NO\"\n(without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\",\nand \"Yes\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n4\n1 -2 -3 -2\n-4 4 -1 -3\n1 2 -2 4\n2\n1 2\n-1 -2\n2 -2\n5\n1 2 3 4 5\n-2 3 -4 -5 -1\n3 -5 1 2 2\n6\n1 3 -6 2 5 2\n1 3 -2 -3 -6 -5\n-2 -1 -3 2 3 1\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The first test case is described in the statement.\n\nIn the second test case, Bob's grid is as follows:\n\n$$\\begin{bmatrix} a_1 & a_2 \\\\\\ -a_1 & -a_2 \\\\\\ a_2 & -a_2\n\\end{bmatrix}$$\n\nFor the last column to have $1$ in the middle row when sorted, Alice must\npick $a_2 = -1$. However, it is then impossible to choose $a_1$ such\nthat the first column has $1$ in the middle when sorted. Thus, Alice\ncannot win.\n\nIn the third test case, Alice can pick $a = [1,1,1,1,1]$."
    },
    {
        "problem_id": "1972A",
        "url": "https://codeforces.com/problemset/problem/1972/A",
        "title": "Contest Proposal",
        "rating": 800,
        "tags": [
            "brute force",
            "greedy",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "A contest contains $n$ problems and the difficulty of the $i$-th\nproblem is expected to be at most $b_i$. There are already $n$ problem\nproposals and the difficulty of the $i$-th problem is $a_i$.\nInitially, both $a_1, a_2, \\ldots, a_n$ and $b_1, b_2, \\ldots, b_n$\nare sorted in non-decreasing order.\n\nSome of the problems may be more difficult than expected, so the writers must\npropose more problems. When a new problem with difficulty $w$ is proposed,\nthe most difficult problem will be deleted from the contest, and the problems\nwill be sorted in a way that the difficulties are non-decreasing.\n\nIn other words, in each operation, you choose an integer $w$, insert it\ninto the array $a$, sort array $a$ in non-decreasing order, and remove\nthe last element from it.\n\nFind the minimum number of new problems to make $a_i\\le b_i$ for all\n$i$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le 100$). The description of the test cases\nfollows.\n\nThe first line of each test case contains only one positive integer $n$\n($1 \\leq n \\leq 100$), representing the number of problems.\n\nThe second line of each test case contains an array $a$ of length $n$\n($1\\le a_1\\le a_2\\le\\cdots\\le a_n\\le 10^9$).\n\nThe third line of each test case contains an array $b$ of length $n$\n($1\\le b_1\\le b_2\\le\\cdots\\le b_n\\le 10^9$).",
        "output": "For each test case, print an integer as your answer in a new line.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n6\n1000 1400 2000 2000 2200 2700\n800 1200 1500 1800 2200 3000\n6\n4 5 6 7 8 9\n1 2 3 4 5 6\n</pre></td>\n    <td><pre>2\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case:\n\n  * Propose a problem with difficulty $w=800$ and $a$ becomes $[800,1000,1400,2000,2000,2200]$. \n  * Propose a problem with difficulty $w=1800$ and $a$ becomes $[800,1000,1400,1800,2000,2000]$. \n\nIt can be proved that it's impossible to reach the goal by proposing fewer new\nproblems.\n\nIn the second test case:\n\n  * Propose a problem with difficulty $w=1$ and $a$ becomes $[1,4,5,6,7,8]$. \n  * Propose a problem with difficulty $w=2$ and $a$ becomes $[1,2,4,5,6,7]$. \n  * Propose a problem with difficulty $w=3$ and $a$ becomes $[1,2,3,4,5,6]$. \n\nIt can be proved that it's impossible to reach the goal by proposing fewer new\nproblems."
    },
    {
        "problem_id": "1972B",
        "url": "https://codeforces.com/problemset/problem/1972/B",
        "title": "Coin Games",
        "rating": 900,
        "tags": [
            "games"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "There are $n$ coins on the table forming a circle, and each coin is either\nfacing up or facing down. Alice and Bob take turns to play the following game,\nand Alice goes first.\n\nIn each operation, the player chooses a facing-up coin, removes the coin, and\nflips the two coins that are adjacent to it. If (before the operation) there\nare only two coins left, then one will be removed and the other won't be\nflipped (as it would be flipped twice). If (before the operation) there is\nonly one coin left, no coins will be flipped. If (before the operation) there\nare no facing-up coins, the player loses.\n\nDecide who will win the game if they both play optimally. It can be proved\nthat the game will end in a finite number of operations, and one of them will\nwin.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le 100$). The description of the test cases\nfollows.\n\nThe first line of each test case contains only one positive integer $n$\n($1 \\leq n \\leq 100$), representing the number of the coins.\n\nA string $s$ of length $n$ follows on the second line of each test\ncase, containing only \"U\" and \"D\", representing that each coin is facing up or\nfacing down.",
        "output": "For each test case, print \"YES\" if Alice will win the game, and \"NO\"\notherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5\nUUDUD\n5\nUDDUD\n2\nUU\n</pre></td>\n    <td><pre>YES\nNO\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the game may go as follows.\n\n  * Alice chooses the first coin and $s$ becomes \"DDUU\". \n  * Bob chooses the last coin and $s$ becomes \"UDD\". \n  * Alice chooses the first coin and $s$ becomes \"UU\". \n  * Bob chooses the first coin and $s$ becomes \"U\". \n  * Alice chooses the only coin and $s$ becomes empty. \n  * Bob can't choose any coin now, and he loses the game. \n\nIt can be proved that Bob will always lose if they both play optimally."
    },
    {
        "problem_id": "1972C",
        "url": "https://codeforces.com/problemset/problem/1972/C",
        "title": "Permutation Counting",
        "rating": 1400,
        "tags": [
            "binary search",
            "constructive algorithms",
            "greedy",
            "implementation",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You have some cards. An integer between $1$ and $n$ is written on each\ncard: specifically, for each $i$ from $1$ to $n$, you have\n$a_i$ cards which have the number $i$ written on them.\n\nThere is also a shop which contains unlimited cards of each type. You have\n$k$ coins, so you can buy $k$ new cards in total, and the cards you\nbuy can contain any integer between $1$ and $n$.\n\nAfter buying the new cards, you rearrange all your cards in a line. The score\nof a rearrangement is the number of (contiguous) subarrays of length $n$\nwhich are a permutation of $[1, 2, \\ldots, n]$. What's the maximum score\nyou can get?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t\\ (1\\le t\\le 100)$. The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$, $k$\n($1\\le n \\le 2 \\cdot 10^5$, $0\\le k \\le 10^{12}$) \u2014 the number of\ndistinct types of cards and the number of coins.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^{12}$) \u2014 the number of cards of type\n$i$ you have at the beginning.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case, output a single line containing an integer: the maximum\nscore you can get.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n1 10\n1\n2 4\n8 4\n3 4\n6 1 8\n3 9\n7 6 2\n5 3\n6 6 7 4 6\n9 7\n7 6 1 7 6 2 4 3 3\n10 10\n1 3 1 2 1 9 3 5 7 5\n9 8\n5 8 7 5 1 3 2 9 8\n</pre></td>\n    <td><pre>11\n15\n15\n22\n28\n32\n28\n36\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the final (and only) array we can get is $[1, 1, 1,\n1, 1, 1, 1, 1, 1, 1, 1]$ (including $11$ single $1$s), which\ncontains $11$ subarrays consisting of a permutation of $[1]$.\n\nIn the second test case, we can buy $0$ cards of type $1$ and $4$\ncards of type $2$, and then we rearrange the cards as following: $[1, 2,\n1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]$. There are $8$ subarrays\nequal to $[1, 2]$ and $7$ subarrays equal to $[2, 1]$, which make\na total of $15$ subarrays which are a permutation of $[1, 2]$. It can\nalso be proved that this is the maximum score we can get.\n\nIn the third test case, one of the possible optimal rearrangements is $[3,\n3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3]$."
    },
    {
        "problem_id": "1972D1",
        "url": "https://codeforces.com/problemset/problem/1972/D1",
        "title": "Reverse Card (Easy Version)",
        "rating": 1400,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "The two versions are different problems. You may want to read both versions.\nYou can make hacks only if both versions are solved.\n\nYou are given two positive integers $n$, $m$.\n\nCalculate the number of ordered pairs $(a, b)$ satisfying the following\nconditions:\n\n  * $1\\le a\\le n$, $1\\le b\\le m$; \n  * $a+b$ is a multiple of $b \\cdot \\gcd(a,b)$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$, $m$\n($1\\le n,m\\le 2 \\cdot 10^6$).\n\nIt is guaranteed that neither the sum of $n$ nor the sum of $m$ over\nall test cases exceeds $2 \\cdot 10^6$.",
        "output": "For each test case, print a single integer: the number of valid pairs.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 1\n2 3\n3 5\n10 8\n100 1233\n1000000 1145141\n</pre></td>\n    <td><pre>1\n3\n4\n14\n153\n1643498\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, only $(1,1)$ satisfies the conditions.\n\nIn the fourth test case,\n$(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)$\nsatisfy the conditions."
    },
    {
        "problem_id": "1972D2",
        "url": "https://codeforces.com/problemset/problem/1972/D2",
        "title": "Reverse Card (Hard Version)",
        "rating": 2200,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "The two versions are different problems. You may want to read both versions.\nYou can make hacks only if both versions are solved.\n\nYou are given two positive integers $n$, $m$.\n\nCalculate the number of ordered pairs $(a, b)$ satisfying the following\nconditions:\n\n  * $1\\le a\\le n$, $1\\le b\\le m$; \n  * $b \\cdot \\gcd(a,b)$ is a multiple of $a+b$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$, $m$\n($1\\le n,m\\le 2 \\cdot 10^6$).\n\nIt is guaranteed that neither the sum of $n$ nor the sum of $m$ over\nall test cases exceeds $2 \\cdot 10^6$.",
        "output": "For each test case, print a single integer: the number of valid pairs.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 1\n2 3\n3 5\n10 8\n100 1233\n1000000 1145141\n</pre></td>\n    <td><pre>0\n1\n1\n6\n423\n5933961\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, no pair satisfies the conditions.\n\nIn the fourth test case, $(2,2),(3,6),(4,4),(6,3),(6,6),(8,8)$ satisfy the\nconditions."
    },
    {
        "problem_id": "1972E",
        "url": "https://codeforces.com/problemset/problem/1972/E",
        "title": "Fenwick Tree",
        "rating": 2300,
        "tags": [
            "combinatorics",
            "data structures",
            "math",
            "matrices"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Let $\\operatorname{lowbit}(x)$ denote the value of the lowest binary bit\nof $x$, e.g. $\\operatorname{lowbit}(12)=4$,\n$\\operatorname{lowbit}(8)=8$.\n\nFor an array $a$ of length $n$, if an array $s$ of length $n$\nsatisfies\n$s_k=\\left(\\sum\\limits_{i=k-\\operatorname{lowbit}(k)+1}^{k}a_i\\right)\\bmod\n998\\,244\\,353$ for all $k$, then $s$ is called the Fenwick Tree of\n$a$. Let's denote it as $s=f(a)$.\n\nFor a positive integer $k$ and an array $a$, $f^k(a)$ is defined\nas follows:\n\n$$ f^k(a)= \\begin{cases} f(a)&\\textrm{if }k=1\\\\\\\nf(f^{k-1}(a))&\\textrm{otherwise.}\\\\\\ \\end{cases} $$\n\nYou are given an array $b$ of length $n$ and a positive integer\n$k$. Find an array $a$ that satisfies $0\\le a_i < 998\\,244\\,353$\nand $f^k(a)=b$. It can be proved that an answer always exists. If there\nare multiple possible answers, you may print any of them.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two positive integers $n$ ($1\n\\leq n \\leq 2\\cdot 10^5$) and $k$ ($1\\le k\\le 10^9$), representing\nthe length of the array and the number of times the function $f$ is\nperformed.\n\nThe second line of each test case contains an array $b_1, b_2, \\ldots,\nb_n$ ($0\\le b_i < 998\\,244\\,353$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, print a single line, containing a valid array $a$ of\nlength $n$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n8 1\n1 2 1 4 1 2 1 8\n6 2\n1 4 3 17 5 16\n</pre></td>\n    <td><pre>1 1 1 1 1 1 1 1\n1 2 3 4 5 6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it can be seen that\n$f^1([1,1,1,1,1,1,1,1])=[1,2,1,4,1,2,1,8]$.\n\nIn the second test case, it can be seen that\n$f^2([1,2,3,4,5,6])=f^1([1,3,3,10,5,11])=[1,4,3,17,5,16]$."
    },
    {
        "problem_id": "1972F",
        "url": "https://codeforces.com/problemset/problem/1972/F",
        "title": "Long Way to be Non-decreasing",
        "rating": 2800,
        "tags": [
            "binary search",
            "dfs and similar",
            "graphs",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "Little R is a magician who likes non-decreasing arrays. She has an array of\nlength $n$, initially as $a_1, \\ldots, a_n$, in which each element is\nan integer between $[1, m]$. She wants it to be non-decreasing, i.e.,\n$a_1 \\leq a_2 \\leq \\ldots \\leq a_n$.\n\nTo do this, she can perform several magic tricks. Little R has a fixed array\n$b_1\\ldots b_m$ of length $m$. Formally, let's define a trick as a\nprocedure that does the following things in order:\n\n  * Choose a set $S \\subseteq \\\\{1, 2, \\ldots, n\\\\}$. \n  * For each $u \\in S$, assign $a_u$ with $b_{a_u}$. \n\nLittle R wonders how many tricks are needed at least to make the initial array\nnon-decreasing. If it is not possible with any amount of tricks, print\n$-1$ instead.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1\\leq n \\leq 10^6$, $1 \\leq m \\leq 10^6$) \u2014 the length of the\ninitial array and the range of the elements in the array.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots,\na_n$ ($1 \\leq a_i \\leq m$) \u2014 the initial array.\n\nThe third line of each test case contains $m$ integers $b_1, \\ldots,\nb_m$ ($1 \\leq b_i \\leq m$) \u2014 the fixed magic array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$ and the sum of $m$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, output a single integer: the minimum number of tricks\nneeded, or $-1$ if it is impossible to make $a_1, \\ldots, a_n$ non-\ndecreasing.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5 8\n1 6 3 7 1\n2 3 5 8 7 1 5 6\n3 3\n1 3 2\n2 1 3\n10 10\n2 8 5 4 8 4 1 5 10 10\n6 7 2 6 3 4 1 1 3 5\n</pre></td>\n    <td><pre>3\n-1\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first case, the initial array $a_1, \\ldots, a_n$ is $[1, 6, 3, 7,\n1]$. You can choose $S$ as follows:\n\n  * first trick: $S = [2, 4, 5]$, $a = [1, 1, 3, 5, 2]$; \n  * second trick: $S = [5]$, $a = [1, 1, 3, 5, 3]$; \n  * third trick: $S = [5]$, $a = [1, 1, 3, 5, 5]$. \n\nSo it is possible to make $a_1, \\ldots, a_n$ non-decreasing using $3$\ntricks. It can be shown that this is the minimum possible amount of tricks.\n\nIn the second case, it is impossible to make $a_1, \\ldots, a_n$ non-\ndecreasing."
    },
    {
        "problem_id": "1973A",
        "url": "https://codeforces.com/problemset/problem/1973/A",
        "title": "Chess For Three",
        "rating": 900,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Three friends gathered to play a few games of chess together.\n\nIn every game, two of them play against each other. The winner gets $2$\npoints while the loser gets $0$, and in case of a draw, both players get\n$1$ point each. Note that the same pair of players could have played any\nnon-negative number of times (possibly zero). It is also possible that no\ngames were played at all.\n\nYou've been told that their scores after all the games were played were\n$p_1$, $p_2$ and $p_3$. Additionally, it is guaranteed that $p_1\n\\leq p_2 \\leq p_3$ holds.\n\nFind the maximum number of draws that could have happened and print it. If\nthere isn't any way to obtain $p_1$, $p_2$ and $p_3$ as a result\nof a non-negative number of games between the three players, print $-1$\ninstead.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $p_1$, $p_2$\nand $p_3$ ($0 \\leq p_1 \\leq p_2 \\leq p_3 \\leq 30$) \u2014 the scores of the\nthree players, sorted non-decreasingly.",
        "output": "For each testcase, print one number \u2014 the maximum possible number of draws\nthat could've happened, or $-1$ if the scores aren't consistent with any\nvalid set of games and results.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n0 0 0\n0 1 1\n1 1 1\n1 1 2\n3 3 3\n3 4 5\n1 1 10\n</pre></td>\n    <td><pre>0\n1\n-1\n2\n-1\n6\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, no games were played at all, so no draws could occur\neither.\n\nFor the second example, exactly one game occurred between the second and the\nthird player and it ended in draw, so the answer is $1$.\n\nIt's easy to see that there's no set of games achieving the scores in third\nexample, so the answer for it is $-1$."
    },
    {
        "problem_id": "1973B",
        "url": "https://codeforces.com/problemset/problem/1973/B",
        "title": "Cat, Fox and the Lonely Array",
        "rating": 1300,
        "tags": [
            "binary search",
            "bitmasks",
            "data structures",
            "greedy",
            "math",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Today, Cat and Fox found an array $a$ consisting of $n$ non-negative\nintegers.\n\nDefine the loneliness of $a$ as the smallest positive integer $k$ ($1 \\le k \\le n$) such that for any two positive integers $i$ and $j$ ($1 \\leq i, j \\leq n - k +1$), the following holds: $$a_i | a_{i+1} | \\ldots | a_{i+k-1} = a_j | a_{j+1} | \\ldots | a_{j+k-1},$$ where $x | y$ denotes the [bitwise OR](https://en.wikipedia.org/wiki/Bitwise_operation#OR) of $x$ and $y$. In other words, for every $k$ consecutive elements, their bitwise OR should be the same. Note that the loneliness of $a$ is well-defined, because for $k = n$ the condition is satisfied.\n\nCat and Fox want to know how lonely the array $a$ is. Help them calculate\nthe loneliness of the found array.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4 $) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n\n\\leq 10^5$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\leq a_i < 2^{20}$) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed\n$10^5$.",
        "output": "For each test case, print one integer  \u2014 the loneliness of the given array.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1\n0\n3\n2 2 2\n3\n1 0 2\n5\n3 0 1 4 2\n5\n2 0 4 0 2\n7\n0 0 0 0 1 2 4\n8\n0 1 3 2 2 1 0 3\n</pre></td>\n    <td><pre>1\n1\n3\n4\n4\n7\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, the loneliness of an array with a single element is\nalways $1$, so the answer is $1$.\n\nIn the second example, the OR of each subarray of length $k = 1$ is\n$2$, so the loneliness of the whole array is $1$.\n\nIn the seventh example, it's true that $(0 | 1 | 3) = (1 | 3 | 2) = (3 | 2 | 2) = (2 | 2 | 1) = (2 | 1 | 0) = (1 | 0 | 3) = 3$, so the condition is satisfied for $k = 3$. We can verify that the condition is not true for any smaller $k$, so the answer is indeed $3$."
    },
    {
        "problem_id": "1973C",
        "url": "https://codeforces.com/problemset/problem/1973/C",
        "title": "Cat, Fox and Double Maximum",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Fox loves permutations! She came up with the following problem and asked Cat\nto solve it:\n\nYou are given an even positive integer $n$ and a permutation$^\\dagger$\n$p$ of length $n$.\n\nThe score of another permutation $q$ of length $n$ is the number of\nlocal maximums in the array $a$ of length $n$, where $a_i = p_i +\nq_i$ for all $i$ ($1 \\le i \\le n$). In other words, the score of\n$q$ is the number of $i$ such that $1 < i < n$ (note the strict\ninequalities), $a_{i-1} < a_i$, and $a_i > a_{i+1}$ (once again, note\nthe strict inequalities).\n\nFind the permutation $q$ that achieves the maximum score for given $n$\nand $p$. If there exist multiple such permutations, you can pick any of\nthem.\n\n$^\\dagger$ A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "The first line of input contains an integer $t$ ($1 \\leq t \\leq 10^4$)\n\u2014 the number of test cases in the input you will have to solve.\n\nThe first line of each test case contains one even integer $n$ ($4 \\leq\nn \\leq 10^5$, $n$ is even) \u2014 the length of the permutation $p$.\n\nThe second line of each test case contains the $n$ integers $p_1, p_2,\n\\ldots, p_n$ ($1 \\leq p_i \\leq n$). It is guaranteed that $p$ is a\npermutation of length $n$.\n\nIt is guaranteed that the sum of $n$ across all test cases doesn't exceed\n$10^5$.",
        "output": "For each test case, output one line containing any permutation of length\n$n$ (the array $q$), such that $q$ maximizes the score under the\ngiven constraints.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n4\n1 2 3 4\n4\n4 3 1 2\n6\n6 5 1 4 2 3\n8\n1 2 4 5 7 6 8 3\n</pre></td>\n    <td><pre>2 4 1 3\n3 1 4 2\n2 5 1 4 3 6\n5 4 8 2 7 1 6 3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, $a = [3, 6, 4, 7]$. The array has just one local\nmaximum (on the second position), so the score of the chosen permutation\n$q$ is $1$. It can be proven that this score is optimal under the\nconstraints.\n\nIn the last example, the resulting array $a = [6, 6, 12, 7, 14, 7, 14, 6]$\nhas $3$ local maximums \u2014 on the third, fifth and seventh positions."
    },
    {
        "problem_id": "1973D",
        "url": "https://codeforces.com/problemset/problem/1973/D",
        "title": "Cat, Fox and Maximum Array Split",
        "rating": 2400,
        "tags": [
            "brute force",
            "interactive",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem.\n\nFox gave Cat two positive integers $n$ and $k$. She has a hidden array\n$a_1, \\ldots , a_n$ of length $n$, such that $1 \\leq a_i \\leq n$\nfor every $i$. Now they are going to play the following game:\n\nFor any two integers $l, r$ such that $1 \\leq l \\leq r \\leq n$, define\n$f(l, r) = (r - l + 1) \\cdot \\max\\limits_{x=l}^r a_x$. In other words,\n$f(l, r)$ is equal to the maximum of the subarray $a_l, \\ldots, a_r$\nmultiplied by its size.\n\nCat can ask Fox at most $2 n$ questions about the array. He will tell her\ntwo integers $l$ and $x$ ($1 \\leq l \\leq n, 1 \\leq x \\leq 10^9$),\nand she will tell him one integer $p$ as the answer \u2014 the smallest\npositive integer $r$ such that $f(l, r) = x$, or $n+1$ if no such\n$r$ exists.\n\nNow, Cat needs to find the largest value $m$ such that there exists a\nsequence $c_1, \\ldots, c_{k-1}$ such that $1 \\leq c_1 < \\ldots < c_{k-1}\n< n$ and $f(1, c_1) = f(c_1 + 1, c_2) = \\ldots = f(c_{k-1}+1, n) = m$.\nIf no such $m$ exists, he should indicate this and take $-1$ as the\nanswer. Note that for $k = 1$, $m$ is always equal to $f(1, n)$.\n\nIn other words, the goal is to find the largest $m$ such that you can\nsplit the array into exactly $k$ subarrays ($k$ is the constant given\nto you in the beginning of the interaction) so that all the subarrays have the\nproduct of their length and their maximum equal to $m$, or determine that\nno such $m$ exists. Every element should belong in exactly one of the\nsubarrays.\n\nCat doesn't know what he should do, so he asked you to play the game for him.",
        "input": "",
        "output": "",
        "interaction": "Each test contains multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^3$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two positive integers $n$ and\n$k$ ($1 \\leq k \\leq n \\leq 10^4$) \u2014 the length of the hidden array and\nthe number of subarrays in the desired split.\n\nNow you are allowed to make queries in the following way \u2014 print one line of\nthe form \"$\\mathtt{?} \\ l \\ x$\" (it must hold that $1 \\leq l \\leq n$,\n$1 \\leq x \\leq 10^9$) and you will receive the smallest integer $r$\nsuch that $l \\leq r \\leq n$ and $f(l, r) = x$, or $n + 1$ if no\nsuch $r$ exists.\n\nIf you want to print the answer, output \"$\\mathtt{!} \\ m$\" and you will\nrecieve $1$ if your answer is correct and $-1$ otherwise. In the first\ncase, the interaction continues with the next test case. Note that printing\nthe answer doesn't count towards the number of queries made. Please note that\nyou don't receive the values for the next test case immediately, you will\nfirst have to read whether your answer to the last test case was correct.\n\nIf you receive the integer $-1$ at any moment, it means your program has\nmade an invalid query, exceeded the query limit, or gave an incorrect answer.\nYour program must terminate immediately to receive a Wrong Answer verdict.\nOtherwise, you can get an arbitrary verdict because your solution will\ncontinue to read from a closed stream.\n\nAfter printing a query, do not forget to output end of line and flush the\noutput. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\nIt is guaranteed that the total sum of $n$ over the test cases won't\nexceed $10^4$.\n\nHacks\n\nThe format of the hacks should be the following: the first line should contain\none integer $t$ ($1 \\leq t \\leq 10^3$) \u2014 the number of test cases. The\ndescription of the test cases should follow.\n\nThe first line of each test case should contain two integers $n$ and\n$k$ ($1 \\leq k \\leq n \\leq 10^4$) \u2014 the length of the array $a$\nand the number of subarrays you want to split it into.\n\nThe second line should contain $n$ integers $a_1, a_2, \\ldots, a_n $\n($1 \\leq a_i \\leq n $).\n\nThe sum of $n$ over all test cases should not exceed $10^4$.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1 1\n\n1\n2 2\n\n1\n\n3\n\n1\n6 3\n\n7\n\n2\n\n3\n\n6\n\n1</pre></td>\n    <td><pre>! 1\n\n\n? 1 1\n\n? 2 1\n\n! -1\n\n\n? 1 9\n\n? 1 6\n\n? 3 6\n\n? 4 6\n\n! 6</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The hidden arrays in the three testcases are $[1]$, $[1, 2]$ and\n$[1, 3, 6, 1, 2, 1]$. In the second testcase, no split satisfies the\nconstraints, so the answer is $-1$.\n\nThe answer for the first query of the third testcase is $7$ since no valid\n$r$ exists. For the second query of the third testcase, since $2 \\cdot\n\\max(1, 3) = 6$, we will get $2$ as the answer, since $r = 1$\ndoesn't satisfy the constraint.\n\nThe sample interaction guessed all three answers ($1, -1$ and $6$)\ncorrectly, so it received $1$ after each answer."
    },
    {
        "problem_id": "1973E",
        "url": "https://codeforces.com/problemset/problem/1973/E",
        "title": "Cat, Fox and Swaps",
        "rating": 2500,
        "tags": [
            "graphs",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Fox has found an array $p_1, p_2, \\ldots, p_n$, that is a permutation of\nlength $n^\\dagger$ of the numbers $1, 2, \\ldots, n$. She wants to sort\nthe elements in increasing order. Cat wants to help her \u2014 he is able to swap\nany two numbers $x$ and $y$ in the array, but only if $l \\leq x + y\n\\leq r$ (note that the constraint is imposed on the values of the elements,\nnot their positions). He can make such swaps any number of times.\n\nThey don't know the numbers $l$, $r$ yet, they only know that it's\ntrue that $1 \\leq l \\leq r \\leq 2 \\cdot n$.\n\nYou are given the number $n$ and the array $p_1, p_2, \\ldots, p_n$.\nDetermine how many pairs $(l, r)$ satisfying the conditions are there such\nthat you can sort the permutation if you can only swap two number $(x, y)$\nsuch that $l \\leq x + y \\leq r$ (arbitrary number of times, possibly\n$0$).\n\n$^\\dagger$ A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nDescription of each test case consists of two lines. The first line contains\none integer $n$ ($1 \\leq n \\leq 10^5$).\n\nThe second line contains $n$ integers: the array $p_1, p_2, \\ldots,\np_n$ ($1 \\le p_i \\le n$). It is guaranteed that this array is a\npermutation of length $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, print the number of pairs of integers $(l, r)$ such\nthat $1 \\leq l \\leq r \\leq 2 \\cdot n$, and you can sort the array under\nthe constraints.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n2\n2 1\n3\n3 1 2\n4\n3 2 1 4\n5\n5 3 1 2 4\n5\n1 2 3 4 5\n6\n3 2 1 5 4 6\n6\n1 3 2 4 5 6\n</pre></td>\n    <td><pre>6\n11\n23\n29\n55\n46\n58\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, we need to be able to swap $1$ and $2$, so we\nmust be able to swap numbers with sum $3$. There are exactly $6$ pairs\nsatisfying the condition: $(1, 3), (2, 3), (3, 3), (1, 4), (2, 4)$ and\n$(3, 4)$, so the answer is $6$.\n\nIn the second example, the $11$ pairs satisfying the condition are $(1,\n4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5)$\nand $(4, 6)$. For example, if we pick the pair $(3, 4)$ we can first\nswap the numbers $1$ and $2$ and then the numbers $1$ and $3$,\nafter this, the permutation is sorted."
    },
    {
        "problem_id": "1973F",
        "url": "https://codeforces.com/problemset/problem/1973/F",
        "title": "Maximum GCD Sum Queries",
        "rating": 3100,
        "tags": [
            "bitmasks",
            "brute force",
            "dp",
            "implementation",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 512,
        "description": "For $k$ positive integers $x_1, x_2, \\ldots, x_k$, the value\n$\\gcd(x_1, x_2, \\ldots, x_k)$ is the greatest common divisor of the\nintegers $x_1, x_2, \\ldots, x_k$ \u2014 the largest integer $z$ such that\nall the integers $x_1, x_2, \\ldots, x_k$ are divisible by $z$.\n\nYou are given three arrays $a_1, a_2, \\ldots, a_n$, $b_1, b_2, \\ldots,\nb_n$ and $c_1, c_2, \\ldots, c_n$ of length $n$, containing positive\nintegers.\n\nYou also have a machine that allows you to swap $a_i$ and $b_i$ for\nany $i$ ($1 \\le i \\le n$). Each swap costs you $c_i$ coins.\n\nFind the maximum possible value of $$\\gcd(a_1, a_2, \\ldots, a_n) +\n\\gcd(b_1, b_2, \\ldots, b_n)$$ that you can get by paying in total at most\n$d$ coins for swapping some elements. The amount of coins you have changes\na lot, so find the answer to this question for each of the $q$ possible\nvalues $d_1, d_2, \\ldots, d_q$.",
        "input": "There are two integers on the first line \u2014 the numbers $n$ and $q$\n($1 \\leq n \\leq 5 \\cdot 10^5$, $1 \\leq q \\leq 5 \\cdot 10^5$).\n\nOn the second line, there are $n$ integers \u2014 the numbers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^8$).\n\nOn the third line, there are $n$ integers \u2014 the numbers $b_1, b_2,\n\\ldots, b_n$ ($1 \\leq b_i \\leq 10^8$).\n\nOn the fourth line, there are $n$ integers \u2014 the numbers $c_1, c_2,\n\\ldots, c_n$ ($1 \\leq c_i \\leq 10^9$).\n\nOn the fifth line, there are $q$ integers \u2014 the numbers $d_1, d_2,\n\\ldots, d_q$ ($0 \\leq d_i \\leq 10^{15}$).",
        "output": "Print $q$ integers \u2014 the maximum value you can get for each of the $q$\npossible values $d$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3 4\n1 2 3\n4 5 6\n1 1 1\n0 1 2 3\n</pre></td>\n    <td><pre>2 3 3 3 \n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5 5\n3 4 6 8 4\n8 3 4 9 3\n10 20 30 40 50\n5 55 13 1000 113\n</pre></td>\n    <td><pre>2 7 3 7 7 \n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1 1\n3\n4\n5\n0\n</pre></td>\n    <td><pre>7 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first query of the first example, we are not allowed to do any swaps at\nall, so the answer is $\\gcd(1, 2, 3) + \\gcd(4, 5, 6) = 2$. In the second\nquery, one of the ways to achieve the optimal value is to swap $a_2$ and\n$b_2$, then the answer is $\\gcd(1, 5, 3) + \\gcd(4, 2, 6) = 3$.\n\nIn the second query of the second example, it's optimal to perform swaps on\npositions $1$ and $3$, then the answer is $\\gcd(3, 3, 6, 9, 3) +\n\\gcd(8, 4, 4, 8, 4) = 7$ and we have to pay $40$ coins in total."
    },
    {
        "problem_id": "1974A",
        "url": "https://codeforces.com/problemset/problem/1974/A",
        "title": "Phone Desktop",
        "rating": 800,
        "tags": [
            "greedy",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Little Rosie has a phone with a desktop (or launcher, as it is also called).\nThe desktop can consist of several screens. Each screen is represented as a\ngrid of size $5 \\times 3$, i.e., five rows and three columns.\n\nThere are $x$ applications with an icon size of $1 \\times 1$ cells;\nsuch an icon occupies only one cell of the screen. There are also $y$\napplications with an icon size of $2 \\times 2$ cells; such an icon\noccupies a square of $4$ cells on the screen. Each cell of each screen can\nbe occupied by no more than one icon.\n\nRosie wants to place the application icons on the minimum number of screens.\nHelp her find the minimum number of screens needed.",
        "input": "The first line of the input contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe first and only line of each test case contains two integers $x$ and\n$y$ ($0 \\leq x, y \\leq 99$) \u2014 the number of applications with a $1\n\\times 1$ icon and the number of applications with a $2 \\times 2$ icon,\nrespectively.",
        "output": "For each test case, output the minimal number of required screens on a\nseparate line.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>11\n1 1\n7 2\n12 4\n0 3\n1 0\n8 1\n0 0\n2 0\n15 0\n8 2\n0 9\n</pre></td>\n    <td><pre>1\n1\n2\n2\n1\n1\n0\n1\n1\n2\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The solution for the first test case can look as follows:\n\n![](CDN_BASE_URL/c1f8e47d264264fb303b101863bef14b) Blue squares represent\nempty spaces for icons, green squares represent $1 \\times 1$ icons, red\nsquares represent $2 \\times 2$ icons\n\nThe solution for the third test case can look as follows:\n\n![](CDN_BASE_URL/05b392e954bd162bfc00b3f026bcba0d)"
    },
    {
        "problem_id": "1974B",
        "url": "https://codeforces.com/problemset/problem/1974/B",
        "title": "Symmetric Encoding",
        "rating": 800,
        "tags": [
            "implementation",
            "sortings",
            "strings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Polycarp has a string $s$, which consists of lowercase Latin letters. He\nencodes this string using the following algorithm:\n\n  * first, he constructs a new auxiliary string $r$, which consists of all distinct letters of the string $s$, written in alphabetical order; \n  * then the encoding happens as follows: each character in the string $s$ is replaced by its symmetric character from the string $r$ (the first character of the string $r$ will be replaced by the last, the second by the second from the end, and so on). \n\nFor example, encoding the string $s$=\"codeforces\" happens as follows:\n\n  * the string $r$ is obtained as \"cdefors\"; \n  * the first character $s_1$='c' is replaced by 's'; \n  * the second character $s_2$='o' is replaced by 'e'; \n  * the third character $s_3$='d' is replaced by 'r'; \n  * ... \n  * the last character $s_{10}$='s' is replaced by 'c'. \n\n![](CDN_BASE_URL/e120531cc984becdbbab53f80507a062) The string $r$ and\nreplacements for $s$=\"codeforces\".\n\nThus, the result of encoding the string $s$=\"codeforces\" is the string\n\"serofedsoc\".\n\nWrite a program that performs decoding \u2014 that is, restores the original string\n$s$ from the encoding result.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the string $b$.\n\nThe second line of each test case contains a string $b$ of length $n$,\nconsisting of lowercase Latin letters \u2014 the result of encoding the original\nstring $s$.\n\nIt is guaranteed that the sum of the values of $n$ over all test cases in\nthe test does not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output the string $s$ from which the encoding result\n$b$ was obtained.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n10\nserofedsoc\n3\nttf\n9\ntlrhgmaoi\n1\nw\n15\nhnndledmnhlttin\n</pre></td>\n    <td><pre>codeforces\nfft\nalgorithm\nw\nmeetinthemiddle\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1974C",
        "url": "https://codeforces.com/problemset/problem/1974/C",
        "title": "Beautiful Triple Pairs",
        "rating": 1400,
        "tags": [
            "combinatorics",
            "data structures"
        ],
        "div": "Div. 3",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "Polycarp was given an array $a$ of $n$ integers. He really likes\ntriples of numbers, so for each $j$ ($1 \\le j \\le n - 2$) he wrote\ndown a triple of elements $[a_j, a_{j + 1}, a_{j + 2}]$.\n\nPolycarp considers a pair of triples $b$ and $c$ beautiful if they\ndiffer in exactly one position, that is, one of the following conditions is\nsatisfied:\n\n  * $b_1 \\ne c_1$ and $b_2 = c_2$ and $b_3 = c_3$; \n  * $b_1 = c_1$ and $b_2 \\ne c_2$ and $b_3 = c_3$; \n  * $b_1 = c_1$ and $b_2 = c_2$ and $b_3 \\ne c_3$. \n\nFind the number of beautiful pairs of triples among the written triples\n$[a_j, a_{j + 1}, a_{j + 2}]$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\dots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of the values of $n$ for all test cases in\nthe test does not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the number of beautiful pairs of\ntriples among the pairs of the form $[a_j, a_{j + 1}, a_{j + 2}]$.\n\nNote that the answer may not fit into 32-bit data types.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n5\n3 2 2 2 3\n5\n1 2 1 2 1\n8\n1 2 3 2 2 3 4 2\n4\n2 1 1 1\n8\n2 1 1 2 1 1 1 1\n7\n2 1 1 1 1 1 1\n6\n2 1 1 1 1 1\n5\n2 1 1 1 1\n</pre></td>\n    <td><pre>2\n0\n3\n1\n8\n4\n3\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, $a = [3, 2, 2, 2, 3]$, Polycarp will write the\nfollowing triples:\n\n  1. $[3, 2, 2]$; \n  2. $[2, 2, 2]$; \n  3. $[2, 2, 3]$. \n\nThe beautiful pairs are triple $1$ with triple $2$ and triple $2$\nwith triple $3$.\n\nIn the third example, $a = [1, 2, 3, 2, 2, 3, 4, 2]$, Polycarp will write\nthe following triples:\n\n  1. $[1, 2, 3]$; \n  2. $[2, 3, 2]$; \n  3. $[3, 2, 2]$; \n  4. $[2, 2, 3]$; \n  5. $[2, 3, 4]$; \n  6. $[3, 4, 2]$; \n\nThe beautiful pairs are triple $1$ with triple $4$, triple $2$\nwith triple $5$, and triple $3$ with triple $6$."
    },
    {
        "problem_id": "1974D",
        "url": "https://codeforces.com/problemset/problem/1974/D",
        "title": "Ingenuity-2",
        "rating": 1400,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Let's imagine the surface of Mars as an infinite coordinate plane. Initially,\nthe rover Perseverance-2 and the helicopter Ingenuity-2 are located at the\npoint with coordinates $(0, 0)$. A set of instructions $s$ consisting\nof $n$ instructions of the following types was specially developed for\nthem:\n\n  * N: move one meter north (from point $(x, y)$ to $(x, y + 1)$); \n  * S: move one meter south (from point $(x, y)$ to $(x, y - 1)$); \n  * E: move one meter east (from point $(x, y)$ to $(x + 1, y)$); \n  * W: move one meter west (from point $(x, y)$ to $(x - 1, y)$). \n\nEach instruction must be executed either by the rover or by the helicopter.\nMoreover, each device must execute at least one instruction. Your task is to\ndistribute the instructions in such a way that after executing all $n$\ninstructions, the helicopter and the rover end up at the same point, or\ndetermine that this is impossible.",
        "input": "The first line of input contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of instructions.\n\nThe second line of each test case contains a string $s$ of length $n$\nconsisting of the characters 'N', 'S', 'E', 'W' \u2014 the sequence of\ninstructions.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10 ^ 5$.",
        "output": "For each test case, if the required distribution of instructions exists,\noutput a string $p$ of length $n$ consisting of the characters 'R',\n'H'. If the $i$-th operation should be executed by the rover, then\n$p_i=\\text{R}$, if the $i$-th operation should be executed by the\nhelicopter, then $p_i=\\text{H}$. If there are multiple solutions, output\nany of them.\n\nOtherwise, output NO.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n6\nNENSNE\n3\nWWW\n6\nNESSWS\n2\nSN\n2\nWE\n4\nSSNN\n4\nWESN\n2\nSS\n4\nEWNN\n4\nWEWE\n</pre></td>\n    <td><pre>RRHRRH\nNO\nHRRHRH\nNO\nNO\nRHRH\nRRHH\nRH\nRRRH\nRRHH</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Let's consider the first example: the string $S = \\texttt{NENSNE}$. One of\nthe possible solutions, shown in the figure below, is $p =\n\\texttt{RRHRRH}$, using which both the rover and the helicopter will end up\none meter north and one meter east.\n\n![](CDN_BASE_URL/266d0d868dd4494e2ec9dbaf74403e88)\n\nFor WWW, the solution is impossible."
    },
    {
        "problem_id": "1974E",
        "url": "https://codeforces.com/problemset/problem/1974/E",
        "title": "Money Buys Happiness",
        "rating": 1800,
        "tags": [
            "dp"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Being a physicist, Charlie likes to plan his life in simple and precise terms.\n\nFor the next $m$ months, starting with no money, Charlie will work hard\nand earn $x$ pounds per month. For the $i$-th month $(1 \\le i \\le\nm)$, there'll be a single opportunity of paying cost $c_i$ pounds to\nobtain happiness $h_i$.\n\nBorrowing is not allowed. Money earned in the $i$-th month can only be\nspent in a later $j$-th month ($j>i$).\n\nSince physicists don't code, help Charlie find the maximum obtainable sum of\nhappiness.",
        "input": "The first line of input contains a single integer $t$ ($1 \\le t \\le\n1000$) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers, $m$ and $x$\n($1 \\le m \\le 50$, $1 \\le x \\le 10^8$) \u2014 the total number of months\nand the monthly salary.\n\nThe $i$-th of the following $m$ lines contains two integers, $c_i$\nand $h_i$ ($0 \\le c_i \\le 10^8$, $1 \\le h_i \\le 10^3$) \u2014 the cost\nand happiness on offer for the $i$-th month. Note that some happiness may\nbe free ($c_i=0$ for some $i$'s).\n\nIt is guaranteed that the sum of $\\sum_i h_i$ over all test cases does not\nexceed $10^5$.",
        "output": "For each test case, print a single integer, the maximum sum of happiness\nCharlie could obtain.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1 10\n1 5\n2 80\n0 10\n200 100\n3 100\n70 100\n100 200\n150 150\n5 8\n3 1\n5 3\n3 4\n1 5\n5 3\n2 5\n1 5\n2 1\n5 3\n2 5\n2 4\n4 1\n5 1\n3 4\n5 2\n2 1\n1 2\n3 5\n3 2\n3 2\n</pre></td>\n    <td><pre>0\n10\n200\n15\n1\n9\n9\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Charlie only gets paid at the end of the month, so is\nunable to afford anything.\n\nIn the second test case, Charlie obtains the free happiness in the first\nmonth.\n\nIn the third test case, it's optimal for Charlie to buy happiness in the\nsecond month. Even with money left at the end, Charlie could not go back in\ntime to obtain the happiness on offer in the first month."
    },
    {
        "problem_id": "1974F",
        "url": "https://codeforces.com/problemset/problem/1974/F",
        "title": "Cutting Game",
        "rating": 1900,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Alice and Bob were playing a game again. They have a grid of size $a \\times\nb$ ($1 \\le a, b \\le 10^9$), on which there are $n$ chips, with at\nmost one chip in each cell. The cell at the intersection of the $x$-th row\nand the $y$-th column has coordinates $(x, y)$.\n\nAlice made the first move, and the players took turns. On each move, a player\ncould cut several (but not all) rows or columns from the beginning or end of\nthe remaining grid and earn a point for each chip that was on the cut part of\nthe grid. Each move can be described by the character 'U', 'D', 'L', or 'R'\nand an integer $k$:\n\n  * If the character is 'U', then the first $k$ remaining rows will be cut; \n  * If the character is 'D', then the last $k$ remaining rows will be cut; \n  * If the character is 'L', then the first $k$ remaining columns will be cut; \n  * If the character is 'R', then the last $k$ remaining columns will be cut. \n\nBased on the initial state of the grid and the players' moves, determine the\nnumber of points earned by Alice and Bob, respectively.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains four integers $a$, $b$,\n$n$, and $m$ ($2 \\le a, b \\le 10^9$, $1 \\le n, m \\le 2 \\cdot\n10^5$) \u2014 the dimensions of the grid, the number of chips, and the number of\nmoves.\n\nEach of the next $n$ lines contain two integers $x_i$ and $y_i$\n($1 \\le x_i \\le a$, $1 \\le y_i \\le b$) \u2014 the coordinates of the chips.\nAll pairs of coordinates are distinct.\n\nEach of the next $m$ lines contain a character $c_j$ and an integer\n$k_j$ \u2014 the description of the $j$-th move. It is guaranteed that\n$k$ is less than the number of rows/columns in the current grid. In other\nwords, a player cannot cut the entire remaining grid on their move.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases\nin the test does not exceed $2 \\cdot 10^5$. It is guaranteed that the sum\nof the values of $m$ across all test cases in the test does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output two integers \u2014 the number of points earned by Alice\nand Bob, respectively.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n4 4 3 2\n4 1\n3 3\n2 4\nD 2\nR 1\n4 4 3 3\n4 1\n3 2\n2 3\nD 1\nL 1\nU 2\n3 5 3 2\n1 3\n2 2\n3 3\nR 2\nR 2\n6 4 4 2\n1 4\n2 3\n5 3\n1 1\nR 1\nU 1\n9 3 2 1\n6 1\n3 3\nD 8\n10 10 2 5\n7 5\n9 1\nR 1\nL 2\nD 1\nU 4\nD 1\n</pre></td>\n    <td><pre>2 1\n2 0\n0 3\n1 1\n2 0\n0 1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Below is the game from the first example:\n\n![](CDN_BASE_URL/3730e4e7ac2159abc9c10c7ca7091e03)\n\nOn her turn, Alice cut $2$ rows from the bottom and scored $2$ points,\nthen Bob cut $1$ column from the right and scored one point. Note that if\nBob had cut $1$ row from the bottom, he would have also scored $1$\npoint."
    },
    {
        "problem_id": "1974G",
        "url": "https://codeforces.com/problemset/problem/1974/G",
        "title": "Money Buys Less Happiness Now",
        "rating": 2000,
        "tags": [
            "data structures",
            "greedy",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You can never buy enough happiness, so here we go again! In this version, you\ncan only buy $h_i = 1$ unit of happiness each month, but the number of\nmonths is hugely increased. We are in the realm of quantum happiness and time\ndilation.\n\nBeing a physicist, Charlie likes to plan his life in simple and precise terms.\n\nFor the next $m$ months, starting with no money, Charlie will work hard\nand earn $x$ pounds per month. For the $i$-th month $(1 \\le i \\le\nm)$, there'll be a single opportunity of paying cost $c_i$ pounds to\nobtain one unit of happiness. You cannot buy more than one unit each month.\n\nBorrowing is not allowed. Money earned in the $i$-th month can only be\nspent in a later $j$-th month ($j>i$).\n\nSince physicists don't code, help Charlie find the maximum reachable units of\nhappiness.",
        "input": "The first line of the input contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains two integers, $m$ and $x$\n($1 \\le m \\le 2 \\cdot 10^5$, $1 \\le x \\le 10^3$) \u2014 the total number of\nmonths and the monthly salary.\n\nThe second line of each test case contains $m$ integers $c_1, c_2,\n\\dots, c_m$ ($1 \\leq c_i \\leq 10^3$) \u2014 the cost of one unit of happiness\nfor each month.\n\nIt is guaranteed that sum of $m$ over all test cases does not exceed $2\n\\cdot 10^5$.",
        "output": "For each test case, output one integer \u2014 the maximal amount of happiness\nCharlie can get.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n3 3\n2 2 2\n6 5\n2 2 8 2 6 8\n6 4\n4 10 3 8 6 10\n2 1\n1 1\n4 1\n4 1 3 1\n4 2\n1 3 4 3\n</pre></td>\n    <td><pre>2\n4\n3\n1\n2\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1975A",
        "url": "https://codeforces.com/problemset/problem/1975/A",
        "title": "Bazoka and Mocha's Array",
        "rating": 800,
        "tags": [
            "brute force",
            "greedy",
            "implementation",
            "sortings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Mocha likes arrays, so before her departure, Bazoka gave her an array $a$\nconsisting of $n$ positive integers as a gift.\n\nNow Mocha wants to know whether array $a$ could become sorted in non-\ndecreasing order after performing the following operation some (possibly,\nzero) times:\n\n  * Split the array into two parts \u2014 a prefix and a suffix, then swap these two parts. In other words, let $a=x+y$. Then, we can set $a:= y+x$. Here $+$ denotes the array concatenation operation. \n\nFor example, if $a=[3,1,4,1,5]$, we can choose $x=[3,1]$ and\n$y=[4,1,5]$, satisfying $a=x+y$. Then, we can set $a:= y + x =\n[4,1,5,3,1]$. We can also choose $x=[3,1,4,1,5]$ and $y=[\\,]$,\nsatisfying $a=x+y$. Then, we can set $a := y+x = [3,1,4,1,5]$. Note\nthat we are not allowed to choose $x=[3,1,1]$ and $y=[4,5]$, neither\nare we allowed to choose $x=[1,3]$ and $y=[5,1,4]$, as both these\nchoices do not satisfy $a=x+y$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\leq t\\leq 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2\\leq\nn\\leq 50$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers\n$a_1,a_2,\\ldots,a_n$ ($1\\leq a_i \\leq 10^6$) \u2014 the elements of array\n$a$.",
        "output": "For each test case, output \"Yes\" if $a$ could become non-decreasing after\nperforming the operation any number of times, and output \"No\" if not.\n\nYou can output \"Yes\" and \"No\" in any case (for example, strings \"yEs\", \"yes\",\n\"Yes\" and \"YES\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n6\n1 1 4 5 1 4\n5\n7 9 2 2 3\n3\n1 2 3\n</pre></td>\n    <td><pre>No\nYes\nYes\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it can be proven that $a$ cannot become non-\ndecreasing after performing the operation any number of times.\n\nIn the second test case, we can perform the following operations to make\n$a$ sorted in non-decreasing order:\n\n  * Split the array into two parts: $x=[7]$ and $y=[9,2,2,3]$, then swap these two parts. The array will become $y+x = [9,2,2,3,7]$. \n  * Split the array into two parts: $x=[9]$ and $y=[2,2,3,7]$, then swap these two parts. The array will become $y+x=[2,2,3,7,9]$, which is non-decreasing."
    },
    {
        "problem_id": "1975B",
        "url": "https://codeforces.com/problemset/problem/1975/B",
        "title": "378QAQ and Mocha's Array",
        "rating": 1000,
        "tags": [
            "brute force",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Mocha likes arrays, so before her departure, 378QAQ gave her an array $a$\nconsisting of $n$ positive integers as a gift.\n\nMocha thinks that $a$ is beautiful if there exist two numbers $i$ and\n$j$ ($1\\leq i,j\\leq n$, $i\\neq j$) such that for all $k$ ($1\n\\leq k \\leq n$), $a_k$ is divisible$^\\dagger$ by either $a_i$ or\n$a_j$.\n\nDetermine whether $a$ is beautiful.\n\n$^\\dagger$ $x$ is divisible by $y$ if there exists an integer\n$z$ such that $x = y \\cdot z$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\leq t\\leq 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($3\\leq\nn\\leq 10^5$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers\n$a_1,a_2,\\ldots,a_n$ ($1\\leq a_i \\leq 10^9$) \u2014 the elements of the\narray $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output \"Yes\" if array $a$ is beautiful, and output\n\"No\" otherwise.\n\nYou can output \"Yes\" and \"No\" in any case (for example, strings \"yEs\", \"yes\",\n\"Yes\" and \"YES\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n7 3 8\n5\n7 1 9 3 5\n5\n4 12 2 6 3\n5\n7 49 9 3 1000000000\n</pre></td>\n    <td><pre>No\nYes\nYes\nNo\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, any two numbers in the array are coprime, so the\nanswer is \"No\".\n\nIn the second test case, we can pick $i=2$ and $j=1$. Since every\nnumber in the array is divisible by $a_i = 1$, the answer is \"Yes\".\n\nIn the third test case, we can pick $i=3$ and $j=5$. $2$ and\n$4$ is divisible by $a_i = 2$ while $3$, $6$ and $12$ is\ndivisible by $a_j = 3$, so the answer is \"Yes\"."
    },
    {
        "problem_id": "1975C",
        "url": "https://codeforces.com/problemset/problem/1975/C",
        "title": "Chamo and Mocha's Array",
        "rating": 1200,
        "tags": [
            "binary search",
            "brute force",
            "greedy"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Mocha likes arrays, so before her departure, Chamo gave her an array $a$\nconsisting of $n$ positive integers as a gift.\n\nMocha doesn't like arrays containing different numbers, so Mocha decides to\nuse magic to change the array. Mocha can perform the following three-step\noperation some (possibly, zero) times:\n\n  1. Choose indices $l$ and $r$ ($1 \\leq l < r \\leq n$) \n  2. Let $x$ be the median$^\\dagger$ of the subarray $[a_l, a_{l+1},\\ldots, a_r]$ \n  3. Set all values $a_l, a_{l+1},\\ldots, a_r$ to $x$ \n\nSuppose $a=[1,2,3,4,5]$ initially:\n\n  * If Mocha chooses $(l,r)=(3,4)$ in the first operation, then $x=3$, the array will be changed into $a=[1,2,3,3,5]$. \n  * If Mocha chooses $(l,r)=(1,3)$ in the first operation, then $x=2$, the array will be changed into $a=[2,2,2,4,5]$. \n\nMocha will perform the operation until the array contains only the same\nnumber. Mocha wants to know what is the maximum possible value of this number.\n\n$^\\dagger$ The median in an array $b$ of length $m$ is an element\nthat occupies position number $\\lfloor \\frac{m+1}{2} \\rfloor$ after we\nsort the elements in non-decreasing order. For example, the median of\n$[3,1,4,1,5]$ is $3$ and the median of $[5,25,20,24]$ is $20$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\leq t\\leq 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2\\leq\nn\\leq 10^5$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers\n$a_1,a_2,\\ldots,a_n$ ($1\\leq a_i \\leq 10^9$) \u2014 the elements of the\narray $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output the maximum value of the number.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n2\n1 2\n5\n1 2 3 4 5\n</pre></td>\n    <td><pre>1\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $a=[1,2]$. Mocha can only choose the interval\n$(l,r)=(1,2)$. The array will be changed to $a=[1,1]$. Therefore, the\nanswer is $1$.\n\nIn the second test case, Mocha can perform the following operations:\n\n  * Choose the interval $(l,r)=(4,5)$, then $a=[1,2,3,4,4]$. \n  * Choose the interval $(l,r)=(3,5)$, then $a=[1,2,4,4,4]$. \n  * Choose the interval $(l,r)=(1,5)$, then $a=[4,4,4,4,4]$. \n\nThe array contains only the same number, which is $4$. It can be proven\nthat the maximum value of the final number cannot be greater than $4$."
    },
    {
        "problem_id": "1975D",
        "url": "https://codeforces.com/problemset/problem/1975/D",
        "title": "Paint the Tree",
        "rating": 1700,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "greedy",
            "shortest paths",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "378QAQ has a tree with $n$ vertices. Initially, all vertices are white.\n\nThere are two chess pieces called $P_A$ and $P_B$ on the tree.\n$P_A$ and $P_B$ are initially located on vertices $a$ and $b$\nrespectively. In one step, 378QAQ will do the following in order:\n\n  1. Move $P_A$ to a neighboring vertex. If the target vertex is white, this vertex will be painted red. \n  2. Move $P_B$ to a neighboring vertex. If the target vertex is colored in red, this vertex will be painted blue. \n\nInitially, the vertex $a$ is painted red. If $a=b$, the vertex $a$\nis painted blue instead. Note that both the chess pieces must be moved in each\nstep. Two pieces can be on the same vertex at any given time.\n\n378QAQ wants to know the minimum number of steps to paint all vertices blue.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\leq t\\leq 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains one integer $n$ ($1\\leq n\\leq\n2\\cdot 10^5$).\n\nThe second line of each test case contains two integers $a$ and $b$\n($1\\leq a,b\\leq n$).\n\nThen $n - 1$ lines follow, each line contains two integers $x_i$ and\n$y_i$ ($1 \\le x_i,y_i \\le n$), indicating an edge between vertices\n$x_i$ and $y_i$. It is guaranteed that these edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, output the minimum number of steps to paint all vertices\nblue.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2\n1 2\n1 2\n5\n1 2\n1 2\n1 3\n1 4\n1 5\n8\n5 4\n7 1\n1 5\n1 8\n8 3\n7 2\n8 6\n3 4\n</pre></td>\n    <td><pre>2\n8\n13\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, 378QAQ can paint all vertices blue in the following\norder:\n\n  * Initially, $P_A$ is located on the vertex $1$, and $P_B$ is located on the vertex $2$. The vertex $1$ is painted red and the vertex $2$ is white. \n  * 378QAQ moves $P_A$ to the vertex $2$ and paints it red. Then 378QAQ moves $P_B$ to the vertex $1$ and paints it blue. \n  * 378QAQ moves $P_A$ to the vertex $1$. Then 378QAQ moves $P_B$ to the vertex $2$ and paints it blue."
    },
    {
        "problem_id": "1975E",
        "url": "https://codeforces.com/problemset/problem/1975/E",
        "title": "Chain Queries",
        "rating": 2100,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "implementation",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a tree of $n$ vertices numbered from $1$ to $n$.\nInitially, all vertices are colored white or black.\n\nYou are asked to perform $q$ queries:\n\n  * \"u\" \u2014 toggle the color of vertex $u$ (if it was white, change it to black and vice versa). \n\nAfter each query, you should answer whether all the black vertices form a\nchain. That is, there exist two black vertices such that the simple path\nbetween them passes through all the black vertices and only the black\nvertices. Specifically, if there is only one black vertex, they form a chain.\nIf there are no black vertices, they do not form a chain.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\leq t\\leq 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $q$\n($1\\leq n,q\\leq 2\\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers\n$c_1,c_2,\\ldots,c_n$ ($c_i \\in \\\\{ \\mathtt{0}, \\mathtt{1} \\\\}$) \u2014 the\ninitial color of the vertices. $c_i$ denotes the color of vertex $i$\nwhere $\\mathtt{0}$ denotes the color white, and $\\mathtt{1}$ denotes\nthe color black.\n\nThen $n - 1$ lines follow, each line contains two integers $x_i$ and\n$y_i$ ($1 \\le x_i,y_i \\le n$), indicating an edge between vertices\n$x_i$ and $y_i$. It is guaranteed that these edges form a tree.\n\nThe following $q$ lines each contain an integer $u_i$ ($1 \\le u_i\n\\le n$), indicating the color of vertex $u_i$ needs to be toggled.\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases\nrespectively does not exceed $2\\cdot 10^5$.",
        "output": "For each query, output \"Yes\" if the black vertices form a chain, and output\n\"No\" otherwise.\n\nYou can output \"Yes\" and \"No\" in any case (for example, strings \"yEs\", \"yes\",\n\"Yes\" and \"YES\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n2 1\n1 0\n1 2\n1\n5 4\n1 0 0 0 0\n1 2\n1 3\n1 5\n3 4\n4\n3\n2\n5\n</pre></td>\n    <td><pre>No\nNo\nYes\nYes\nNo\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5 3\n1 1 1 1 1\n3 5\n2 5\n3 4\n1 5\n1\n1\n1\n4 4\n0 0 0 0\n1 2\n2 3\n1 4\n1\n2\n3\n2\n1 1\n1\n1\n1 1\n0\n1\n</pre></td>\n    <td><pre>Yes\nNo\nYes\nYes\nYes\nYes\nNo\nNo\nYes\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second test case, the color of the vertices are as follows:\n\nThe initial tree:\n\n![](CDN_BASE_URL/b4c312b1023ec449df862310fa3c507b)\n\nThe first query toggles the color of vertex $4$:\n\n![](CDN_BASE_URL/f7f4726f86d3ba27bbee2f70be9c2f51)\n\nThe second query toggles the color of vertex $3$:\n\n![](CDN_BASE_URL/61a2241ad4b2defae2bf8781f718c6d1)\n\nThe third query toggles the color of vertex $2$:\n\n![](CDN_BASE_URL/b888921fda4dbca3670c3f99ac8553ac)\n\nThe fourth query toggles the color of vertex $5$:\n\n![](CDN_BASE_URL/bab22014ef15ff4590580c6b5c7239cb)"
    },
    {
        "problem_id": "1975F",
        "url": "https://codeforces.com/problemset/problem/1975/F",
        "title": "Set",
        "rating": 2600,
        "tags": [
            "bitmasks",
            "brute force",
            "combinatorics",
            "dfs and similar",
            "divide and conquer",
            "dp",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Define the binary encoding of a finite set of natural numbers $T \\subseteq\n\\\\{0,1,2,\\ldots\\\\}$ as $f(T) = \\sum\\limits_{i \\in T} 2^i$. For example,\n$f(\\\\{0,2\\\\}) = 2^0 + 2^2 = 5$ and $f(\\\\{\\\\}) = 0$. Notice that\n$f$ is a bijection from all such sets to all non-negative integers. As\nsuch, $f^{-1}$ is also defined.\n\nYou are given an integer $n$ along with $2^n-1$ sets\n$V_1,V_2,\\ldots,V_{2^n-1}$.\n\nFind all sets $S$ that satisfy the following constraint:\n\n  * $S \\subseteq \\\\{0,1,\\ldots,n-1\\\\}$. Note that $S$ can be empty. \n  * For all non-empty subsets $T \\subseteq \\\\{0,1,\\ldots,n-1\\\\}$, $|S \\cap T| \\in V_{f(T)}$. \n\nDue to the large input and output, both input and output will be given in\nterms of binary encodings of the sets.",
        "input": "The first line of input contains a single integer $n$ ($1 \\leq n \\leq\n20$).\n\nThe second line of input contains $2^n-1$ integers\n$v_1,v_2,\\ldots,v_{2^n-1}$ ($0 \\leq v_i < 2^{n+1}$) \u2014 the sets\n$V_i$ given in their binary encoding where $V_i = f^{-1}(v_i)$.",
        "output": "The first line of output should contain an integer $k$ indicating the\nnumber of possible $S$.\n\nIn the following $k$ lines, you should output $f(S)$ for all possible\n$S$ in increasing order.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n15 15 15 15 15 15 12\n</pre></td>\n    <td><pre>4\n3\n5\n6\n7\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n63 63 63 63 6 63 63 63 63 63 63 5 63 63 63 63 63 63 8 63 63 63 63 2 63 63 63 63 63 63 63\n</pre></td>\n    <td><pre>1\n19\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one possible $S$ is $f^{-1}(3) = \\\\{0,1\\\\}$.\nAll the non-empty subsets $T \\subseteq \\\\{0,1,2\\\\}$ and the corresponding\n$|S \\cap T|$, $f(T)$ and $V_f(T)$ are as follows:\n\n$T$| $|S\\cap T|$| $f(T)$| $V_{f(T)}$  \n---|---|---|---  \n$\\\\{0\\\\}$| $1$| $1$| $\\\\{0,1,2,3\\\\}$  \n$\\\\{1\\\\}$| $1$| $2$| $\\\\{0,1,2,3\\\\}$  \n$\\\\{2\\\\}$| $0$| $4$| $\\\\{0,1,2,3\\\\}$  \n$\\\\{0,1\\\\}$| $2$| $3$| $\\\\{0,1,2,3\\\\}$  \n$\\\\{0,2\\\\}$| $1$| $5$| $\\\\{0,1,2,3\\\\}$  \n$\\\\{1,2\\\\}$| $1$| $6$| $\\\\{0,1,2,3\\\\}$  \n$\\\\{0,1,2\\\\}$| $2$| $7$| $\\\\{2,3\\\\}$"
    },
    {
        "problem_id": "1975G",
        "url": "https://codeforces.com/problemset/problem/1975/G",
        "title": "Zimpha Fan Club",
        "rating": 3000,
        "tags": [
            "fft",
            "greedy",
            "math",
            "strings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 12000,
        "memory_limit_mb": 512,
        "description": "One day, Zimpha casually came up with a problem. As a member of \"Zimpha fan\nclub\", you decided to solve that problem.  \n  \nYou are given two strings $s$ and $t$ of length $n$ and $m$,\nrespectively. Both strings only consist of lowercase English letters, - and *.\n\nYou need to replace all occurrences of * and -, observing the following rules:\n\n  * For each -, you must replace it with any lowercase English letter. \n  * For each *, you must replace it with a string of any (possibly, zero) length which only consists of lowercase English letters. \n\nNote that you can replace two different instances of - with different\ncharacters. You can also replace each two different instances of * with\ndifferent strings.\n\nSuppose $s$ and $t$ have been transformed into $s'$ and $t'$.\nNow you're wondering if there's a replacement that makes $s'=t'$.",
        "input": "The first line of input contains two integers $n$ and $m$ ($1 \\leq\nn, m \\leq 2 \\cdot 10^6$) \u2014 the length of the strings $s$ and $t$,\nrespectively.\n\nThe second line contains the string $s$ of length $n$. It is\nguaranteed that $s$ only consists of lowercase English letters, - and *.\n\nThe third line contains the string $t$ of length $m$. It is guaranteed\nthat $t$ only consists of lowercase English letters, - and *.",
        "output": "For each test case, output \"Yes\" if there is a replacement that makes\n$s'=t'$, and output \"No\" otherwise.\n\nYou can output \"Yes\" and \"No\" in any case (for example, strings \"yEs\", \"yes\",\n\"Yes\" and \"YES\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10 10\njustmonika\nj-stsayori\n</pre></td>\n    <td><pre>No</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7 8\nttk-wxx\n*tt-l-xx\n</pre></td>\n    <td><pre>Yes</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>13 11\nasoulwangziji\n-soulg*z-y-\n</pre></td>\n    <td><pre>No</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7 3\nabc*cba\na*c\n</pre></td>\n    <td><pre>No</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>20 18\nbulijiojio-dibuliduo\n*li*ji-*ox*i*-du*-\n</pre></td>\n    <td><pre>Yes</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second test case, we can transform both strings into ttklwxx. In\n$s$, - will be replaced with l. In $t$, * will be replaced by the\nempty string with the first and second - will be replaced with k and w\nrespectively.\n\nIn the fifth test case, we can transform both strings into\nbulijiojioxdibuliduo."
    },
    {
        "problem_id": "1975H",
        "url": "https://codeforces.com/problemset/problem/1975/H",
        "title": "378QAQ and Core",
        "rating": 3500,
        "tags": [
            "greedy",
            "strings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "378QAQ has a string $s$ of length $n$. Define the core of a string as\nthe substring$^\\dagger$ with maximum lexicographic$^\\ddagger$ order.\n\nFor example, the core of \"$\\mathtt{bazoka}$\" is \"$\\mathtt{zoka}$\", and\nthe core of \"$\\mathtt{aaa}$\" is \"$\\mathtt{aaa}$\".\n\n378QAQ wants to rearrange the string $s$ so that the core is\nlexicographically minimum. Find the lexicographically minimum possible core\nover all rearrangements of $s$.\n\n$^\\dagger$ A substring of string $s$ is a continuous segment of\nletters from $s$. For example, \"$\\mathtt{defor}$\",\n\"$\\mathtt{code}$\" and \"$\\mathtt{o}$\" are all substrings of\n\"$\\mathtt{codeforces}$\" while \"$\\mathtt{codes}$\" and\n\"$\\mathtt{aaa}$\" are not.\n\n$^\\ddagger$ A string $p$ is lexicographically smaller than a string\n$q$ if and only if one of the following holds:\n\n  * $p$ is a prefix of $q$, but $p \\ne q$; or \n  * in the first position where $p$ and $q$ differ, the string $p$ has a smaller element than the corresponding element in $q$ (when compared by their ASCII code). \n\nFor example, \"$\\mathtt{code}$\" and \"$\\mathtt{coda}$\" are both\nlexicographically smaller than \"$\\mathtt{codeforces}$\" while\n\"$\\mathtt{codeforceston}$\" and \"$\\mathtt{z}$\" are not.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\leq t\\leq 10^5$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1\\leq\nn\\leq 10^6$) \u2014 the length of string $s$.\n\nThe next line of each test case contains the string $s$ of length $n$.\nThe string $s$ consists of lowercase English letters.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, output the lexicographically minimum possible core over\nall rearrangements of $s$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n3\nqaq\n4\ncccc\n6\nbazoka\n6\nzazzzz\n7\nababbbb\n7\nccbabcc\n</pre></td>\n    <td><pre>qaq\ncccc\nz\nzzz\nbbababb\ncbcacbc\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, all possible rearrangements and their corresponding\ncores are as follows:\n\n  * \"$\\mathtt{qaq}$\", its core is \"$\\mathtt{qaq}$\". \n  * \"$\\mathtt{aqq}$\", its core is \"$\\mathtt{qq}$\". \n  * \"$\\mathtt{qqa}$\", its core is \"$\\mathtt{qqa}$\". \n\nSo the core with the minimum lexicographic order in all rearrangement plans is\n\"$\\mathtt{qaq}$\"."
    },
    {
        "problem_id": "1975I",
        "url": "https://codeforces.com/problemset/problem/1975/I",
        "title": "Mind Bloom",
        "rating": 3500,
        "tags": [
            "dp"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 1024,
        "description": "This is the way it always was.\n\nThis is the way it always will be.\n\nAll will be forgotten again soon...\n\nJellyfish is playing a one-player card game called \"Slay the Spire\". There are\n$n$ cards in total numbered from $1$ to $n$. The $i$-th card\nhas power $c_i$.\n\nThere is a binary string $s$ of length $n$. If $s_i = \\texttt{0}$,\nthe $i$-th card is initially in the draw pile. If $s_i = \\texttt{1}$,\nthe $i$-th card is initially in Jellyfish's hand.\n\nJellyfish will repeat the following process until either her hand or the draw\npile is empty.\n\n  1. Let $x$ be the power of the card with the largest power in her hand. \n  2. Place a single card with power $x$ back into the draw pile. \n  3. Randomly draw $x$ cards from the draw pile. All subsets of $x$ cards from the draw pile have an equal chance of being drawn. If there are fewer than $x$ cards in the draw pile, Jellyfish will draw all cards. \n\nAt the end of this process, find the probability that Jellyfish can empty the\ndraw pile, modulo $1\\,000\\,000\\,007$.\n\nFormally, let $M=1\\,000\\,000\\,007$. It can be shown that the answer can be\nexpressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and\n$q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer\nequal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer\n$x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\leq t\\leq 100$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq\nn \\leq 120$) \u2014 the number of cards.\n\nThe second line of each test case contains $n$ integers\n$c_1,c_2,\\ldots,c_n$ ($0 \\leq c_i \\leq n$) \u2014 the powers of the cards.\nIt is guaranteed that $c_1 \\leq c_2 \\leq \\ldots \\leq c_n$.\n\nThe third line of each test case contains a binary string $s$ of length\n$n$. If $s_i = \\texttt{0}$, the $i$-th card is initially in the\ndraw pile. If $s_i = \\texttt{1}$, the $i$-th card is initially in\nJellyfish's hand.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed\n$120^2$.",
        "output": "For each test case, output the probability that Jellyfish can empty the draw\npile modulo $1\\,000\\,000\\,007$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5\n0 1 1 1 2\n00100\n3\n2 3 3\n000\n10\n0 0 0 0 0 0 0 1 1 1\n1111011111\n20\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 3 3 4\n00000000001000101010\n</pre></td>\n    <td><pre>500000004\n0\n0\n675898154\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Jellyfish will keep playing cards with power $1$\nuntil Jellyfish draws a card with power $0$ or power $2$. If Jellyfish\ndraws a card with power $0$, she will eventually empty her hand. If\nJellyfish draws a card with power $2$, she will eventually empty the draw\npile. Since there is an equal chance of drawing $0$ or $2$, the answer\nis $\\frac{1}{2}$, and $2 \\cdot 500\\,000\\,004 \\equiv 1 \\pmod {10^9+7}$"
    },
    {
        "problem_id": "1976A",
        "url": "https://codeforces.com/problemset/problem/1976/A",
        "title": "Verify Password",
        "rating": 800,
        "tags": [
            "implementation",
            "sortings",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Monocarp is working on his new site, and the current challenge is to make the\nusers pick strong passwords.\n\nMonocarp decided that strong passwords should satisfy the following\nconditions:\n\n  * password should consist only of lowercase Latin letters and digits; \n  * there should be no digit that comes after a letter (so, after each letter, there is either another letter or the string ends); \n  * all digits should be sorted in the non-decreasing order; \n  * all letters should be sorted in the non-decreasing order. \n\nNote that it's allowed for the password to have only letters or only digits.\n\nMonocarp managed to implement the first condition, but he struggles with the\nremaining ones. Can you help him to verify the passwords?",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 1000$) \u2014\nthe number of testcases.\n\nThe first line of each testcase contains a single integer $n$ ($1 \\le n\n\\le 20$) \u2014 the length of the password.\n\nThe second line contains a string, consisting of exactly $n$ characters.\nEach character is either a lowercase Latin letter or a digit.",
        "output": "For each testcase, print \"YES\" if the given password is strong and \"NO\"\notherwise.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n4\n12ac\n5\n123wa\n9\nallllmost\n5\nac123\n6\n011679\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second testcase, the letters are not sorted in the non-decreasing\norder.\n\nIn the fourth testcase, there is a digit that comes after a letter \u2014 digit '1'\nafter a letter 'c'."
    },
    {
        "problem_id": "1976B",
        "url": "https://codeforces.com/problemset/problem/1976/B",
        "title": "Increase/Decrease/Copy",
        "rating": 1100,
        "tags": [
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given two integer arrays: array $a$ of length $n$ and array\n$b$ of length $n+1$.\n\nYou can perform the following operations any number of times in any order:\n\n  * choose any element of the array $a$ and increase it by $1$; \n  * choose any element of the array $a$ and decrease it by $1$; \n  * choose any element of the array $a$, copy it and append the copy to the end of the array $a$. \n\nYour task is to calculate the minimum number of aforementioned operations\n(possibly zero) required to transform the array $a$ into the array\n$b$. It can be shown that under the constraints of the problem, it is\nalways possible.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nEach test case consists of three lines:\n\n  * the first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$); \n  * the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$); \n  * the third line contains $n + 1$ integers $b_1, b_2, \\dots, b_{n + 1}$ ($1 \\le b_i \\le 10^9$). \n\nAdditional constraint on the input: the sum of $n$ over all test cases\ndoesn't exceed $2 \\cdot 10^5$.",
        "output": "For each test case, print a single integer \u2014 the minimum number of operations\n(possibly zero) required to transform the array $a$ into the array\n$b$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1\n2\n1 3\n2\n3 3\n3 3 3\n4\n4 2 1 2\n2 1 5 2 3\n</pre></td>\n    <td><pre>3\n1\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, you can transform $a$ into $b$ as follows:\n$[2] \\rightarrow [2, 2] \\rightarrow [1, 2] \\rightarrow [1, 3]$."
    },
    {
        "problem_id": "1976C",
        "url": "https://codeforces.com/problemset/problem/1976/C",
        "title": "Job Interview",
        "rating": 1600,
        "tags": [
            "binary search",
            "dp",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Monocarp is opening his own IT company. He wants to hire $n$ programmers\nand $m$ testers.\n\nThere are $n+m+1$ candidates, numbered from $1$ to $n+m+1$ in\nchronological order of their arriving time. The $i$-th candidate has\nprogramming skill $a_i$ and testing skill $b_i$ (a person's\nprogramming skill is different from their testing skill). The skill of the\nteam is the sum of the programming skills of all candidates hired as\nprogrammers, and the sum of the testing skills of all candidates hired as\ntesters.\n\nWhen a candidate arrives to interview, Monocarp tries to assign them to the\nmost suitable position for them (if their programming skill is higher, then he\nhires them as a programmer, otherwise as a tester). If all slots for that\nposition are filled, Monocarp assigns them to the other position.\n\nYour task is, for each candidate, calculate the skill of the team if everyone\nexcept them comes to interview. Note that it means that exactly $n+m$\ncandidates will arrive, so all $n+m$ positions in the company will be\nfilled.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nEach test case consists of three lines:\n\n  * the first line contains two integers $n$ and $m$ ($0 \\le n, m \\le 2 \\cdot 10^5$; $2 \\le n + m + 1 \\le 2 \\cdot 10^5$) \u2014 the number of programmers and the number of testers Monocarp wants to hire, respectively; \n  * the second line contains $n + m + 1$ integers $a_1, a_2, \\dots, a_{n+m+1}$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the programming skill of the $i$-th candidate; \n  * the third line contains $n + m + 1$ integers $b_1, b_2, \\dots, b_{n+m+1}$ ($1 \\le b_i \\le 10^9$; $b_i \\ne a_i$), where $b_i$ is the testing skill of the $i$-th candidate. \n\nAdditional constraint on the input: the sum of $(n + m + 1)$ over all test\ncases doesn't exceed $2 \\cdot 10^5$.",
        "output": "For each test case, print $n + m + 1$ integers, where the $i$-th\ninteger should be equal to the skill of the team if everyone except the\n$i$-th candidate comes to interview.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 0\n2 1\n1 2\n0 2\n4 5 5\n5 4 1\n1 2\n2 1 5 4\n5 2 3 1\n3 1\n4 3 3 4 1\n5 5 4 5 2\n</pre></td>\n    <td><pre>1 2 \n5 6 9 \n8 11 11 12 \n13 13 13 12 15 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Let's consider the third test case of the example:\n\n  * if the $1$-st candidate does not arrive, the $2$-nd candidate gets hired as a tester, the $3$-rd candidate gets hired as a programmer, the $4$-th candidate gets hired as a tester. The total skill of the team will be $2 + 5 + 1 = 8$; \n  * if the $2$-nd candidate does not arrive, the $1$-st candidate gets hired as a tester, the $3$-rd candidate gets hired as a programmer, the $4$-th candidate gets hired as a tester. The total skill of the team will be $5 + 5 + 1 = 11$; \n  * if the $3$-rd candidate does not arrive, the $1$-st candidate gets hired as a tester, the $2$-nd candidate gets hired as a tester, the $4$-th candidate gets hired as a programmer. The total skill of the team will be $5 + 2 + 4 = 11$; \n  * if the $4$-th candidate does not arrive, the $1$-st candidate gets hired as a tester, the $2$-nd candidate gets hired as a tester, the $3$-rd candidate gets hired as a programmer. The total skill of the team will be $5 + 2 + 5 = 12$."
    },
    {
        "problem_id": "1976D",
        "url": "https://codeforces.com/problemset/problem/1976/D",
        "title": "Invertible Bracket Sequences",
        "rating": 2000,
        "tags": [
            "binary search",
            "combinatorics",
            "data structures",
            "divide and conquer",
            "implementation",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "A regular bracket sequence is a bracket sequence that can be transformed into\na correct arithmetic expression by inserting characters '1' and '+' between\nthe original characters of the sequence. For example:\n\n  * bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"); \n  * bracket sequences \")(\", \"(\" and \")\" are not. \n\nLet's define the inverse of the bracket sequence as follows: replace all\nbrackets '(' with ')', and vice versa (all brackets ')' with '('). For\nexample, strings \"()((\" and \")())\" are inverses of each other.\n\nYou are given a regular bracket sequence $s$. Calculate the number of\npairs of integers $(l,r)$ ($1 \\le l \\le r \\le |s|$) such that if you\nreplace the substring of $s$ from the $l$-th character to the\n$r$-th character (inclusive) with its inverse, $s$ will still be a\nregular bracket sequence.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains a non-empty regular bracket sequence;\nit consists only of characters '(' and/or ')'.\n\nAdditional constraint on the input: the total length of the regular bracket\nsequences over all test cases doesn't exceed $2 \\cdot 10^5$.",
        "output": "For each test case, print a single integer \u2014 the number of pairs $(l,r)$\nmeeting the conditions from the statement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n(())\n()\n()()()\n(()())(())\n</pre></td>\n    <td><pre>1\n0\n3\n13\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, there is only one pair:\n\n  * $(2, 3)$: (()) $\\rightarrow$ ()(). \n\nIn the second example, there are no pairs.\n\nIn the third example, there are three pairs:\n\n  * $(2, 3)$: ()()() $\\rightarrow$ (())(); \n  * $(4, 5)$: ()()() $\\rightarrow$ ()(()); \n  * $(2, 5)$: ()()() $\\rightarrow$ (()());"
    },
    {
        "problem_id": "1976E",
        "url": "https://codeforces.com/problemset/problem/1976/E",
        "title": "Splittable Permutations",
        "rating": 2500,
        "tags": [
            "combinatorics",
            "data structures",
            "dfs and similar",
            "greedy",
            "math",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Initially, we had one array, which was a permutation of size $n$ (an array\nof size $n$ where each integer from $1$ to $n$ appears exactly\nonce).\n\nWe performed $q$ operations. During the $i$-th operation, we did the\nfollowing:\n\n  * choose any array we have with at least $2$ elements; \n  * split it into two non-empty arrays (prefix and suffix); \n  * write two integers $l_i$ and $r_i$, where $l_i$ is the maximum element in the left part which we get after the split, and $r_i$ is the maximum element in the right part; \n  * remove the array we've chosen from the pool of arrays we can use, and add the two resulting parts into the pool. \n\nFor example, suppose the initial array was $[6, 3, 4, 1, 2, 5]$, and we\nperformed the following operations:\n\n  1. choose the array $[6, 3, 4, 1, 2, 5]$ and split it into $[6, 3]$ and $[4, 1, 2, 5]$. Then we write $l_1 = 6$ and $r_1 = 5$, and the arrays we have are $[6, 3]$ and $[4, 1, 2, 5]$; \n  2. choose the array $[4, 1, 2, 5]$ and split it into $[4, 1, 2]$ and $[5]$. Then we write $l_2 = 4$ and $r_2 = 5$, and the arrays we have are $[6, 3]$, $[4, 1, 2]$ and $[5]$; \n  3. choose the array $[4, 1, 2]$ and split it into $[4]$ and $[1, 2]$. Then we write $l_3 = 4$ and $r_3 = 2$, and the arrays we have are $[6, 3]$, $[4]$, $[1, 2]$ and $[5]$. \n\nYou are given two integers $n$ and $q$, and two sequences $[l_1,\nl_2, \\dots, l_q]$ and $[r_1, r_2, \\dots, r_q]$. A permutation of size\n$n$ is called valid if we can perform $q$ operations and produce the\ngiven sequences $[l_1, l_2, \\dots, l_q]$ and $[r_1, r_2, \\dots, r_q]$.\n\nCalculate the number of valid permutations.",
        "input": "The first line contains two integers $n$ and $q$ ($1 \\le q < n \\le 3\n\\cdot 10^5$).\n\nThe second line contains $q$ integers $l_1, l_2, \\dots, l_q$ ($1 \\le\nl_i \\le n$).\n\nThe third line contains $q$ integers $r_1, r_2, \\dots, r_q$ ($1 \\le\nr_i \\le n$).\n\nAdditional constraint on the input: there exists at least one permutation\nwhich can produce the given sequences $[l_1, l_2, \\dots, l_q]$ and\n$[r_1, r_2, \\dots, r_q]$.",
        "output": "Print one integer \u2014 the number of valid permutations, taken modulo\n$998244353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6 3\n6 4 4\n5 5 2\n</pre></td>\n    <td><pre>30\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10 1\n10\n9\n</pre></td>\n    <td><pre>1814400\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4 1\n2\n4\n</pre></td>\n    <td><pre>8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1976F",
        "url": "https://codeforces.com/problemset/problem/1976/F",
        "title": "Remove Bridges",
        "rating": 2800,
        "tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "greedy",
            "sortings",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a rooted tree, consisting of $n$ vertices, numbered from\n$1$ to $n$. Vertex $1$ is the root. Additionally, the root only\nhas one child.\n\nYou are asked to add exactly $k$ edges to the tree (possibly, multiple\nedges and/or edges already existing in the tree).\n\nRecall that a bridge is such an edge that, after you remove it, the number of\nconnected components in the graph increases. So, initially, all edges of the\ntree are bridges.\n\nAfter $k$ edges are added, some original edges of the tree are still\nbridges and some are not anymore. You want to satisfy two conditions:\n\n  * for every bridge, all tree edges in the subtree of the lower vertex of that bridge should also be bridges; \n  * the number of bridges is as small as possible. \n\nSolve the task for all values of $k$ from $1$ to $n - 1$ and\noutput the smallest number of bridges.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of testcases.\n\nThe first line of each testcase contains a single integer $n$ ($2 \\le n\n\\le 3 \\cdot 10^5$) \u2014 the number of vertices of the tree.\n\nEach of the next $n - 1$ lines contain two integers $v$ and $u$\n($1 \\le v, u \\le n$) \u2014 the description of the edges of the tree. It's\nguaranteed that the given edges form a valid tree.\n\nAdditional constraint on the input: the root (vertex $1$) has exactly one\nchild.\n\nThe sum of $n$ over all testcases doesn't exceed $3 \\cdot 10^5$.",
        "output": "For each testcase, print $n - 1$ integers. For each $k$ from $1$\nto $n - 1$ print the smallest number of bridges that can be left after you\nadd $k$ edges to the tree.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n1 2\n12\n4 10\n5 12\n12 11\n3 6\n9 6\n1 6\n12 7\n11 6\n2 11\n10 9\n10 8\n8\n1 2\n2 3\n2 4\n3 5\n3 6\n4 7\n4 8\n5\n1 2\n2 3\n3 4\n4 5\n</pre></td>\n    <td><pre>0 \n7 3 1 0 0 0 0 0 0 0 0 \n4 1 0 0 0 0 0 \n0 0 0 0 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1977A",
        "url": "https://codeforces.com/problemset/problem/1977/A",
        "title": "Little Nikita",
        "rating": 800,
        "tags": [
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "The little boy Nikita was given some cubes as a present. He decided to build a\ntower out of them.\n\nInitially, the tower doesn't have any cubes. In one move, Nikita either puts\nexactly $1$ cube on top of the tower or removes exactly $1$ cube from\nthe top of the tower. Is it possible that after $n$ moves, the resulting\ntower has exactly $m$ cubes?",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe only line of each test case contains two integers $n$ and $m$\n($1 \\le n, m \\le 100$).",
        "output": "For each test case, output \"Yes\" (without quotes) if Nikita can obtain a tower\nwith $m$ cubes, and \"No\" (without quotes) otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example,\nthe strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive\nanswer.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3 3\n2 4\n5 3\n</pre></td>\n    <td><pre>Yes\nNo\nYes\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Nikita can put $1$ cube on top of the tower\n$3$ times in a row, so the answer is \"Yes\".\n\nIn the second test case, Nikita can only end up with either a tower with no\nblocks or a tower with $2$ blocks, so the answer is \"No\"."
    },
    {
        "problem_id": "1977B",
        "url": "https://codeforces.com/problemset/problem/1977/B",
        "title": "Binary Colouring",
        "rating": 1100,
        "tags": [
            "bitmasks",
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given a positive integer $x$. Find any array of integers $a_0,\na_1, \\ldots, a_{n-1}$ for which the following holds:\n\n  * $1 \\le n \\le 32$, \n  * $a_i$ is $1$, $0$, or $-1$ for all $0 \\le i \\le n - 1$, \n  * $x = \\displaystyle{\\sum_{i=0}^{n - 1}{a_i \\cdot 2^i}}$, \n  * There does not exist an index $0 \\le i \\le n - 2$ such that both $a_{i} \\neq 0$ and $a_{i + 1} \\neq 0$. \n\nIt can be proven that under the constraints of the problem, a valid array\nalways exists.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe only line of each test case contains a single positive integer $x$\n($1 \\le x < 2^{30}$).",
        "output": "For each test case, output two lines.\n\nOn the first line, output an integer $n$ ($1 \\le n \\le 32$) \u2014 the\nlength of the array $a_0, a_1, \\ldots, a_{n-1}$.\n\nOn the second line, output the array $a_0, a_1, \\ldots, a_{n-1}$.\n\nIf there are multiple valid arrays, you can output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1\n14\n24\n15\n27\n11\n19\n</pre></td>\n    <td><pre>1\n1\n5\n0 -1 0 0 1\n6\n0 0 0 -1 0 1\n5\n-1 0 0 0 1\n6\n-1 0 -1 0 0 1\n5\n-1 0 -1 0 1\n5\n-1 0 1 0 1</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one valid array is $[1]$, since $(1) \\cdot 2^0 =\n1$.\n\nIn the second test case, one possible valid array is $[0,-1,0,0,1]$, since\n$(0) \\cdot 2^0 + (-1) \\cdot 2^1 + (0) \\cdot 2^2 + (0) \\cdot 2^3 + (1) \\cdot\n2^4 = -2 + 16 = 14$."
    },
    {
        "problem_id": "1977C",
        "url": "https://codeforces.com/problemset/problem/1977/C",
        "title": "Nikita and LCM",
        "rating": 1900,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "math",
            "number theory",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Nikita is a student passionate about number theory and algorithms. He faces an\ninteresting problem related to an array of numbers.\n\nSuppose Nikita has an array of integers $a$ of length $n$. He will\ncall a subsequence$^\\dagger$ of the array special if its [least common\nmultiple (LCM)](https://en.wikipedia.org/wiki/Least_common_multiple) is not\ncontained in $a$. The LCM of an empty subsequence is equal to $0$.\n\nNikita wonders: what is the length of the longest special subsequence of\n$a$? Help him answer this question!\n\n$^\\dagger$ A sequence $b$ is a subsequence of $a$ if $b$ can\nbe obtained from $a$ by the deletion of several (possibly, zero or all)\nelements, without changing the order of the remaining elements. For example,\n$[5,2,3]$ is a subsequence of $[1,5,7,8,2,4,3]$.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 2000$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2000$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2000$.",
        "output": "For each test case, output a single integer \u2014 the length of the longest\nspecial subsequence of $a$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5\n1 2 4 8 16\n6\n3 2 10 20 60 1\n7\n2 3 4 6 12 100003 1200036\n9\n2 42 7 3 6 7 7 1 6\n8\n4 99 57 179 10203 2 11 40812\n1\n1\n</pre></td>\n    <td><pre>0\n4\n4\n5\n8\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the LCM of any non-empty subsequence is contained in\n$a$, so the answer is $0$.\n\nIn the second test case, we can take the subsequence $[3, 2, 10, 1]$, its\nLCM is equal to $30$, which is not contained in $a$.\n\nIn the third test case, we can take the subsequence $[2, 3, 6, 100\\,003]$,\nits LCM is equal to $600\\,018$, which is not contained in $a$."
    },
    {
        "problem_id": "1977D",
        "url": "https://codeforces.com/problemset/problem/1977/D",
        "title": "XORificator",
        "rating": 2300,
        "tags": [
            "bitmasks",
            "brute force",
            "greedy",
            "hashing"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a binary (consisting only of 0s and 1s) $n \\times m$ matrix.\nYou are also given a XORificator, using which you can invert all the values in\na chosen row (i.e. replace 0 with 1 and 1 with 0).\n\nA column in the matrix is considered special if it contains exactly one 1.\nYour task is to find the maximum number of columns that can be made special at\nthe same time, and the set of rows the XORificator should be used on to\nachieve that.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\leq n, m \\leq 3 \\cdot 10^5$, $n \\cdot m \\leq 3 \\cdot 10^5$).\n\nEach of the following $n$ lines of the test case contains a binary string\nof length $m$.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not\nexceed $3 \\cdot 10^5$.",
        "output": "For each test case, output two lines.\n\nIn the first line, output the maximum number of special columns that is\npossible to get simultaneously.\n\nIn the second line, output a binary string of length $n$, where the\n$i$-th character is 0, if you don't use the XORificator on the $i$-th\nrow, and 1, if you use the XORificator on the $i$-th row.\n\nIf there are multiple valid XORificator configurations that achieve the\noptimal answer, you can output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 4\n1010\n0110\n0100\n1 1\n1\n1 1\n0\n2 5\n00101\n10110\n3 3\n101\n111\n000\n</pre></td>\n    <td><pre>3\n010\n1\n0\n1\n1\n3\n00\n2\n010\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can use the XORificator on the second row to make\nthe columns $2$, $3$, and $4$ special.\n\nIn the second test case, the only column is already special, so you don't need\nto use the XORificator."
    },
    {
        "problem_id": "1977E",
        "url": "https://codeforces.com/problemset/problem/1977/E",
        "title": "Tensor",
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "graphs",
            "interactive"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem.\n\nYou are given an integer $n$.\n\nThe jury has hidden from you a directed graph with $n$ vertices (numbered\nfrom $1$ to $n$) and some number of edges. You additionally know that:\n\n  * The graph only contains edges of the form $i \\leftarrow j$, where $1 \\le i < j \\le n$. \n  * For any three vertices $1 \\le i < j < k \\le n$, at least one of the following holds$^\\dagger$: \n    * Vertex $i$ is reachable from vertex $j$, or \n    * Vertex $i$ is reachable from vertex $k$, or \n    * Vertex $j$ is reachable from vertex $k$. \n\nYou want to color each vertex in either black or white such that for any two\nvertices $i$ and $j$ ($1 \\le i < j \\le n$) of the same color,\nvertex $i$ is reachable from vertex $j$.\n\nTo do that, you can ask queries of the following type:\n\n  * ? i j \u2014 is vertex $i$ reachable from vertex $j$ ($1 \\le i < j \\le n$)? \n\nFind any valid vertex coloring of the hidden graph in at most $2 \\cdot n$\nqueries. It can be proven that such a coloring always exists.\n\nNote that the grader is not adaptive: the graph is fixed before any queries\nare made.\n\n$^\\dagger$ Vertex $a$ is reachable from vertex $b$ if there exists\na [path](https://en.wikipedia.org/wiki/Path_\\(graph_theory\\)) from vertex\n$b$ to vertex $a$ in the graph.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($3 \\le n\n\\le 100$) \u2014 the number of vertices in the hidden graph.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$1000$.",
        "output": "",
        "interaction": "The interaction for each test case begins by reading the integer $n$.\n\nTo make a query, output \"? i j\" without quotes ($1 \\le i < j \\le n$). If\nvertex $i$ is reachable from vertex $j$, you will get YES as an\nanswer. Otherwise, you will get NO as an answer.\n\nIf you receive the integer $-1$ instead of an answer or a valid value of\n$n$, it means your program has made an invalid query, has exceeded the\nlimit of queries, or has given an incorrect answer on the previous test case.\nYour program must terminate immediately to receive a Wrong Answer verdict.\nOtherwise, you can get an arbitrary verdict because your solution will\ncontinue to read from a closed stream.\n\nWhen you are ready to give the final answer, output \"! $c_1 \\ c_2 \\ \\ldots \\\nc_n$\" without quotes \u2014 the colors of the vertices, where $c_i = 0$ if\nthe vertex is black, and $c_i = 1$ if the vertex is white. After solving\nall test cases, your program should be terminated immediately.\n\nAfter printing a query, do not forget to output an end of line and flush the\noutput. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\nHacks\n\nTo hack, use the following format:\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($3 \\le n \\le 100$, $0 \\le m \\le \\frac{n\\cdot(n - 1)}{2}$) \u2014 the\nnumber of vertices and edges in the graph.\n\nEach of the following $m$ lines should contain two integers $a$ and\n$b$ ($1 \\le b < a \\le n$), indicating that there is the edge $a\n\\rightarrow b$ in the graph. The graph should satisfy the conditions above.\n\nThe sum of $n$ over all test cases should not exceed $1000$.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n4\n\nYES\n\nYES\n\nYES\n\nNO\n\nNO\n\nNO\n\n5\n\n</pre></td>\n    <td><pre>? 1 2\n\n? 2 3\n\n? 1 3\n\n? 1 4\n\n? 2 4\n\n? 3 4\n\n! 0 0 0 1\n\n! 1 1 0 1 0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The hidden graph in the first test case:\n\n![](CDN_BASE_URL/217a5d6f99ef7e653e36ff00281a7a7c)\n\nThe hidden graph in the second test case:\n\n![](CDN_BASE_URL/3e6bcca34651e915a287eb8833275265)\n\nThe interaction happens as follows:\n\nSolution| Jury| Explanation  \n---|---|---  \n| 2| There are $2$ test cases.  \n| 4| In the first test case, the graph has $4$ vertices.  \n? 1 2 | YES| The solution asks if vertex $1$ is reachable from vertex $2$, and the jury answers YES.  \n? 2 3 | YES| The solution asks if vertex $2$ is reachable from vertex $3$, and the jury answers YES.  \n? 1 3 | YES| The solution asks if vertex $1$ is reachable from vertex $3$, and the jury answers YES.  \n? 1 4 | NO| The solution asks if vertex $1$ is reachable from vertex $4$, and the jury answers NO.  \n? 2 4 | NO| The solution asks if vertex $2$ is reachable from vertex $4$, and the jury answers NO.  \n? 3 4 | NO| The solution asks if vertex $3$ is reachable from vertex $4$, and the jury answers NO.  \n! 0 0 0 1| | The solution has somehow determined a valid coloring and outputs it. Since the output is correct, the jury continues to the next test case.  \n| 5| In the second test case, the graph has $5$ vertices.  \n! 1 1 0 1 0| | The solution has somehow determined a valid coloring, and outputs it. Since the output is correct and there are no more test cases, the jury and the solution exit.  \n  \nNote that the line breaks in the example input and output are for the sake of\nclarity, and do not occur in the real interaction."
    },
    {
        "problem_id": "1978A",
        "url": "https://codeforces.com/problemset/problem/1978/A",
        "title": "Alice and Books",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice has $n$ books. The $1$-st book contains $a_1$ pages, the\n$2$-nd book contains $a_2$ pages, $\\ldots$, the $n$-th book\ncontains $a_n$ pages. Alice does the following:\n\n  * She divides all the books into two non-empty piles. Thus, each book ends up in exactly one of the two piles.\n  * Alice reads one book with the highest number in each pile.\n\nAlice loves reading very much. Help her find the maximum total number of pages\nshe can read by dividing the books into two piles.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 500$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 100$) \u2014 the number of books Alice has.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the number of pages in each book.",
        "output": "For each test case, output a single integer \u2014 the maximum number of pages\nAlice can read.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n1 1\n4\n2 3 3 1\n5\n2 2 3 2 2\n2\n10 3\n3\n1 2 3\n</pre></td>\n    <td><pre>2\n4\n5\n13\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Alice can put book number $1$ in the first pile,\nand book number $2$ in the second pile. Then she will read $a_1 + a_2 =\n1 + 1 = 2$ pages.\n\nIn the second test case, Alice can put books with numbers $2$ and $3$\nin the first pile, and books with numbers $1$ and $4$ in the second\npile. Then she will read the book with the highest number $3$ from the\nfirst pile, and the book with the highest number $4$ from the second pile.\nThen she will read $a_3 + a_4 = 3 + 1 = 4$ pages."
    },
    {
        "problem_id": "1978B",
        "url": "https://codeforces.com/problemset/problem/1978/B",
        "title": "New Bakery",
        "rating": 800,
        "tags": [
            "binary search",
            "greedy",
            "math",
            "ternary search"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Bob decided to open a bakery. On the opening day, he baked $n$ buns that\nhe can sell. The usual price of a bun is $a$ coins, but to attract\ncustomers, Bob organized the following promotion:\n\n  * Bob chooses some integer $k$ ($0 \\le k \\le \\min(n, b)$).\n  * Bob sells the first $k$ buns at a modified price. In this case, the price of the $i$-th ($1 \\le i \\le k$) sold bun is $(b - i + 1)$ coins.\n  * The remaining $(n - k)$ buns are sold at $a$ coins each.\n\nNote that $k$ can be equal to $0$. In this case, Bob will sell all the\nbuns at $a$ coins each.\n\nHelp Bob determine the maximum profit he can obtain by selling all $n$\nbuns.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe only line of each test case contains three integers $n$, $a$, and\n$b$ ($1 \\le n, a, b \\le 10^9$) \u2014 the number of buns, the usual price\nof a bun, and the price of the first bun to be sold at a modified price.",
        "output": "For each test case, output a single integer \u2014 the maximum profit that Bob can\nobtain.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n4 4 5\n5 5 9\n10 10 5\n5 5 11\n1000000000 1000000000 1000000000\n1000000000 1000000000 1\n1000 1 1000\n</pre></td>\n    <td><pre>17\n35\n100\n45\n1000000000000000000\n1000000000000000000\n500500\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it is optimal for Bob to choose $k = 1$. Then he\nwill sell one bun for $5$ coins, and three buns at the usual price for\n$4$ coins each. Then the profit will be $5 + 4 + 4 + 4 = 17$ coins.\n\nIn the second test case, it is optimal for Bob to choose $k = 5$. Then he\nwill sell all the buns at the modified price and obtain a profit of $9 + 8 +\n7 + 6 + 5 = 35$ coins.\n\nIn the third test case, it is optimal for Bob to choose $k = 0$. Then he\nwill sell all the buns at the usual price and obtain a profit of $10 \\cdot\n10 = 100$ coins."
    },
    {
        "problem_id": "1978C",
        "url": "https://codeforces.com/problemset/problem/1978/C",
        "title": "Manhattan Permutations",
        "rating": 1300,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Let's call the Manhattan value of a permutation$^{\\dagger}$ $p$ the\nvalue of the expression $|p_1 - 1| + |p_2 - 2| + \\ldots + |p_n - n|$.\n\nFor example, for the permutation $[1, 2, 3]$, the Manhattan value is $|1\n- 1| + |2 - 2| + |3 - 3| = 0$, and for the permutation $[3, 1, 2]$, the\nManhattan value is $|3 - 1| + |1 - 2| + |2 - 3| = 2 + 1 + 1 = 4$.\n\nYou are given integers $n$ and $k$. Find a permutation $p$ of\nlength $n$ such that its Manhattan value is equal to $k$, or determine\nthat no such permutation exists.\n\n$^{\\dagger}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^{4}$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe only line of each test case contains two integers $n$ and $k$\n($1 \\le n \\le 2 \\cdot 10^{5}, 0 \\le k \\le 10^{12}$) \u2014 the length of the\npermutation and the required Manhattan value.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^{5}$.",
        "output": "For each test case, if there is no suitable permutation, output \"No\".\nOtherwise, in the first line, output \"Yes\", and in the second line, output\n$n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\n\u2014 a suitable permutation.\n\nIf there are multiple solutions, output any of them.\n\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n3 4\n4 5\n7 0\n1 1000000000000\n8 14\n112 777\n5 12\n5 2\n</pre></td>\n    <td><pre>Yes\n3 1 2\nNo\nYes\n1 2 3 4 5 6 7\nNo\nYes\n8 2 3 4 5 6 1 7\nNo\nYes\n5 4 3 1 2\nYes\n2 1 3 4 5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the permutation $[3, 1, 2]$ is suitable, its\nManhattan value is $|3 - 1| + |1 - 2| + |2 - 3| = 2 + 1 + 1 = 4$.\n\nIn the second test case, it can be proven that there is no permutation of\nlength $4$ with a Manhattan value of $5$.\n\nIn the third test case, the permutation $[1,2,3,4,5,6,7]$ is suitable, its\nManhattan value is $|1-1|+|2-2|+|3-3|+|4-4|+|5-5|+|6-6|+|7-7|=0$."
    },
    {
        "problem_id": "1978D",
        "url": "https://codeforces.com/problemset/problem/1978/D",
        "title": "Elections",
        "rating": 1600,
        "tags": [
            "data structures",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Elections are taking place in Berland. There are $n$ candidates\nparticipating in the elections, numbered from $1$ to $n$. The\n$i$-th candidate has $a_i$ fans who will vote for him. Additionally,\nthere are $c$ people who are undecided about their favorite candidate,\nlet's call them undecided. Undecided people will vote for the candidate with\nthe lowest number.\n\nThe candidate who receives the maximum number of votes wins the elections, and\nif multiple candidates receive the same maximum number of votes, the candidate\nwith the lowest number among them wins.\n\nYou found these elections too boring and predictable, so you decided to\nexclude some candidates from them. If you do not allow candidate number\n$i$ to participate in the elections, all $a_i$ of his fans will become\nundecided, and will vote for the candidate with the lowest number.\n\nYou are curious to find, for each $i$ from $1$ to $n$, the minimum\nnumber of candidates that need to be excluded from the elections for candidate\nnumber $i$ to win the elections.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 2 \\cdot 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $c$\n($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le c \\le 10^9$) \u2014 the number of\ncandidates in the elections and the number of undecided people.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the number of fans for each\ncandidate.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $n$ integers, the $i$-th of which should be\nequal to the minimum number of candidates that need to be excluded from the\nelections for candidate number $i$ to win.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 1\n2 0 3\n2 3\n0 10\n5 3\n5 4 3 2 1\n4 5\n3 10 7 1\n6 0\n2 2 2 3 3 3\n</pre></td>\n    <td><pre>0 1 2\n1 0\n0 1 2 3 4\n1 0 2 3\n1 1 2 0 4 5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case:\n\n  * If all candidates are allowed, candidate number $1$ will receive $3$ votes ($1$ undecided person will vote for him), candidate number $2$ will receive $0$ votes, and candidate number $3$ will receive $3$ votes. Therefore, candidate number $1$ wins (he received the same number of votes as candidate $3$, but his number is lower), so the answer for him is $0$.\n  * If candidate number $1$ is not allowed, his $2$ fans will become undecided. Then candidate number $2$ will receive $3$ votes ($3$ undecided people will vote for him) and candidate number $3$ will receive $3$ votes. Therefore, candidate number $2$ wins (he received the same number of votes as candidate $3$, but his number is lower), so the answer for him is $1$.\n  * If candidates with numbers $1$ and $2$ are not allowed, candidate number $3$ wins, so the answer for him is $2$.\n\nIn the second test case, candidate number $1$ will win if candidate number\n$2$ is not allowed to participate."
    },
    {
        "problem_id": "1978E",
        "url": "https://codeforces.com/problemset/problem/1978/E",
        "title": "Computing Machine",
        "rating": 2000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Sasha has two binary strings $s$ and $t$ of the same length $n$,\nconsisting of the characters 0 and 1.\n\nThere is also a computing machine that can perform two types of operations on\nbinary strings $a$ and $b$ of the same length $k$:\n\n  1. If $a_{i} = a_{i + 2} =$ 0, then you can assign $b_{i + 1} :=$ 1 ($1 \\le i \\le k - 2$). \n  2. If $b_{i} = b_{i + 2} =$ 1, then you can assign $a_{i + 1} :=$ 1 ($1 \\le i \\le k - 2$). \n\nSasha became interested in the following: if we consider the string\n$a=s_ls_{l+1}\\ldots s_r$ and the string $b=t_lt_{l+1}\\ldots t_r$, what\nis the maximum number of 1 characters in the string $a$ that can be\nobtained using the computing machine. Since Sasha is very curious but lazy, it\nis up to you to answer this question for several pairs $(l_i, r_i)$ that\ninterest him.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^{4}$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the strings $s$ and $t$.\n\nThe second line of each test case contains a binary string $s$ of length\n$n$, consisting of the characters 0 and 1.\n\nThe third line of each test case contains a binary string $t$ of length\n$n$, consisting of the characters 0 and 1.\n\nThe fourth line of each test case contains a single integer $q$ ($1 \\le\nq \\le 2 \\cdot 10^5$) \u2014 the number of queries.\n\nThe $i$-th of the following lines contains two integers $l_{i}$ and\n$r_{i}$ ($1 \\le l_{i} \\le r_{i} \\le n$) \u2014 the boundaries of the\n$i$-th pair of substrings that interest Sasha.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$ and the sum of $q$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $q$ integers \u2014 the answers to all queries.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4\n1111\n0000\n2\n1 2\n2 4\n4\n1010\n1101\n2\n1 3\n1 4\n6\n010101\n011010\n5\n2 3\n1 6\n2 5\n4 4\n3 6\n</pre></td>\n    <td><pre>2\n3\n2\n3\n1\n4\n3\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case:\n\n  * In the first query, $a =$ 11, so the maximum number of 1 characters is $2$. \n  * In the second query, $a =$ 111, so the maximum number of 1 characters is $3$. \n\nIn the second test case:\n\n  * In the first query, $a =$ 101 and $b =$ 110. No operations can be performed, so the maximum number of 1 characters is $2$. \n  * In the second query, $a =$ 1010 and $b =$ 1101. Since $a_2 = a_4 =$ 0, we can assign $b_3 :=$ 1. Now $b_1 = b_3 =$ 1, so we can assign $a_2 :=$ 1. The string $a$ becomes 1110, so the maximum number of 1 characters is $3$."
    },
    {
        "problem_id": "1978F",
        "url": "https://codeforces.com/problemset/problem/1978/F",
        "title": "Large Graph",
        "rating": 2400,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "number theory",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "Given an array $a$ of length $n$. Let's construct a square matrix\n$b$ of size $n \\times n$, in which the $i$-th row contains the\narray $a$ cyclically shifted to the right by $(i - 1)$. For example,\nfor the array $a = [3, 4, 5]$, the obtained matrix is\n\n$$b = \\begin{bmatrix} 3 & 4 & 5 \\\\\\ 5 & 3 & 4 \\\\\\ 4 & 5 & 3\n\\end{bmatrix}$$\n\nLet's construct the following graph:\n\n  * The graph contains $n^2$ vertices, each of which corresponds to one of the elements of the matrix. Let's denote the vertex corresponding to the element $b_{i, j}$ as $(i, j)$.\n  * We will draw an edge between vertices $(i_1, j_1)$ and $(i_2, j_2)$ if $|i_1 - i_2| + |j_1 - j_2| \\le k$ and $\\gcd(b_{i_1, j_1}, b_{i_2, j_2}) > 1$, where $\\gcd(x, y)$ denotes the [greatest common divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers $x$ and $y$. \n\nYour task is to calculate the number of connected components$^{\\dagger}$\nin the obtained graph.\n\n$^{\\dagger}$A connected component of a graph is a set of vertices in which\nany vertex is reachable from any other via edges, and adding any other vertex\nto the set violates this rule.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^5$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$\n($2 \\le n \\le 10^6$, $2 \\le k \\le 2 \\cdot 10^6$) \u2014 the length of the\narray and the parameter $k$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, output a single integer \u2014 the number of connected\ncomponents in the obtained graph.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n3 3\n3 4 5\n3 3\n3 4 9\n3 2\n3 4 9\n2 2\n2 8\n5 3\n8 27 5 4 3\n4 10\n2 2 2 2\n</pre></td>\n    <td><pre>3\n2\n3\n1\n4\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the matrix $b$ is given in the statement. The\nfirst connected component contains the vertices $(1, 1)$, $(2, 2)$,\nand $(3, 3)$. The second connected component contains the vertices $(1,\n2)$, $(2, 3)$, and $(3, 1)$. The third connected component contains\nthe vertices $(1, 3)$, $(2, 1)$, and $(3, 2)$. Thus, the graph has\n$3$ connected components.\n\nIn the second test case, the following matrix is obtained:\n\n$$b = \\begin{bmatrix} 3 & 4 & 9 \\\\\\ 9 & 3 & 4 \\\\\\ 4 & 9 & 3\n\\end{bmatrix}$$\n\nThe first connected component contains all vertices corresponding to elements\nwith values $3$ and $9$. The second connected component contains all\nvertices corresponding to elements with the value $4$.\n\nIn the fourth test case, all vertices are in one connected component."
    },
    {
        "problem_id": "1979A",
        "url": "https://codeforces.com/problemset/problem/1979/A",
        "title": "Guess the Maximum",
        "rating": 800,
        "tags": [
            "brute force",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice and Bob came up with a rather strange game. They have an array of\nintegers $a_1, a_2,\\ldots, a_n$. Alice chooses a certain integer $k$\nand tells it to Bob, then the following happens:\n\n  * Bob chooses two integers $i$ and $j$ ($1 \\le i < j \\le n$), and then finds the maximum among the integers $a_i, a_{i + 1},\\ldots, a_j$; \n  * If the obtained maximum is strictly greater than $k$, Alice wins, otherwise Bob wins. \n\nHelp Alice find the maximum $k$ at which she is guaranteed to win.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 5 \\cdot 10^4$) \u2014 the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $a_1,\na_2,\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^4$.",
        "output": "For each test case, output one integer \u2014 the maximum integer $k$ at which\nAlice is guaranteed to win.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n4\n2 4 1 7\n5\n1 2 3 4 5\n2\n1 1\n3\n37 8 16\n5\n10 10 10 10 9\n10\n3 12 9 5 2 3 2 9 8 2\n</pre></td>\n    <td><pre>3\n1\n0\n15\n9\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, all possible subsegments that Bob can choose look as\nfollows: $[2, 4], [2, 4, 1], [2, 4, 1, 7], [4, 1], [4, 1, 7], [1, 7]$. The\nmaximums on the subsegments are respectively equal to $4, 4, 7, 4, 7, 7$.\nIt can be shown that $3$ is the largest integer such that any of the\nmaximums will be strictly greater than it.\n\nIn the third test case, the only segment that Bob can choose is $[1, 1]$.\nSo the answer is $0$."
    },
    {
        "problem_id": "1979B",
        "url": "https://codeforces.com/problemset/problem/1979/B",
        "title": "XOR Sequences",
        "rating": 1000,
        "tags": [
            "bitmasks",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given two distinct non-negative integers $x$ and $y$. Consider\ntwo infinite sequences $a_1, a_2, a_3, \\ldots$ and $b_1, b_2, b_3,\n\\ldots$, where\n\n  * $a_n = n \\oplus x$; \n  * $b_n = n \\oplus y$. \n\nHere, $x \\oplus y$ denotes the [bitwise\nXOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) operation of\nintegers $x$ and $y$.\n\nFor example, with $x = 6$, the first $8$ elements of sequence $a$\nwill look as follows: $[7, 4, 5, 2, 3, 0, 1, 14, \\ldots]$. Note that the\nindices of elements start with $1$.\n\nYour task is to find the length of the longest common subsegment$^\\dagger$\nof sequences $a$ and $b$. In other words, find the maximum integer\n$m$ such that $a_i = b_j, a_{i + 1} = b_{j + 1}, \\ldots, a_{i + m - 1} =\nb_{j + m - 1}$ for some $i, j \\ge 1$.\n\n$^\\dagger$A subsegment of sequence $p$ is a sequence\n$p_l,p_{l+1},\\ldots,p_r$, where $1 \\le l \\le r$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe only line of each test case contains two integers $x$ and $y$\n($0 \\le x, y \\le 10^9, x \\neq y$) \u2014 the parameters of the sequences.",
        "output": "For each test case, output a single integer \u2014 the length of the longest common\nsubsegment.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n0 1\n12 4\n57 37\n316560849 14570961\n</pre></td>\n    <td><pre>1\n8\n4\n33554432\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the first $7$ elements of sequences $a$ and\n$b$ are as follows:\n\n$a = [1, 2, 3, 4, 5, 6, 7,\\ldots]$\n\n$b = [0, 3, 2, 5, 4, 7, 6,\\ldots]$\n\nIt can be shown that there isn't a positive integer $k$ such that the\nsequence $[k, k + 1]$ occurs in $b$ as a subsegment. So the answer is\n$1$.\n\nIn the third test case, the first $20$ elements of sequences $a$ and\n$b$ are as follows:\n\n$a = [56, 59, 58, 61, 60, 63, 62, 49, 48, 51, 50, 53, 52, 55, 54,\n\\textbf{41, 40, 43, 42}, 45, \\ldots]$\n\n$b = [36, 39, 38, 33, 32, 35, 34, 45, 44, 47, 46, \\textbf{41, 40, 43, 42},\n53, 52, 55, 54, 49, \\ldots]$\n\nIt can be shown that one of the longest common subsegments is the subsegment\n$[41, 40, 43, 42]$ with a length of $4$."
    },
    {
        "problem_id": "1979C",
        "url": "https://codeforces.com/problemset/problem/1979/C",
        "title": "Earning on Bets",
        "rating": 1200,
        "tags": [
            "binary search",
            "combinatorics",
            "constructive algorithms",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You have been offered to play a game. In this game, there are $n$ possible\noutcomes, and for each of them, you must bet a certain integer amount of\ncoins. In the event that the $i$-th outcome turns out to be winning, you\nwill receive back the amount of coins equal to your bet on that outcome,\nmultiplied by $k_i$. Note that exactly one of the $n$ outcomes will be\nwinning.\n\nYour task is to determine how to distribute the coins in such a way that you\nwill come out ahead in the event of any winning outcome. More formally, the\ntotal amount of coins you bet on all outcomes must be strictly less than the\nnumber of coins received back for each possible winning outcome.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 50$) \u2014 the number of outcomes.\n\nThe second line of each test case contains $n$ integers\n$k_1,k_2,\\ldots,k_n$ ($2 \\le k_i \\le 20$) \u2014 the multiplier for the\namount of coins if the $i$-th outcome turns out to be winning.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $-1$ if there is no way to distribute the coins\nas required. Otherwise, output $n$ integers $x_1, x_2,\\ldots, x_n$\n($1 \\le x_i \\le 10^{9}$) \u2014 your bets on the outcomes.\n\nIt can be shown that if a solution exists, there is always a solution that\nsatisfies these constraints.\n\nIf there are multiple suitable solutions, output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n3\n3 2 7\n2\n3 3\n5\n5 5 5 5 5\n6\n7 9 3 17 9 13\n3\n6 3 2\n5\n9 4 6 8 3\n</pre></td>\n    <td><pre>27 41 12 \n1 1 \n-1\n1989 1547 4641 819 1547 1071 \n-1\n8 18 12 9 24\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the coins can be distributed as follows: $27$\ncoins on the first outcome, $41$ coins on the second outcome, $12$\ncoins on the third outcome. Then the total amount of coins bet on all outcomes\nis $27 + 41 + 12 = 80$ coins. If the first outcome turns out to be\nwinning, you will receive back $3 \\cdot 27 = 81$ coins, if the second\noutcome turns out to be winning, you will receive back $2 \\cdot 41 = 82$\ncoins, if the third outcome turns out to be winning, you will receive back\n$7 \\cdot 12 = 84$ coins. All these values are strictly greater than\n$80$.\n\nIn the second test case, one way is to bet one coin on each of the outcomes."
    },
    {
        "problem_id": "1979D",
        "url": "https://codeforces.com/problemset/problem/1979/D",
        "title": "Fixing a Binary String",
        "rating": 1800,
        "tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "dp",
            "greedy",
            "hashing",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a binary string $s$ of length $n$, consisting of zeros\nand ones. You can perform the following operation exactly once:\n\n  1. Choose an integer $p$ ($1 \\le p \\le n$). \n  2. Reverse the substring $s_1 s_2 \\ldots s_p$. After this step, the string $s_1 s_2 \\ldots s_n$ will become $s_p s_{p-1} \\ldots s_1 s_{p+1} s_{p+2} \\ldots s_n$. \n  3. Then, perform a cyclic shift of the string $s$ to the left $p$ times. After this step, the initial string $s_1s_2 \\ldots s_n$ will become $s_{p+1}s_{p+2} \\ldots s_n s_p s_{p-1} \\ldots s_1$. \n\nFor example, if you apply the operation to the string 110001100110 with\n$p=3$, after the second step, the string will become 011001100110, and\nafter the third step, it will become 001100110011.\n\nA string $s$ is called $k$-proper if two conditions are met:\n\n  * $s_1=s_2=\\ldots=s_k$; \n  * $s_{i+k} \\neq s_i$ for any $i$ ($1 \\le i \\le n - k$). \n\nFor example, with $k=3$, the strings 000, 111000111, and 111000 are\n$k$-proper, while the strings 000000, 001100, and 1110000 are not.\n\nYou are given an integer $k$, which is a divisor of $n$. Find an\ninteger $p$ ($1 \\le p \\le n$) such that after performing the\noperation, the string $s$ becomes $k$-proper, or determine that it is\nimpossible. Note that if the string is initially $k$-proper, you still\nneed to apply exactly one operation to it.",
        "input": "Each test consists of multiple test cases. The first line contains one integer\n$t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The description\nof the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\le k \\le n$, $2 \\le n \\le 10^5$) \u2014 the length of the string\n$s$ and the value of $k$. It is guaranteed that $k$ is a divisor\nof $n$.\n\nThe second line of each test case contains a binary string $s$ of length\n$n$, consisting of the characters 0 and 1.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the value of $p$ to make the\nstring $k$-proper, or $-1$ if it is impossible.\n\nIf there are multiple solutions, output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n8 4\n11100001\n4 2\n1110\n12 3\n111000100011\n5 5\n00000\n6 1\n101001\n8 4\n01110001\n12 2\n110001100110\n</pre></td>\n    <td><pre>3\n-1\n7\n5\n4\n-1\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, if you apply the operation with $p=3$, after the\nsecond step of the operation, the string becomes 11100001, and after the third\nstep, it becomes 00001111. This string is $4$-proper.\n\nIn the second test case, it can be shown that there is no operation after\nwhich the string becomes $2$-proper.\n\nIn the third test case, if you apply the operation with $p=7$, after the\nsecond step of the operation, the string becomes 100011100011, and after the\nthird step, it becomes 000111000111. This string is $3$-proper.\n\nIn the fourth test case, after the operation with any $p$, the string\nbecomes $5$-proper."
    },
    {
        "problem_id": "1979E",
        "url": "https://codeforces.com/problemset/problem/1979/E",
        "title": "Manhattan Triangle",
        "rating": 2400,
        "tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "geometry",
            "implementation",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "The Manhattan distance between two points $(x_1, y_1)$ and $(x_2,\ny_2)$ is defined as: $$|x_1 - x_2| + |y_1 - y_2|.$$\n\nWe call a Manhattan triangle three points on the plane, the Manhattan\ndistances between each pair of which are equal.\n\nYou are given a set of pairwise distinct points and an even integer $d$.\nYour task is to find any Manhattan triangle, composed of three distinct points\nfrom the given set, where the Manhattan distance between any pair of vertices\nis equal to $d$.",
        "input": "Each test consists of multiple test cases. The first line contains one integer\n$t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The description\nof the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $d$\n($3 \\le n \\le 2 \\cdot 10^5$, $2 \\le d \\le 4 \\cdot 10^5$, $d$ is\neven) \u2014 the number of points and the required Manhattan distance between the\nvertices of the triangle.\n\nThe $(i + 1)$-th line of each test case contains two integers $x_i$\nand $y_i$ ($-10^5 \\le x_i, y_i \\le 10^5$) \u2014 the coordinates of the\n$i$-th point. It is guaranteed that all points are pairwise distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output three distinct integers $i$, $j$, and\n$k$ ($1 \\le i,j,k \\le n$) \u2014 the indices of the points forming the\nManhattan triangle. If there is no solution, output \"$0\\ 0\\ 0$\" (without\nquotes).\n\nIf there are multiple solutions, output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n6 4\n3 1\n0 0\n0 -2\n5 -3\n3 -5\n2 -2\n5 4\n0 0\n0 -2\n5 -3\n3 -5\n2 -2\n6 6\n3 1\n0 0\n0 -2\n5 -3\n3 -5\n2 -2\n4 4\n3 0\n0 3\n-3 0\n0 -3\n10 8\n2 1\n-5 -1\n-4 -1\n-5 -3\n0 1\n-2 5\n-4 4\n-4 2\n0 0\n-4 1\n4 400000\n100000 100000\n-100000 100000\n100000 -100000\n-100000 -100000\n</pre></td>\n    <td><pre>2 6 1\n4 3 5\n3 5 1\n0 0 0\n6 1 3\n0 0 0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case:\n\n![](CDN_BASE_URL/d4e05137288270ab95be887865fe7aa8) Points $A$, $B$,\nand $F$ form a Manhattan triangle, the Manhattan distance between each\npair of vertices is $4$. Points $D$, $E$, and $F$ can also be\nthe answer.\n\nIn the third test case:\n\n![](CDN_BASE_URL/ccf6b49ba1a3bb8d87cffad3da846f32) Points $A$, $C$,\nand $E$ form a Manhattan triangle, the Manhattan distance between each\npair of vertices is $6$.\n\nIn the fourth test case, there are no two points with a Manhattan distance of\n$4$, and therefore there is no suitable Manhattan triangle."
    },
    {
        "problem_id": "1979F",
        "url": "https://codeforces.com/problemset/problem/1979/F",
        "title": "Kostyanych's Theorem",
        "rating": 2900,
        "tags": [
            "brute force",
            "constructive algorithms",
            "graphs",
            "interactive"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem.\n\nKostyanych has chosen a complete undirected graph$^{\\dagger}$ with $n$\nvertices, and then removed exactly $(n - 2)$ edges from it. You can ask\nqueries of the following type:\n\n  * \"? $d$\" \u2014 Kostyanych tells you the number of vertex $v$ with a degree at least $d$. Among all possible such vertices, he selects the vertex with the minimum degree, and if there are several such vertices, he selects the one with the minimum number. He also tells you the number of another vertex in the graph, with which $v$ is not connected by an edge (if none is found, then $0$ is reported). Among all possible such vertices, he selects the one with the minimum number. Then he removes the vertex $v$ and all edges coming out of it. If the required vertex $v$ is not found, then \"$0\\ 0$\" is reported. \n\nFind a Hamiltonian path$^{\\ddagger}$ in the original graph in at most\n$n$ queries. It can be proven that under these constraints, a Hamiltonian\npath always exists.\n\n$^{\\dagger}$A complete undirected graph is a graph in which there is\nexactly one undirected edge between any pair of distinct vertices. Thus, a\ncomplete undirected graph with $n$ vertices contains\n$\\frac{n(n-1)}{2}$ edges.\n\n$^{\\ddagger}$A Hamiltonian path in a graph is a path that passes through\neach vertex exactly once.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe only line of each test case contains a single integer $n$ ($2 \\le n\n\\le 10^5$) \u2014 the number of vertices in the graph.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "",
        "interaction": "Interaction for each test case begins with reading the integer $n$.\n\nThen you can make no more than $n$ queries.\n\nTo make a query, output a line in the format \"? $d$\" (without quotes)\n($0 \\le d \\le n - 1$). After each query, read two integers \u2014 the answer to\nyour query.\n\nWhen you are ready to report the answer, output a line in the format \"!\n$v_1\\ v_2 \\ldots v_n$\" (without quotes) \u2014 the vertices in the order of\ntheir occurrence in the Hamiltonian path. Outputting the answer does not count\nas one of the $n$ queries. After solving one test case, the program should\nimmediately move on to the next one. After solving all test cases, the program\nshould be terminated immediately.\n\nIf your program makes more than $n$ queries for one test case or makes an\nincorrect query, then the response to the query will be $-1$, and after\nreceiving such a response, your program should immediately terminate to\nreceive the verdict Wrong answer. Otherwise, it may receive any other verdict.\n\nAfter outputting a query, do not forget to output an end of line and flush the\noutput buffer. Otherwise, you will receive the verdict Idleness limit\nexceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\nThe interactor is non-adaptive. The graph does not change during the\ninteraction.\n\nHacks\n\nTo hack, use the following format:\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains a single integer $n$ ($2 \\le n\n\\le 10^5$) \u2014 the number of vertices in the graph.\n\nEach of the following $(n - 2)$ lines should contains two integers $u$\nand $v$ ($1 \\le u, v \\le n$, $u \\ne v$) \u2014 ends of the edge that\nwas removed from the graph. Each edge must not occur more than once.\n\nThe sum of $n$ over all test cases should not exceed $10^5$.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4\n\n0 0\n\n1 4\n\n2 3\n\n4\n\n1 0\n\n4 2\n\n2\n\n1 0\n\n</pre></td>\n    <td><pre>\n\n? 3\n\n? 2\n\n? 1\n\n! 4 3 1 2\n\n? 3\n\n? 0\n\n! 4 1 2 3\n\n? 0\n\n! 2 1</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the original graph looks as follows:\n\n![](CDN_BASE_URL/9e94c643d0700ca63cfa3ac8ea5f9c2d)\n\nConsider the queries:\n\n  * There are no vertices with a degree of at least $3$ in the graph, so \"$0\\ 0$\" is reported.\n  * There are four vertices with a degree of at least $2$, and all of them have a degree of exactly $2$: $1$, $2$, $3$, $4$. Vertex $1$ is reported, because it has the minimum number, and vertex $4$ is reported, because it is the only one not connected to vertex $1$. After this, vertex $1$ is removed from the graph.\n  * There are three vertices with a degree of at least $1$, among them vertices $2$ and $3$ have a minimum degree of $1$ (vertex $4$ has a degree of $2$). Vertex $2$ is reported, because it has the minimum number, and vertex $3$ is reported, because it is the only one not connected to vertex $2$. After this, vertex $2$ is removed from the graph.\n\nThe path $4 - 3 - 1 - 2$ is a Hamiltonian path.\n\nIn the second test case, the original graph looks as follows:\n\n![](CDN_BASE_URL/0e3b3acfbac459d224265103f346f187)\n\nConsider the queries:\n\n  * Vertex $1$ has a degree of at least $3$, but it is connected to all vertices, so \"$1\\ 0$\" is reported. After this, vertex $1$ is removed from the graph.\n  * The remaining vertices $2$, $3$, and $4$ have a degree of at least $0$, but among them vertex $4$ has the minimum degree of $0$ (vertices $2$ and $3$ have a degree of $1$). Vertex $4$ is not connected to both vertices $2$ and $3$, so vertex $2$ is reported (as it has the minimum number). After this, vertex $4$ is removed from the graph.\n\nThe path $4 - 1 - 2 - 3$ is a Hamiltonian path.\n\nIn the third test case, the graph consists of $2$ vertices connected by an\nedge."
    },
    {
        "problem_id": "1980A",
        "url": "https://codeforces.com/problemset/problem/1980/A",
        "title": "Problem Generator",
        "rating": 800,
        "tags": [
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Vlad is planning to hold $m$ rounds next month. Each round should contain\none problem of difficulty levels 'A', 'B', 'C', 'D', 'E', 'F', and 'G'.\n\nVlad already has a bank of $n$ problems, where the $i$-th problem has\na difficulty level of $a_i$. There may not be enough of these problems, so\nhe may have to come up with a few more problems.\n\nVlad wants to come up with as few problems as possible, so he asks you to find\nthe minimum number of problems he needs to come up with in order to hold\n$m$ rounds.\n\nFor example, if $m=1$, $n = 10$, $a=$ 'BGECDCBDED', then he needs\nto come up with two problems: one of difficulty level 'A' and one of\ndifficulty level 'F'.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 1000$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\le n \\le 50$, $1 \\le m \\le 5$) \u2014 the number of problems in the\nbank and the number of upcoming rounds, respectively.\n\nThe second line of each test case contains a string $a$ of $n$\ncharacters from 'A' to 'G' \u2014 the difficulties of the problems in the bank.",
        "output": "For each test case, output a single integer \u2014 the minimum number of problems\nthat need to come up with to hold $m$ rounds.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n10 1\nBGECDCBDED\n10 2\nBGECDCBDED\n9 1\nBBCDEFFGG\n</pre></td>\n    <td><pre>2\n5\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1980B",
        "url": "https://codeforces.com/problemset/problem/1980/B",
        "title": "Choosing Cubes",
        "rating": 800,
        "tags": [
            "sortings",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Dmitry has $n$ cubes, numbered from left to right from $1$ to $n$.\nThe cube with index $f$ is his favorite.\n\nDmitry threw all the cubes on the table, and the $i$-th cube showed the\nvalue $a_i$ ($1 \\le a_i \\le 100$). After that, he arranged the cubes\nin non-increasing order of their values, from largest to smallest. If two\ncubes show the same value, they can go in any order.\n\nAfter sorting, Dmitry removed the first $k$ cubes. Then he became\ninterested in whether he removed his favorite cube (note that its position\ncould have changed after sorting).\n\nFor example, if $n=5$, $f=2$, $a = [4, \\color{green}3, 3, 2, 3]$\n(the favorite cube is highlighted in green), and $k = 2$, the following\ncould have happened:\n\n  * After sorting $a=[4, \\color{green}3, 3, 3, 2]$, since the favorite cube ended up in the second position, it will be removed. \n  * After sorting $a=[4, 3, \\color{green}3, 3, 2]$, since the favorite cube ended up in the third position, it will not be removed.",
        "input": "The first line contains an integer $t$ ($1 \\le t \\le 1000$) \u2014 the\nnumber of test cases. Then follow the descriptions of the test cases.\n\nThe first line of each test case description contains three integers $n$,\n$f$, and $k$ ($1 \\le f, k \\le n \\le 100$) \u2014 the number of cubes,\nthe index of Dmitry's favorite cube, and the number of removed cubes,\nrespectively.\n\nThe second line of each test case description contains $n$ integers\n$a_i$ ($1 \\le a_i \\le 100$) \u2014 the values shown on the cubes.",
        "output": "For each test case, output one line \u2014 \"YES\" if the cube will be removed in all\ncases, \"NO\" if it will not be removed in any case, \"MAYBE\" if it may be either\nremoved or left.\n\nYou can output the answer in any case. For example, the strings \"YES\", \"nO\",\n\"mAyBe\" will be accepted as answers.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>12\n5 2 2\n4 3 3 2 3\n5 5 3\n4 2 1 3 5\n5 5 2\n5 2 4 1 3\n5 5 5\n1 2 5 4 3\n5 5 4\n3 1 2 4 5\n5 5 5\n4 3 2 1 5\n6 5 3\n1 2 3 1 2 3\n10 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1\n42\n5 2 3\n2 2 1 1 2\n2 1 1\n2 1\n5 3 1\n3 3 2 3 2\n</pre></td>\n    <td><pre>MAYBE\nYES\nNO\nYES\nYES\nYES\nMAYBE\nMAYBE\nYES\nYES\nYES\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1980C",
        "url": "https://codeforces.com/problemset/problem/1980/C",
        "title": "Sofia and the Lost Operations",
        "rating": 1300,
        "tags": [
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Sofia had an array of $n$ integers $a_1, a_2, \\ldots, a_n$. One day\nshe got bored with it, so she decided to sequentially apply $m$\nmodification operations to it.\n\nEach modification operation is described by a pair of numbers $\\langle c_j,\nd_j \\rangle$ and means that the element of the array with index $c_j$\nshould be assigned the value $d_j$, i.e., perform the assignment\n$a_{c_j} = d_j$. After applying all modification operations sequentially,\nSofia discarded the resulting array.\n\nRecently, you found an array of $n$ integers $b_1, b_2, \\ldots, b_n$.\nYou are interested in whether this array is Sofia's array. You know the values\nof the original array, as well as the values $d_1, d_2, \\ldots, d_m$. The\nvalues $c_1, c_2, \\ldots, c_m$ turned out to be lost.\n\nIs there a sequence $c_1, c_2, \\ldots, c_m$ such that the sequential\napplication of modification operations $\\langle c_1, d_1, \\rangle, \\langle\nc_2, d_2, \\rangle, \\ldots, \\langle c_m, d_m \\rangle$ to the array $a_1,\na_2, \\ldots, a_n$ transforms it into the array $b_1, b_2, \\ldots, b_n$?",
        "input": "The first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases.\n\nThen follow the descriptions of the test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2\n\\cdot 10^5$) \u2014 the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the original\narray.\n\nThe third line of each test case contains $n$ integers $b_1, b_2,\n\\ldots, b_n$ ($1 \\le b_i \\le 10^9$) \u2014 the elements of the found array.\n\nThe fourth line contains an integer $m$ ($1 \\le m \\le 2 \\cdot 10^5$) \u2014\nthe number of modification operations.\n\nThe fifth line contains $m$ integers $d_1, d_2, \\ldots, d_m$ ($1 \\le\nd_j \\le 10^9$) \u2014 the preserved value for each modification operation.\n\nIt is guaranteed that the sum of the values of $n$ for all test cases does\nnot exceed $2 \\cdot 10^5$, similarly the sum of the values of $m$ for\nall test cases does not exceed $2 \\cdot 10^5$.",
        "output": "Output $t$ lines, each of which is the answer to the corresponding test\ncase. As an answer, output \"YES\" if there exists a suitable sequence $c_1,\nc_2, \\ldots, c_m$, and \"NO\" otherwise.\n\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\" and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n3\n1 2 1\n1 3 2\n4\n1 3 1 2\n4\n1 2 3 5\n2 1 3 5\n2\n2 3\n5\n7 6 1 10 10\n3 6 1 11 11\n3\n4 3 11\n4\n3 1 7 8\n2 2 7 10\n5\n10 3 2 2 1\n5\n5 7 1 7 9\n4 10 1 2 9\n8\n1 1 9 8 7 2 10 4\n4\n1000000000 203 203 203\n203 1000000000 203 1000000000\n2\n203 1000000000\n1\n1\n1\n5\n1 3 4 5 1\n</pre></td>\n    <td><pre>YES\nNO\nNO\nNO\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1980D",
        "url": "https://codeforces.com/problemset/problem/1980/D",
        "title": "GCD-sequence",
        "rating": 1400,
        "tags": [
            "greedy",
            "implementation",
            "math",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "GCD (Greatest Common Divisor) of two integers $x$ and $y$ is the\nmaximum integer $z$ by which both $x$ and $y$ are divisible. For\nexample, $GCD(36, 48) = 12$, $GCD(5, 10) = 5$, and $GCD(7,11) =\n1$.\n\nKristina has an array $a$ consisting of exactly $n$ positive integers.\nShe wants to count the GCD of each neighbouring pair of numbers to get a new\narray $b$, called GCD-sequence.\n\nSo, the elements of the GCD-sequence $b$ will be calculated using the\nformula $b_i = GCD(a_i, a_{i + 1})$ for $1 \\le i \\le n - 1$.\n\nDetermine whether it is possible to remove exactly one number from the array\n$a$ so that the GCD sequence $b$ is non-decreasing (i.e., $b_i \\le\nb_{i+1}$ is always true).\n\nFor example, let Khristina had an array $a$ = [$20, 6, 12, 3, 48,\n36$]. If she removes $a_4 = 3$ from it and counts the GCD-sequence of\n$b$, she gets:\n\n  * $b_1 = GCD(20, 6) = 2$ \n  * $b_2 = GCD(6, 12) = 6$ \n  * $b_3 = GCD(12, 48) = 12$ \n  * $b_4 = GCD(48, 36) = 12$ \n\nThe resulting GCD sequence $b$ = [$2,6,12,12$] is non-decreasing\nbecause $b_1 \\le b_2 \\le b_3 \\le b_4$.",
        "input": "The first line of input data contains a single number $t$ ($1 \\le t \\le\n10^4$) \u2014 he number of test cases in the test.\n\nThis is followed by the descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of each test case contains exactly $n$ integers $a_i$\n($1 \\le a_i \\le 10^9$) \u2014 the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test case does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single line:\n\n  * \"YES\" if you can remove exactly one number from the array $a$ so that the GCD-sequence of $b$ is non-decreasing; \n  * \"NO\" otherwise. \n\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will all be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>12\n6\n20 6 12 3 48 36\n4\n12 6 3 4\n3\n10 12 3\n5\n32 16 8 4 2\n5\n100 50 2 10 20\n4\n2 4 8 1\n10\n7 4 6 2 4 5 1 4 2 8\n7\n5 9 6 8 5 9 2\n6\n11 14 8 12 9 3\n9\n5 7 3 10 6 3 12 6 3\n3\n4 2 4\n8\n1 6 11 12 6 12 3 6\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The first test case is explained in the problem statement."
    },
    {
        "problem_id": "1980E",
        "url": "https://codeforces.com/problemset/problem/1980/E",
        "title": "Permutation of Rows and Columns",
        "rating": 1600,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "hashing",
            "implementation",
            "math",
            "matrices",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "You have been given a matrix $a$ of size $n$ by $m$, containing a\npermutation of integers from $1$ to $n \\cdot m$.\n\nA permutation of $n$ integers is an array containing all numbers from\n$1$ to $n$ exactly once. For example, the arrays $[1]$, $[2, 1,\n3]$, $[5, 4, 3, 2, 1]$ are permutations, while the arrays $[1, 1]$,\n$[100]$, $[1, 2, 4, 5]$ are not.\n\nA matrix contains a permutation if, when all its elements are written out, the\nresulting array is a permutation. Matrices $[[1, 2], [3, 4]]$,\n$[[1]]$, $[[1, 5, 3], [2, 6, 4]]$ contain permutations, while matrices\n$[[2]]$, $[[1, 1], [2, 2]]$, $[[1, 2], [100, 200]]$ do not.\n\nYou can perform one of the following two actions in one operation:\n\n  * choose columns $c$ and $d$ ($1 \\le c, d \\le m$, $c \\ne d$) and swap these columns; \n  * choose rows $c$ and $d$ ($1 \\le c, d \\le n$, $c \\ne d$) and swap these rows. \n\nYou can perform any number of operations.\n\nYou are given the original matrix $a$ and the matrix $b$. Your task is\nto determine whether it is possible to transform matrix $a$ into matrix\n$b$ using the given operations.",
        "input": "The first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases. The descriptions of the test cases follow.\n\nThe first line of each test case description contains $2$ integers $n$\nand $m$ ($1 \\le n, m \\le n \\cdot m \\le 2 \\cdot 10^5$) \u2014 the sizes of\nthe matrix.\n\nThe next $n$ lines contain $m$ integers $a_{ij}$ each ($1 \\le\na_{ij} \\le n \\cdot m$). It is guaranteed that matrix $a$ is a\npermutation.\n\nThe next $n$ lines contain $m$ integers $b_{ij}$ each ($1 \\le\nb_{ij} \\le n \\cdot m$). It is guaranteed that matrix $b$ is a\npermutation.\n\nIt is guaranteed that the sum of the values $n \\cdot m$ for all test cases\ndoes not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output \"YES\" if the second matrix can be obtained from the\nfirst, and \"NO\" otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example,\nthe strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive\nanswer.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1 1\n1\n1\n2 2\n1 2\n3 4\n4 3\n2 1\n2 2\n1 2\n3 4\n4 3\n1 2\n3 4\n1 5 9 6\n12 10 4 8\n7 11 3 2\n1 5 9 6\n12 10 4 8\n7 11 3 2\n3 3\n1 5 9\n6 4 2\n3 8 7\n9 5 1\n2 4 6\n7 8 3\n2 3\n1 2 6\n5 4 3\n6 1 2\n3 4 5\n1 5\n5 1 2 3 4\n4 2 5 1 3\n</pre></td>\n    <td><pre>YES\nYES\nNO\nYES\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second example, the original matrix looks like this:\n\n$ \\begin{pmatrix} 1 & 2 \\\\\\ 3 & 4 \\end{pmatrix} $\n\nBy swapping rows $1$ and $2$, it becomes:\n\n$ \\begin{pmatrix} 3 & 4 \\\\\\ 1 & 2 \\end{pmatrix} $\n\nBy swapping columns $1$ and $2$, it becomes equal to matrix $b$:\n\n$ \\begin{pmatrix} 4 & 3 \\\\\\ 2 & 1 \\end{pmatrix} $"
    },
    {
        "problem_id": "1980F1",
        "url": "https://codeforces.com/problemset/problem/1980/F1",
        "title": "Field Division (easy version)",
        "rating": 1900,
        "tags": [
            "data structures",
            "math",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "This is an easy version of the problem; it differs from the hard version only\nby the question. The easy version only needs you to print whether some values\nare non-zero or not. The hard version needs you to print the exact values.\n\nAlice and Bob are dividing the field. The field is a rectangle of size $n\n\\times m$ ($2 \\le n, m \\le 10^9$), the rows are numbered from $1$ to\n$n$ from top to bottom, and the columns are numbered from $1$ to\n$m$ from left to right. The cell at the intersection of row $r$ and\ncolumn $c$ is denoted as ($r, c$).\n\nBob has $k$ ($2 \\le k \\le 2 \\cdot 10^5$) fountains, all of them are\nlocated in different cells of the field. Alice is responsible for dividing the\nfield, but she must meet several conditions:\n\n  * To divide the field, Alice will start her path in any free (without a fountain) cell on the left or top side of the field and will move, each time moving to the adjacent cell down or right. Her path will end on the right or bottom side of the field. \n  * Alice's path will divide the field into two parts \u2014 one part will belong to Alice (this part includes the cells of her path), the other part \u2014 to Bob. \n  * Alice will own the part that includes the cell ($n, 1$). \n  * Bob will own the part that includes the cell ($1, m$). \n\nAlice wants to divide the field in such a way as to get as many cells as\npossible.\n\nBob wants to keep ownership of all the fountains, but he can give one of them\nto Alice. First, output the integer $\\alpha$ \u2014 the maximum possible size\nof Alice's plot, if Bob does not give her any fountain (i.e., all fountains\nwill remain on Bob's plot). Then output $k$ non-negative integers $a_1,\na_2, \\dots, a_k$, where:\n\n  * $a_i=0$, if after Bob gives Alice the $i$-th fountain, the maximum possible size of Alice's plot does not increase (i.e., remains equal to $\\alpha$); \n  * $a_i=1$, if after Bob gives Alice the $i$-th fountain, the maximum possible size of Alice's plot increases (i.e., becomes greater than $\\alpha$).",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and\n$k$ ($2 \\le n, m \\le 10^9$, $2 \\le k \\le 2 \\cdot 10^5$) \u2014 the\nfield sizes and the number of fountains, respectively.\n\nThen follow $k$ lines, each containing two numbers $r_i$ and $c_i$\n($1 \\le r_i \\le n$, $1 \\le c_i \\le m$) \u2014 the coordinates of the cell\nwith the $i$-th fountain. It is guaranteed that all cells are distinct and\nnone of them is ($n, 1$).\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, first output $\\alpha$ \u2014 the maximum size of the plot\nthat can belong to Alice if Bob does not give her any of the fountains. Then\noutput $k$ non-negative integers $a_1, a_2, \\dots, a_k$, where:\n\n  * $a_i=0$, if after Bob gives Alice the $i$-th fountain, the maximum possible size of Alice's plot does not increase compared to the case when all $k$ fountains belong to Bob; \n  * $a_i=1$, if after Bob gives Alice the $i$-th fountain, the maximum possible size of Alice's plot increases compared to the case when all $k$ fountains belong to Bob. \n\nIf you output any other positive number instead of $1$ that fits into a\n64-bit signed integer type, it will also be recognized as $1$. Thus, a\nsolution to the hard version of this problem will also pass the tests for the\neasy version.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2 2 3\n1 1\n1 2\n2 2\n5 5 4\n1 2\n2 2\n3 4\n4 3\n2 5 9\n1 2\n1 5\n1 1\n2 2\n2 4\n2 5\n1 4\n2 3\n1 3\n6 4 4\n6 2\n1 3\n1 4\n1 2\n3 4 5\n2 1\n3 2\n1 4\n1 3\n2 4\n</pre></td>\n    <td><pre>1\n1 0 1 \n11\n0 1 0 1 \n1\n0 0 1 1 0 0 0 0 0 \n6\n1 0 0 0 \n1\n1 1 0 0 0 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Below are the images for the second example:\n\n![](CDN_BASE_URL/0e3fee1fe74ac4348d869fc256da57a3) The indices of the\nfountains are labeled in green. The cells belonging to Alice are marked in\nblue.\n\nNote that if Bob gives Alice fountain $1$ or fountain $3$, then that\nfountain cannot be on Alice's plot."
    },
    {
        "problem_id": "1980F2",
        "url": "https://codeforces.com/problemset/problem/1980/F2",
        "title": "Field Division (hard version)",
        "rating": 2400,
        "tags": [
            "math",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "This is a hard version of the problem; it differs from the easy version only\nby the question. The easy version only needs you to print whether some values\nare non-zero or not. The hard version needs you to print the exact values.\n\nAlice and Bob are dividing the field. The field is a rectangle of size $n\n\\times m$ ($2 \\le n, m \\le 10^9$); the rows are numbered from $1$ to\n$n$ from top to bottom, and the columns are numbered from $1$ to\n$m$ from left to right. The cell at the intersection of row $r$ and\ncolumn $c$ is denoted as ($r, c$).\n\nBob has $k$ ($2 \\le k \\le 2 \\cdot 10^5$) fountains, all of them are\nlocated in different cells of the field. Alice is responsible for dividing the\nfield, but she must meet several conditions:\n\n  * To divide the field, Alice will start her path in any free (without a fountain) cell on the left or top side of the field and will move, each time moving to the adjacent cell down or right. Her path will end on the right or bottom side of the field. \n  * Alice's path will divide the field into two parts \u2014 one part will belong to Alice (this part includes the cells of her path), the other part \u2014 to Bob. \n  * Alice will own the part that includes the cell ($n, 1$). \n  * Bob will own the part that includes the cell ($1, m$). \n\nAlice wants to divide the field in such a way as to get as many cells as\npossible.\n\nBob wants to keep ownership of all the fountains, but he can give one of them\nto Alice. First, output the integer $\\alpha$ \u2014 the maximum possible size\nof Alice's plot, if Bob does not give her any fountain (i.e., all fountains\nwill remain on Bob's plot).\n\nThen output $k$ non-negative integers $a_1, a_2, \\dots, a_k$, where\n$a_i$ is a value such that after Bob gives Alice the $i$-th fountain,\nthe maximum size of her plot will be $\\alpha + a_i$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains three integers $n$, $m$, and\n$k$ ($2 \\le n, m \\le 10^9$, $2 \\le k \\le 2 \\cdot 10^5$) \u2014 the\nfield sizes and the number of fountains, respectively.\n\nThen follow $k$ lines, each containing two numbers $r_i$ and $c_i$\n($1 \\le r_i \\le n$, $1 \\le c_i \\le m$) \u2014 the coordinates of the cell\nwith the $i$-th fountain. It is guaranteed that all cells are distinct and\nnone of them is ($n, 1$).\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, first output $\\alpha$ \u2014 the maximum size of the plot\nthat can belong to Alice if Bob does not give her any of the fountains. Then\noutput $k$ non-negative integers $a_1, a_2, \\dots, a_k$, where\n$a_i$ is a value such that after Bob gives Alice the $i$-th fountain,\nthe maximum size of her plot will be $\\alpha + a_i$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2 2 3\n1 1\n1 2\n2 2\n5 5 4\n1 2\n2 2\n3 4\n4 3\n2 5 9\n1 2\n1 5\n1 1\n2 2\n2 4\n2 5\n1 4\n2 3\n1 3\n6 4 4\n6 2\n1 3\n1 4\n1 2\n3 4 5\n2 1\n3 2\n1 4\n1 3\n2 4\n</pre></td>\n    <td><pre>1\n1 0 1 \n11\n0 1 0 4 \n1\n0 0 1 1 0 0 0 0 0 \n6\n15 0 0 0 \n1\n2 3 0 0 0 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Below are the images for the second example:\n\n![](CDN_BASE_URL/0e3fee1fe74ac4348d869fc256da57a3) The indices of the\nfountains are labeled in green. The cells belonging to Alice are marked in\nblue.\n\nNote that if Bob gives Alice fountain $1$ or fountain $3$, then that\nfountain cannot be on Alice's plot."
    },
    {
        "problem_id": "1980G",
        "url": "https://codeforces.com/problemset/problem/1980/G",
        "title": "Yasya and the Mysterious Tree",
        "rating": 2300,
        "tags": [
            "bitmasks",
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "strings",
            "trees"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2500,
        "memory_limit_mb": 512,
        "description": "Yasya was walking in the forest and accidentally found a tree with $n$\nvertices. A tree is a connected undirected graph with no cycles.\n\nNext to the tree, the girl found an ancient manuscript with $m$ queries\nwritten on it. The queries can be of two types.\n\nThe first type of query is described by the integer $y$. The weight of\neach edge in the tree is replaced by the [bitwise exclusive\nOR](http://tiny.cc/xor_wiki_eng) of the weight of that edge and the integer\n$y$.\n\nThe second type is described by the vertex $v$ and the integer $x$.\nYasya chooses a vertex $u$ ($1 \\le u \\le n$, $u \\neq v$) and\nmentally draws a bidirectional edge of weight $x$ from $v$ to $u$\nin the tree.\n\nThen Yasya finds a simple cycle in the resulting graph and calculates the\n[bitwise exclusive OR](http://tiny.cc/xor_wiki_eng) of all the edges in it.\nShe wants to choose a vertex $u$ such that the calculated value is\nmaximum. This calculated value will be the answer to the query. It can be\nshown that such a cycle exists and is unique under the given constraints\n(independent of the choice of $u$). If an edge between $v$ and $u$\nalready existed, a simple cycle is the path $v \\to u \\to v$.\n\nNote that the second type of query is performed mentally, meaning the tree\ndoes not change in any way after it.\n\nHelp Yasya answer all the queries.",
        "input": "The first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases.\n\nThe descriptions of the test cases follow.\n\nThe first line of each test case contains two integers $n$, $m$ ($2\n\\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$) \u2014 the number of\nvertices in the tree and the number of queries.\n\nThe next $n - 1$ lines of each test case contain three integers $v$,\n$u$, $w$ ($1 \\le v, u \\le n$, $1 \\le w \\le 10^9$) \u2014 the ends\nof some edge in the tree and its weight.\n\nIt is guaranteed that the given set of edges forms a tree.\n\nThe next $m$ lines of each test case describe the queries:\n\n  * ^ $y$ ($1 \\le y \\le 10^9$) \u2014 parameter of the first type query; \n  * ? $v$ $x$ ($1 \\le v \\le n$, $1 \\le x \\le 10^9$) \u2014 parameters of the second type query. \n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$. The same is guaranteed for $m$.",
        "output": "For each test case, output the answers to the queries of the second type.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3 7\n1 2 1\n3 1 8\n^ 5\n? 2 9\n^ 1\n? 1 10\n^ 6\n? 3 1\n? 2 9\n5 6\n1 2 777\n3 2 2812\n4 1 16\n5 3 1000000000\n^ 4\n? 3 123\n? 5 1000000000\n^ 1000000000\n? 1 908070\n? 2 1\n</pre></td>\n    <td><pre>13 15 11 10 \n1000000127 2812 999756331 999999756 \n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n8 4\n8 6 3\n6 3 4\n2 5 4\n7 6 2\n7 1 10\n4 1 4\n5 1 2\n^ 4\n^ 7\n? 7 8\n? 4 10\n5 6\n3 1 4\n2 3 9\n4 3 6\n5 2 10\n? 5 7\n^ 1\n^ 8\n? 4 10\n? 1 9\n? 3 6\n4 2\n2 1 4\n4 3 5\n2 3 4\n^ 13\n? 1 10\n</pre></td>\n    <td><pre>14 13 \n13 8 11 11 \n10 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1981A",
        "url": "https://codeforces.com/problemset/problem/1981/A",
        "title": "Turtle and Piggy Are Playing a Game",
        "rating": 800,
        "tags": [
            "brute force",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Turtle and Piggy are playing a number game.\n\nFirst, Turtle will choose an integer $x$, such that $l \\le x \\le r$,\nwhere $l, r$ are given. It's also guaranteed that $2l \\le r$.\n\nThen, Piggy will keep doing the following operation until $x$ becomes\n$1$:\n\n  * Choose an integer $p$ such that $p \\ge 2$ and $p \\mid x$ (i.e. $x$ is a multiple of $p$). \n  * Set $x$ to $\\frac{x}{p}$, and the score will increase by $1$. \n\nThe score is initially $0$. Both Turtle and Piggy want to maximize the\nscore. Please help them to calculate the maximum score.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $l, r$ ($1 \\le l\n\\le r \\le 10^9, 2l \\le r$) \u2014 The range where Turtle can choose the integer\nfrom.",
        "output": "For each test case, output a single integer \u2014 the maximum score.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2 4\n3 6\n2 15\n6 22\n114514 1919810\n</pre></td>\n    <td><pre>2\n2\n3\n4\n20\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Turtle can choose an integer $x$, such that $2\n\\le x \\le 4$. He can choose $x = 4$. Then Piggy can choose $p = 2$\nfor $2$ times. After that, $x$ will become $1$, and the score will\nbe $2$, which is maximized.\n\nIn the second test case, Turtle can choose an integer $3 \\le x \\le 6$. He\ncan choose $x = 6$. Then Piggy can choose $p = 2$, then choose $p =\n3$. After that, $x$ will become $1$, and the score will be $2$,\nwhich is maximum.\n\nIn the third test case, Turtle can choose $x = 12$.\n\nIn the fourth test case, Turtle can choose $x = 16$."
    },
    {
        "problem_id": "1981B",
        "url": "https://codeforces.com/problemset/problem/1981/B",
        "title": "Turtle and an Infinite Sequence",
        "rating": 1300,
        "tags": [
            "bitmasks",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "There is a sequence $a_0, a_1, a_2, \\ldots$ of infinite length. Initially\n$a_i = i$ for every non-negative integer $i$.\n\nAfter every second, each element of the sequence will simultaneously change.\n$a_i$ will change to $a_{i - 1} \\mid a_i \\mid a_{i + 1}$ for every\npositive integer $i$. $a_0$ will change to $a_0 \\mid a_1$. Here,\n$|$ denotes [bitwise\nOR](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\nTurtle is asked to find the value of $a_n$ after $m$ seconds. In\nparticular, if $m = 0$, then he needs to find the initial value of\n$a_n$. He is tired of calculating so many values, so please help him!",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n, m$ ($0 \\le n,\nm \\le 10^9$).",
        "output": "For each test case, output a single integer \u2014 the value of $a_n$ after\n$m$ seconds.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9\n0 0\n0 1\n0 2\n1 0\n5 2\n10 1\n20 3\n1145 14\n19198 10\n</pre></td>\n    <td><pre>0\n1\n3\n1\n7\n11\n23\n1279\n19455\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "After $1$ second, $[a_0, a_1, a_2, a_3, a_4, a_5]$ will become $[1,\n3, 3, 7, 7, 7]$.\n\nAfter $2$ seconds, $[a_0, a_1, a_2, a_3, a_4, a_5]$ will become $[3,\n3, 7, 7, 7, 7]$."
    },
    {
        "problem_id": "1981C",
        "url": "https://codeforces.com/problemset/problem/1981/C",
        "title": "Turtle and an Incomplete Sequence",
        "rating": 1800,
        "tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Turtle was playing with a sequence $a_1, a_2, \\ldots, a_n$ consisting of\npositive integers. Unfortunately, some of the integers went missing while\nplaying.\n\nNow the sequence becomes incomplete. There may exist an arbitrary number of\nindices $i$ such that $a_i$ becomes $-1$. Let the new sequence be\n$a'$.\n\nTurtle is sad. But Turtle remembers that for every integer $i$ from\n$1$ to $n - 1$, either $a_i = \\left\\lfloor\\frac{a_{i +\n1}}{2}\\right\\rfloor$ or $a_{i + 1} =\n\\left\\lfloor\\frac{a_i}{2}\\right\\rfloor$ holds for the original sequence\n$a$.\n\nTurtle wants you to help him complete the sequence. But sometimes Turtle makes\nmistakes, so you need to tell him if you can't complete the sequence.\n\nFormally, you need to find another sequence $b_1, b_2, \\ldots, b_n$\nconsisting of positive integers such that:\n\n  * For every integer $i$ from $1$ to $n$, if $a'_i \\ne -1$, then $b_i = a'_i$. \n  * For every integer $i$ from $1$ to $n - 1$, either $b_i = \\left\\lfloor\\frac{b_{i + 1}}{2}\\right\\rfloor$ or $b_{i + 1} = \\left\\lfloor\\frac{b_i}{2}\\right\\rfloor$ holds. \n  * For every integer $i$ from $1$ to $n$, $1 \\le b_i \\le 10^9$. \n\nIf there is no sequence $b_1, b_2, \\ldots, b_n$ that satisfies all of the\nconditions above, you need to report $-1$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the sequence.\n\nThe second line of each test case contains $n$ integers $a'_1, a'_2,\n\\ldots, a'_n$ ($a'_i = -1$ or $1 \\le a'_i \\le 10^8$) \u2014 the elements\nof the sequence $a'$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, if there is no sequence $b_1, b_2, \\ldots, b_n$ that\nsatisfies all of the conditions, output a single integer $-1$.\n\nOtherwise, output $n$ integers $b_1, b_2, \\ldots, b_n$ \u2014 the elements\nof the sequence $b_1, b_2, \\ldots, b_n$ you find. The sequence should\nsatisfy that $1 \\le b_i \\le 10^9$ for every integer $i$ from $1$\nto $n$. If there are multiple answers, print any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9\n8\n-1 -1 -1 2 -1 -1 1 -1\n4\n-1 -1 -1 -1\n6\n3 -1 -1 -1 9 -1\n4\n-1 5 -1 6\n4\n2 -1 -1 3\n4\n1 2 3 4\n2\n4 2\n5\n-1 3 -1 3 6\n13\n-1 -1 3 -1 -1 -1 -1 7 -1 -1 3 -1 -1\n</pre></td>\n    <td><pre>4 9 4 2 4 2 1 2\n7 3 6 13\n3 1 2 4 9 18\n-1\n-1\n-1\n4 2\n6 3 1 3 6\n3 1 3 1 3 7 3 7 3 1 3 1 3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $[4, 2, 1, 2, 1, 2, 1, 3]$ can also be the answer,\nwhile $[4, 2, 5, 10, 5, 2, 1, 3]$ and $[4, 2, 1, 2, 1, 2, 1, 4]$\ncannot.\n\nIn the second test case, $[1, 2, 5, 2]$ can also be the answer.\n\nFrom the fourth to the sixth test cases, it can be shown that there is no\nanswer, so you should output $-1$."
    },
    {
        "problem_id": "1981D",
        "url": "https://codeforces.com/problemset/problem/1981/D",
        "title": "Turtle and Multiplication",
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "Turtle just learned how to multiply two integers in his math class, and he was\nvery excited.\n\nThen Piggy gave him an integer $n$, and asked him to construct a sequence\n$a_1, a_2, \\ldots, a_n$ consisting of integers which satisfied the\nfollowing conditions:\n\n  * For all $1 \\le i \\le n$, $1 \\le a_i \\le 3 \\cdot 10^5$. \n  * For all $1 \\le i < j \\le n - 1$, $a_i \\cdot a_{i + 1} \\ne a_j \\cdot a_{j + 1}$. \n\nOf all such sequences, Piggy asked Turtle to find the one with the minimum\nnumber of distinct elements.\n\nTurtle definitely could not solve the problem, so please help him!",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 10^6$) \u2014 the length of the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, output $n$ integers $a_1, a_2, \\ldots, a_n$ \u2014 the\nelements of the sequence $a$.\n\nIf there are multiple answers, print any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2\n3\n4\n</pre></td>\n    <td><pre>114514 114514\n1 2 2\n3 3 4 4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the third test case, $a = [3, 4, 2, 6]$ violates the second condition\nsince $a_1 \\cdot a_2 = a_3 \\cdot a_4$. $a = [2, 3, 4, 4]$ satisfy the\nconditions but its number of distinct elements isn't minimum."
    },
    {
        "problem_id": "1981E",
        "url": "https://codeforces.com/problemset/problem/1981/E",
        "title": "Turtle and Intersected Segments",
        "rating": 2600,
        "tags": [
            "data structures",
            "dsu",
            "graphs",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 512,
        "description": "Turtle just received $n$ segments and a sequence $a_1, a_2, \\ldots,\na_n$. The $i$-th segment is $[l_i, r_i]$.\n\nTurtle will create an undirected graph $G$. If segment $i$ and segment\n$j$ intersect, then Turtle will add an undirected edge between $i$ and\n$j$ with a weight of $|a_i - a_j|$, for every $i \\ne j$.\n\nTurtle wants you to calculate the sum of the weights of the edges of the\nminimum spanning tree of the graph $G$, or report that the graph $G$\nhas no spanning tree.\n\nWe say two segments $[l_1, r_1]$ and $[l_2, r_2]$ intersect if and\nonly if $\\max(l_1, l_2) \\le \\min(r_1, r_2)$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 5 \\cdot 10^5$) \u2014 the number of segments.\n\nThe $i$-th of the following $n$ lines contains three integers $l_i,\nr_i, a_i$ ($1 \\le l_i \\le r_i \\le 10^9, 1 \\le a_i \\le 10^9$) \u2014 the\n$i$-th segment and the $i$-th element of the sequence.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the sum of the weights of the\nedges of the minimum spanning tree of the graph $G$. If the graph $G$\nhas no spanning tree, output $-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5\n1 7 3\n2 4 6\n3 5 5\n6 7 9\n3 4 4\n5\n2 7 3\n1 3 6\n4 5 5\n6 7 9\n1 1 4\n4\n1 4 3\n1 2 1\n3 4 5\n1 4 4\n3\n1 3 1\n2 3 3\n4 5 8\n</pre></td>\n    <td><pre>9\n13\n4\n-1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the graph $G$ is as follows:\n\n![](CDN_BASE_URL/7b0a32f8f1d54a5dbbaffee1efd8ece1)\n\nOne of the minimum spanning trees of $G$ is as follows:\n\n![](CDN_BASE_URL/7a035af2d5227648781d0c24b81c076e)\n\nThe sum of the weights of the edges of the minimum spanning tree is $9$.\n\nIn the second test case, the graph $G$ is as follows:\n\n![](CDN_BASE_URL/62be880a08fa85071b491d6badd5f58e)\n\n$G$ is already a tree, and the sum of the weights of the tree is $13$.\n\nIn the third test case, the graph $G$ is as follows:\n\n![](CDN_BASE_URL/b667aa771d019e3a8a3a4c4372200f03)\n\nIn the fourth test case, the graph $G$ is as follows:\n\n![](CDN_BASE_URL/45bc2d052677dbf032ff37fd1d723d83)\n\nIt's easy to see that $G$ is not connected, so $G$ has no spanning\ntree."
    },
    {
        "problem_id": "1981F",
        "url": "https://codeforces.com/problemset/problem/1981/F",
        "title": "Turtle and Paths on a Tree",
        "rating": 3000,
        "tags": [
            "data structures",
            "dp",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 1024,
        "description": "Note the unusual definition of $\\text{MEX}$ in this problem.\n\nPiggy gave Turtle a binary tree$^{\\dagger}$ with $n$ vertices and a\nsequence $a_1, a_2, \\ldots, a_n$ on his birthday. The binary tree is\nrooted at vertex $1$.\n\nIf a set of paths $P = \\\\{(x_i, y_i)\\\\}$ in the tree covers each edge\nexactly once, then Turtle will think that the set of paths is good. Note that\na good set of paths can cover a vertex twice or more.\n\nTurtle defines the value of a set of paths as $\\sum\\limits_{(x, y) \\in P}\nf(x, y)$, where $f(x, y)$ denotes the $\\text{MEX}^{\\ddagger}$ of all\n$a_u$ such that vertex $u$ is on the simple path from $x$ to\n$y$ in the tree (including the starting vertex $x$ and the ending\nvertex $y$).\n\nTurtle wonders the minimum value over all good sets of paths. Please help him\ncalculate the answer!\n\n$^{\\dagger}$A binary tree is a tree where every non-leaf vertex has at\nmost $2$ sons.\n\n$^{\\ddagger}\\text{MEX}$ of a collection of integers $c_1, c_2, \\ldots,\nc_k$ is defined as the smallest positive integer $x$ which does not\noccur in the collection $c$. For example, $\\text{MEX}$ of $[3, 3, 1,\n4]$ is $2$, $\\text{MEX}$ of $[2, 3]$ is $1$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2.5 \\cdot 10^4$) \u2014 the number of vertices in the tree.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the sequence\n$a$.\n\nThe third line of each test case contains $n - 1$ integers $p_2, p_3,\n\\ldots, p_n$ ($1 \\le p_i < i$) \u2014 the parent of each vertex in the tree.\n\nAdditional constraint on the input: the given tree is a binary tree, that is,\nevery non-leaf vertex has at most $2$ sons.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum value over all good\nsets of paths.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n5\n3 2 2 1 1\n1 1 2 2\n5\n3 2 1 1 1\n1 1 2 2\n6\n1 2 1 2 1 3\n1 2 3 3 4\n7\n2 1 2 3 1 2 1\n1 1 2 2 3 3\n10\n1 2 2 1 4 2 3 1 2 1\n1 1 2 2 3 3 4 5 5\n</pre></td>\n    <td><pre>4\n6\n6\n6\n7\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the tree is as follows. The number in brackets denotes\nthe weight of the vertex:\n\n![](CDN_BASE_URL/45a1635df0fcab1b711d2165163f0dfb)\n\nThe good set of paths with the minimum value is $\\\\{(2, 3), (4, 5)\\\\}$.\n\nNote that in this test case $\\\\{(4, 5)\\\\}$ and $\\\\{(3, 4), (4, 5)\\\\}$\nare not good sets of paths because each edge should be covered exactly once.\n\nIn the second test case, the tree is as follows:\n\n![](CDN_BASE_URL/a41b8a69adf0471a8353a08785fa6375)\n\nThe set of good paths with the minimum value is $\\\\{(1, 2), (1, 3), (4,\n5)\\\\}$.\n\nIn the third test case, the tree is as follows:\n\n![](CDN_BASE_URL/7e62b6f397447336b5c5732c0d915ebd)\n\nThe set of good paths with the minimum value is $\\\\{(1, 6), (3, 5)\\\\}$."
    },
    {
        "problem_id": "1982A",
        "url": "https://codeforces.com/problemset/problem/1982/A",
        "title": "Soccer",
        "rating": 800,
        "tags": [
            "greedy",
            "implementation",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Dima loves watching soccer. In such a game, the score on the scoreboard is\nrepresented as $x$ : $y$, where $x$ is the number of goals of the\nfirst team, and $y$ is the number of goals of the second team. At any\ngiven time, only one team can score a goal, so the score $x$ : $y$ can\nchange to either $(x + 1)$ : $y$, or $x$ : $(y + 1)$.\n\nWhile watching a soccer game, Dima was distracted by very important matters,\nand after some time, he returned to watching the game. Dima remembers the\nscore right before he was distracted, and the score right after he returned.\nGiven these two scores, he wonders the following question. Is it possible\nthat, while Dima was not watching the game, the teams never had an equal\nscore?\n\nIt is guaranteed that at neither of the two time points Dima remembers the\nteams had equal scores. However, it is possible that the score did not change\nduring his absence.\n\nHelp Dima and answer the question!",
        "input": "Each test consists of several test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10^{4}$) \u2014 the number of test cases. Then follows\nthe description of the test cases.\n\nThe first line of each test case contains two integers $x_{1}, y_{1}$\n($0 \\le x_{1}, y_{1} \\le 10^{9}$, $x_{1} \\neq y_{1}$) \u2014 the score\nbefore Dima was distracted.\n\nThe second line of each test case contains two integers $x_{2}, y_{2}$\n($x_{1} \\le x_{2} \\le 10^{9}$, $y_{1} \\le y_{2} \\le 10^{9}$, $x_{2}\n\\neq y_{2}$) \u2014 the score when Dima returned.",
        "output": "For each test case, output \"YES\" without quotes if it is possible, that the\nteams never had a tie while Dima was away, otherwise output \"NO\" without\nquotes.\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 0\n5 0\n1 2\n3 2\n1 2\n4 5\n1 2\n4 3\n1 2\n1 2\n998244353 0\n1000000000 999999999\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the score before Dima left was $1$ : $0$. When\nhe leaves, the first team scores several goals in a row until the score\nbecomes $5$ : $0$, so the answer is YES.\n\nIn the second test case, the score could only change as follows:\n\n  * $1$ : $2$ \n  * $2$ : $2$ \n  * $3$ : $2$ \n\nIn this scenario, there is a moment when the teams have an equal score, so the\nanswer is NO.\n\nIn the third test case, one of the possible developments is:\n\n  * $1$ : $2$ \n  * $1$ : $3$ \n  * $2$ : $3$ \n  * $2$ : $4$ \n  * $2$ : $5$ \n  * $3$ : $5$ \n  * $4$ : $5$ \n\nIn this scenario, there was no time when the score was equal, so the answer is\nYES."
    },
    {
        "problem_id": "1982B",
        "url": "https://codeforces.com/problemset/problem/1982/B",
        "title": "Collatz Conjecture",
        "rating": 1200,
        "tags": [
            "brute force",
            "implementation",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Recently, the first-year student Maxim learned about the Collatz conjecture,\nbut he didn't pay much attention during the lecture, so he believes that the\nfollowing process is mentioned in the conjecture:\n\nThere is a variable $x$ and a constant $y$. The following operation is\nperformed $k$ times:\n\n  * increase $x$ by $1$, then \n  * while the number $x$ is divisible by $y$, divide it by $y$. \n\nNote that both of these actions are performed sequentially within one\noperation.\n\nFor example, if the number $x = 16$, $y = 3$, and $k = 2$, then\nafter one operation $x$ becomes $17$, and after another operation\n$x$ becomes $2$, because after adding one, $x = 18$ is divisible\nby $3$ twice.\n\nGiven the initial values of $x$, $y$, and $k$, Maxim wants to know\nwhat is the final value of $x$.",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10^{4}$) \u2014 the number of test cases. Then follows\nthe description of the test cases.\n\nThe only line of each test case contains three integers $x$, $y$, and\n$k$ ($1 \\le x, k \\le 10^{9}$, $2 \\le y \\le 10^{9}$) \u2014 the initial\nvariable, constant and the number of operations.",
        "output": "For each test case, output a single integer \u2014 the number obtained after\napplying $k$ operations.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>13\n1 3 1\n2 3 1\n24 5 5\n16 3 2\n2 2 1\n1337 18 1\n1 2 144133\n12345678 3 10\n998244353 2 998244353\n998244353 123456789 998244352\n998244354 998241111 998244352\n998244355 2 9982443\n1000000000 1000000000 1000000000\n</pre></td>\n    <td><pre>2\n1\n1\n2\n3\n1338\n1\n16936\n1\n21180097\n6486\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there is only one operation applied to $x = 1$,\nresulting in $x$ becoming $2$.\n\nIn the second test case, for $x = 2$, within one operation, one is added\nto $x$ and it's divided by $y = 3$, resulting in $x$ becoming\n$1$.\n\nIn the third test case, $x$ changes as follows:\n\n  * After the first operation, $x = 1$, because $24 + 1 = 25$ and $25$ is divisible by $y = 5$ twice within one operation. \n  * After the second operation, $x = 2$. \n  * After the third operation, $x = 3$. \n  * After the fourth operation, $x = 4$. \n  * After the fifth operation, $x = 1$."
    },
    {
        "problem_id": "1982C",
        "url": "https://codeforces.com/problemset/problem/1982/C",
        "title": "Boring Day",
        "rating": 1200,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "On another boring day, Egor got bored and decided to do something. But since\nhe has no friends, he came up with a game to play.\n\nEgor has a deck of $n$ cards, the $i$-th card from the top has a\nnumber $a_i$ written on it. Egor wants to play a certain number of rounds\nuntil the cards run out. In each round, he takes a non-zero number of cards\nfrom the top of the deck and finishes the round. If the sum of the numbers on\nthe cards collected during the round is between $l$ and $r$,\ninclusive, the round is won; otherwise, it is lost.\n\nEgor knows by heart the order of the cards. Help Egor determine the maximum\nnumber of rounds he can win in such a game. Note that Egor is not required to\nwin rounds consecutively.",
        "input": "Each test consists of several test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10^{4}$) \u2014 the number of test cases. This is\nfollowed by a description of the test cases.\n\nThe first line of each test case contains three integers $n$, $l$, and\n$r$ ($1 \\le n \\le 10^{5}$, $1 \\le l \\le r \\le 10^9$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the numbers on the cards from top\nto bottom.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed\n$2 \\cdot 10^{5}$.",
        "output": "For each test case, output a single number \u2014 the maximum number of rounds Egor\ncan win.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n5 3 10\n2 1 11 3 7\n10 1 5\n17 8 12 11 7 11 21 13 10 8\n3 4 5\n3 4 2\n8 12 25\n10 7 5 13 8 9 12 7\n2 3 3\n5 2\n9 7 9\n2 10 5 1 3 7 6 2 3\n1 8 10\n9\n5 5 6\n1 4 2 6 4\n</pre></td>\n    <td><pre>3\n0\n1\n4\n0\n3\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Egor can win $3$ rounds:\n\n  * In the first round, take the top $2$ cards with values $2$ and $1$ and win, as their sum is $3$. After this, the deck will look like this: $[11, 3, 7]$. \n  * In the second round, take the top card and lose, as its value $11$ is greater than $r = 10$. After this, the deck will look like this: $[3, 7]$. \n  * In the third round, take the top card with value $3$ and win. After this, the deck will look like this: $[7]$. \n  * After this, in the fourth round, Egor only has to take the last card in the deck with value $7$ and win again. \n\nIn the second test case, Egor cannot win any rounds, no matter how hard he\ntries.\n\nIn the third test case, you can take one card in each round, then the first\nand third rounds will be losing, and the second round will be winning.\n\nIn the fourth test case, you can take two cards in each round and always win."
    },
    {
        "problem_id": "1982D",
        "url": "https://codeforces.com/problemset/problem/1982/D",
        "title": "Beauty of the mountains",
        "rating": 1700,
        "tags": [
            "brute force",
            "data structures",
            "implementation",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Nikita loves mountains and has finally decided to visit the Berlyand mountain\nrange! The range was so beautiful that Nikita decided to capture it on a map.\nThe map is a table of $n$ rows and $m$ columns, with each cell\ncontaining a non-negative integer representing the height of the mountain.\n\nHe also noticed that mountains come in two types:\n\n  * With snowy caps. \n  * Without snowy caps. \n\nNikita is a very pragmatic person. He wants the sum of the heights of the\nmountains with snowy caps to be equal to the sum of the heights of the\nmountains without them. He has arranged with the mayor of Berlyand, Polikarp\nPolikarpovich, to allow him to transform the landscape.\n\nNikita can perform transformations on submatrices of size $k \\times k$ as\nfollows: he can add an integer constant $c$ to the heights of the\nmountains within this area, but the type of the mountain remains unchanged.\nNikita can choose the constant $c$ independently for each transformation.\nNote that $c$ can be negative.\n\nBefore making the transformations, Nikita asks you to find out if it is\npossible to achieve equality of the sums, or if it is impossible. It doesn't\nmatter at what cost, even if the mountains turn into canyons and have negative\nheights.\n\nIf only one type of mountain is represented on the map, then the sum of the\nheights of the other type of mountain is considered to be zero.",
        "input": "Each test consists of several test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10^{4}$) \u2014 the number of test cases. This is\nfollowed by a description of test cases.\n\nThe first line of each test case contains three integers $n, m, k$ ($1\n\\le n, m \\le 500, 1 \\le k \\le min(n, m)$).\n\nThe next $n$ lines of each test case contain $m$ integers $a_{i\nj}$ ($0 \\le a_{i j} \\le 10^{9}$) \u2014 the initial heights of the mountains.\n\nThe next $n$ binary strings of length $m$ for each test case determine\nthe type of mountain, '$0$' \u2014 with snowy caps, '$1$' \u2014 without them.\n\nIt is guaranteed that the sum of $n \\cdot m$ for all test cases does not\nexceed $250\\,000$.",
        "output": "For each test case, output \"YES\" without quotes if it is possible to equalize\nthe sums of the mountain heights, otherwise output \"NO\" without quotes. You\ncan output each letter in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n3 3 2\n7 11 3\n4 2 3\n0 1 15\n100\n010\n000\n4 4 3\n123 413 24 233\n123 42 0 216\n22 1 1 53\n427 763 22 6\n0101\n1111\n1010\n0101\n3 3 2\n2 1 1\n1 1 2\n1 5 4\n010\n101\n010\n3 3 2\n2 1 1\n1 1 2\n1 5 3\n010\n101\n010\n3 4 3\n46 49 50 1\n19 30 23 12\n30 25 1 46\n1000\n0100\n0010\n5 4 4\n39 30 0 17\n22 42 30 13\n10 44 46 35\n12 19 9 39\n21 0 45 40\n1000\n1111\n0011\n0111\n1100\n2 2 2\n3 4\n6 7\n00\n00\n2 2 2\n0 0\n2 0\n01\n00\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nYES\nNO\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The mountain array from the first test case looks like this:\n\n![](CDN_BASE_URL/4068fa4645530e8633aa85d1532f2872)\n\nInitially, the sum of the heights of the mountains with snowy caps is $11 +\n3 + 4 + 3 + 0 + 1 + 15 = 37$, and without them is $7 + 2 = 9$.\n\nTo equalize these sums, we can perform two transformations:\n\nFirst transformation:\n\n![](CDN_BASE_URL/f3df416c8c27804955f5a43547920ecc)\n\nNote that the constant $c$ can be negative.\n\nAfter the first transformation, the mountain array looks like this:\n\n![](CDN_BASE_URL/be4be3fe9f25d0c3cdc2cd30c29dfa59)\n\nSecond transformation:\n\n![](CDN_BASE_URL/b9da8ea7d124655cdf30018c6bb3968c)\n\nAs a result, the mountain array looks like this:\n\n![](CDN_BASE_URL/761aa693d1bfeceaebaeb108d5584b76)\n\nThe sum of the heights of the mountains with snowy caps is $17 + 9 + 9 - 16\n- 20 - 19 + 15 = -5$, and without them is $7 - 12 = -5$, thus the answer\nis YES."
    },
    {
        "problem_id": "1982E",
        "url": "https://codeforces.com/problemset/problem/1982/E",
        "title": "Number of k-good subarrays",
        "rating": 2300,
        "tags": [
            "bitmasks",
            "brute force",
            "combinatorics",
            "divide and conquer",
            "dp",
            "math",
            "meet-in-the-middle"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Let $bit(x)$ denote the number of ones in the binary representation of a\nnon-negative integer $x$.\n\nA subarray of an array is called $k$-good if it consists only of numbers\nwith no more than $k$ ones in their binary representation, i.e., a\nsubarray $(l, r)$ of array $a$ is good if for any $i$ such that\n$l \\le i \\le r$ condition $bit(a_{i}) \\le k$ is satisfied.\n\nYou are given an array $a$ of length $n$, consisting of consecutive\nnon-negative integers starting from $0$, i.e., $a_{i} = i$ for $0\n\\le i \\le n - 1$ (in $0$-based indexing). You need to count the number\nof $k$-good subarrays in this array.\n\nAs the answer can be very large, output it modulo $10^{9} + 7$.",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10^{4}$) \u2014 the number of test cases. The following\nlines describe the test cases.\n\nThe single line of each test case contains two integers $n$, $k$ ($1\n\\le n \\le 10^{18}, 1 \\le k \\le 60$).",
        "output": "For each test case, output a single integer \u2014 the number of $k$-good\nsubarrays modulo $10^{9} + 7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n6 1\n16 2\n1 1\n3 1\n31 3\n14 1\n1337 5\n100000 20\n795569939321040850 56\n576460752303423268 59\n</pre></td>\n    <td><pre>7\n35\n1\n6\n155\n8\n7323\n49965\n741136395\n66679884\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case $a = [0, 1, 2, 3, 4, 5]$, $k = 1$.\n\nTo find the answer, let's write all the numbers in binary representation:\n\n$$a = [\\color{green}{000}, \\color{green}{001}, \\color{green}{010},\n\\color{red}{011}, \\color{green}{100}, \\color{red}{101}]$$\n\nFrom this, it can be seen that the numbers $3$ and $5$ have $2 \\ge\n(k = 1)$ ones in their binary representation, so the answer should include\nall subarrays that do not contain either $3$ or $5$, which are the\nsubarrays (in $0$-based indexing): ($0$, $0$), ($0$, $1$),\n($0$, $2$), ($1$, $1$), ($1$, $2$), ($2$,\n$2$), ($4$, $4$)."
    },
    {
        "problem_id": "1982F",
        "url": "https://codeforces.com/problemset/problem/1982/F",
        "title": "Sorting Problem Again",
        "rating": 2600,
        "tags": [
            "binary search",
            "data structures",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2500,
        "memory_limit_mb": 256,
        "description": "You have an array $a$ of $n$ elements. There are also $q$\nmodifications of the array. Before the first modification and after each\nmodification, you would like to know the following:\n\nWhat is the minimum length subarray that needs to be sorted in non-decreasing\norder in order for the array $a$ to be completely sorted in non-decreasing\norder?\n\nMore formally, you want to select a subarray of the array $(l, r)$ with\nthe minimum value of $r - l + 1$. After that, you will sort the elements\n$a_{l}, a_{l + 1}, \\ldots, a_{r}$ and want the condition $a_{i} \\le a_{i\n+ 1}$ to hold for all $1 \\le i < n$. If the array is already sorted in\nnon-decreasing order, then $l$ and $r$ should be considered as equal\nto $-1$.\n\nNote that finding such $(l, r)$ does not change the array in any way. The\nmodifications themselves take the form: assign $a_{pos} = x$ for given\n$pos$ and $x$.",
        "input": "Each test consists of several test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10$) \u2014 the number of test cases. Then follows the\ndescription of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 5 \\cdot 10^{5}$).\n\nThe second line of each test case contains $n$ integers $a_{i}$ ($0\n\\le |a_{i}| \\le 10^{9}$) \u2014 the initial elements of the array $a$.\n\nThe third line of each test case contains a number $q$ ($0 \\le q \\le 5\n\\cdot 10^{5}$) \u2014 the number of modifications to the array.\n\nThe following $q$ lines of each test case contain two integers\n$pos_{i}$ ($1 \\le pos_{i} \\le n$) and $val_{i}$ ($0 \\le\n|val_{i}| \\le 10^{9}$) \u2014 this means that for the $i$-th modification,\n$a_{pos_{i}}$ is assigned the value $val_{i}$.\n\nIt is guaranteed that the sum of $n$ and the sum of $q$ for all test\ncases does not exceed $5 \\cdot 10^{5}$.",
        "output": "For each test case, output $q + 1$ lines. Each line should contain $2$\nintegers $l, r$ \u2014 the boundaries of the minimum subarray, such that\nsorting it will make the array $a$ completely sorted. If $a$ is\nalready sorted, then output $l = -1$, $r = -1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n5\n2 2 3 4 5\n3\n2 1\n4 1\n1 1\n5\n1 2 3 4 5\n9\n1 4\n2 3\n5 2\n3 1\n1 1\n5 1\n4 1\n3 1\n2 1\n</pre></td>\n    <td><pre>-1 -1\n1 2\n1 4\n3 4\n-1 -1\n1 3\n1 3\n1 5\n1 5\n2 5\n2 5\n2 5\n2 5\n-1 -1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Let's consider the first test case:\n\n  * Initially, the array is sorted in non-decreasing order: $[2, 2, 3, 4, 5]$ \n  * After the first query, the array looks like this: $[\\color{red}{2}, \\color{red}{1}, 3, 4, 5]$. \n  * After the second query, the array looks like this: $[\\color{red}{2}, \\color{red}{1}, \\color{red}{3}, \\color{red}{1}, 5]$. \n  * After the third query, the array looks like this: $[1, 1, \\color{red}{3}, \\color{red}{1}, 5]$. \n\nThe red segments indicate the subarrays that need to be sorted in order for\nthe entire array to be sorted in non-decreasing order."
    },
    {
        "problem_id": "1983A",
        "url": "https://codeforces.com/problemset/problem/1983/A",
        "title": "Array Divisibility",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "An array of integers $a_1,a_2,\\cdots,a_n$ is beautiful subject to an\ninteger $k$ if it satisfies the following:\n\n  * The sum of $a_{j}$ over all $j$ such that $j$ is a multiple of $k$ and $1 \\le j \\le n $, itself, is a multiple of $k$. \n  * More formally, if $\\sum_{k | j} a_{j}$ is divisible by $k$ for all $1 \\le j \\le n$ then the array $a$ is beautiful subject to $k$. Here, the notation ${k|j}$ means $k$ divides $j$, that is, $j$ is a multiple of $k$. \n\nGiven $n$, find an array of positive nonzero integers, with each element\nless than or equal to $10^5$ that is beautiful subject to all $1 \\le k\n\\le n$.\n\nIt can be shown that an answer always exists.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 100$). The description of the test cases\nfollows.\n\nThe first and only line of each test case contains a single integer $n$\n($1 \\le n \\le 100$) \u2014 the size of the array.",
        "output": "For each test case, print the required array as described in the problem\nstatement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n6\n7\n</pre></td>\n    <td><pre>4 22 18\n10 6 15 32 125 54\n23 18 27 36 5 66 7</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second test case, when $n = 6$, for all integers $k$ such that\n$1 \\le k \\le 6$, let $S$ be the set of all indices of the array that\nare divisible by $k$.\n\n  * When $k = 1$, $S = \\\\{1, 2, 3,4,5,6\\\\}$ meaning $a_1+a_2+a_3+a_4+a_5+a_6=242$ must be divisible by $1$. \n  * When $k = 2$, $S = \\\\{2,4,6\\\\}$ meaning $a_2+a_4+a_6=92$ must be divisible by $2$. \n  * When $k = 3$, $S = \\\\{3,6\\\\}$ meaning $a_3+a_6=69$ must divisible by $3$. \n  * When $k = 4$, $S = \\\\{4\\\\}$ meaning $a_4=32$ must divisible by $4$. \n  * When $k = 5$, $S = \\\\{5\\\\}$ meaning $a_5=125$ must divisible by $5$. \n  * When $k = 6$, $S = \\\\{6\\\\}$ meaning $a_6=54$ must divisible by $6$. \n\nThe array $a = [10, 6, 15, 32, 125, 54]$ satisfies all of the above\nconditions. Hence, $a$ is a valid array."
    },
    {
        "problem_id": "1983B",
        "url": "https://codeforces.com/problemset/problem/1983/B",
        "title": "Corner Twist",
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given two grids of numbers $a$ and $b$, with $n$ rows and\n$m$ columns. All the values in the grid are $0$, $1$ or $2$.\n\nYou can perform the following operation on $a$ any number of times:\n\n  * Pick any subrectangle in the grid with length and width $\\ge 2$. You are allowed to choose the entire grid as a subrectangle. \n  * The subrectangle has four corners. Take any pair of diagonally opposite corners of the chosen subrectangle and add $1$ to their values modulo $3$. \n  * For the pair of corners not picked, add $2$ to their values modulo $3$. \n\nNote that the operation only changes the values of the corners of the picked\nsubrectangle.\n\nIs it possible to convert the grid $a$ into grid $b$ by applying the\nabove operation any number of times (possibly zero)?",
        "input": "The first line contains an integer $t$, the number of testcases ($1 \\le\nt \\le 250$).\n\nFor each testcase:\n\nThe first line contains two integers $n$ and $m$, the number of rows\nand columns in the grid ($2 \\le n,m \\le 500$).\n\nEach of the next n lines contain m characters \u2014 the $j$-th character of\nthe $i$-th line represents $a_{i,j}$.\n\nEach of the next n lines contain m characters \u2014 the $j$-th character of\nthe $i$-th line represents $b_{i,j}$ ($0 \\le a_{i,j}, b_{i,j} \\le\n2$).\n\nIt is guaranteed that the sum of $n$ over all test cases and the sum of\n$m$ over all test cases do not exceed $500$.",
        "output": "For each test case print \"YES\" (without quotes) if it is possible to convert\ngrid $a$ into grid $b$ and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n3 3\n000\n000\n000\n111\n111\n111\n4 4\n0000\n0000\n0000\n0000\n2100\n1200\n0012\n0021\n4 4\n1020\n1200\n1210\n0000\n0000\n1200\n2200\n0000\n3 3\n012\n012\n012\n010\n111\n011\n8 8\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n10000000\n00000000\n01200000\n02010000\n00102000\n00020100\n00001020\n00000210\n10000000\n2 7\n0000000\n0000000\n2220111\n0111222\n2 7\n0000000\n0100010\n2220111\n1210202\n</pre></td>\n    <td><pre>YES\nYES\nYES\nNO\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, grid $a$ can be converted into $b$ in the\nfollowing manner:\n\n$\\begin{matrix}\\fbox{0} & 0 & \\fbox{0}\\\\\\ 0 & 0 & 0\\\\\\ \\fbox{0} & 0 &\n\\fbox{0}\\end{matrix} \\Rightarrow \\begin{matrix}1 & 0 & 2\\\\\\ 0 & \\fbox{0} &\n\\fbox{0}\\\\\\ 2 & \\fbox{0} & \\fbox{1}\\end{matrix} \\Rightarrow \\begin{matrix}1 &\n0 & 2\\\\\\ \\fbox{0} & \\fbox{1} & 2\\\\\\ \\fbox{2} & \\fbox{2} & 2\\end{matrix}\n\\Rightarrow \\begin{matrix}1 & \\fbox{0} & \\fbox{2}\\\\\\ 1 & 0 & 2\\\\\\ 1 & \\fbox{0}\n& \\fbox{2}\\end{matrix} \\Rightarrow \\begin{matrix}1 & 1 & 1\\\\\\ 1 & \\fbox{0} &\n\\fbox{2}\\\\\\ 1 & \\fbox{2} & \\fbox{0}\\end{matrix} \\Rightarrow \\begin{matrix}1 &\n1 & 1\\\\\\ 1 & 1 & 1\\\\\\ 1 & 1 & 1\\end{matrix}$\n\nHere, in each operation, the top-right and bottom-left corners highlighted by\na box are incremented by $2$ modulo $3$, while the top-left and\nbottom-right corners are incremented by $1$ modulo $3$.\n\nIn the fourth testcase, it can be proven that it is not possible to convert\ngrid $a$ into grid $b$ using the above-mentioned operations any number\nof times."
    },
    {
        "problem_id": "1983C",
        "url": "https://codeforces.com/problemset/problem/1983/C",
        "title": "Have Your Cake and Eat It Too",
        "rating": 1400,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alice, Bob and Charlie want to share a rectangular cake cut into $n$\npieces. Each person considers every piece to be worth a different value. The\n$i$-th piece is considered to be of value $a_i$ by Alice, $b_i$ by\nBob and $c_i$ by Charlie.\n\nThe sum over all $a_i$, all $b_i$ and all $c_i$ individually is\nthe same, equal to $tot$.\n\nGiven the values of each piece of the cake for each person, you need to give\neach person a contiguous slice of cake. In other words, the indices at the\nleft and right ends of these subarrays (the slices given to each person) can\nbe represented as $(l_a, r_a)$, $(l_b, r_b)$ and $(l_c, r_c)$\nrespectively for Alice, Bob and Charlie. The division needs to satisfy the\nfollowing constraints:\n\n  * No piece is assigned to more than one person, i.e., no two subarrays among $[l_a,\\ldots,r_a]$, $[l_b, \\ldots, r_b]$ and $[l_c, \\ldots, r_c]$ intersect.\n  * $ \\sum_{i = l_a}^{r_a} a_i, \\sum_{i = l_b}^{r_b} b_i, \\sum_{i = l_c}^{r_c} c_i \\geq \\lceil \\frac{tot}{3} \\rceil$. \n\nHere, the notation $\\lceil \\frac{a}{b} \\rceil$ represents ceiling\ndivision. It is defined as the smallest integer greater than or equal to the\nexact division of $a$ by $b$. In other words, it rounds up the\ndivision result to the nearest integer. For instance $\\lceil \\frac{10}{3}\n\\rceil = 4$ and $\\lceil \\frac{15}{3} \\rceil = 5$.",
        "input": "The first line contains an integer $t$, the number of testcases, ($1 \\le\nt \\le 10^4$)\n\nFor each testcase:\n\nThe first line contains the integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$).\n\nThe following three lines contain $n$ integers each:\n\nOne line with $n$ integers $a_1, a_2, \\ldots, a_n$ represents the\nvalues for Alice ($1 \\le a_i \\le 10^6$).\n\nThe next line with $n$ integers $b_1, b_2, \\ldots, b_n$ represents the\nvalues for Bob ($1 \\le b_i \\le 10^6$).\n\nThe next line with $n$ integers $c_1, c_2, \\ldots, c_n$ represents the\nvalues for Charlie ($1 \\le c_i \\le 10^6$).\n\nIt is guaranteed that $ \\sum_{i = 1}^{n} a_i = \\sum_{i = 1}^{n} b_i =\n\\sum_{i = 1}^{n} c_i$.\n\nThe sum of $n$ over all testcases does not exceed $2 \\cdot 10^5$.",
        "output": "For each testcase, output $-1$ if the required condition is impossible.\n\nOtherwise, output six numbers \u2013 $l_a, r_a, l_b, r_b, l_c, r_c$, the\nrespective starting and ending indices ($1$-indexed) of the subarrays for\nAlice, Bob and Charlie, respectively.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n5\n5 1 1 1 1\n1 1 5 1 1\n1 1 1 1 5\n6\n1 2 3 4 5 6\n5 6 1 2 3 4\n3 4 5 6 1 2\n4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n5\n5 10 5 2 10\n9 6 9 7 1\n10 7 10 2 3\n3\n4 5 2\n6 1 4\n1 8 2\n3\n10 4 10\n8 7 9\n10 4 10\n7\n57113 65383 19795 53580 74452 3879 23255\n12917 16782 89147 93107 27365 15044 43095\n33518 63581 33565 34112 46774 44151 41756\n6\n6 3 1 8 7 1\n10 2 6 2 2 4\n10 9 2 1 2 2\n5\n5 5 4 5 5\n1 6 3 8 6\n2 4 1 9 8\n10\n1 1 1 1 1001 1 1 1001 1 1\n1 1 1 1 1 1 2001 1 1 1\n1 1 1 1 1 1001 1 1 1 1001\n</pre></td>\n    <td><pre>1 1 2 3 4 5 \n5 6 1 2 3 4 \n-1\n-1\n1 1 3 3 2 2 \n-1\n1 2 3 4 5 7 \n3 6 1 1 2 2 \n1 2 3 4 5 5 \n1 5 6 7 8 10 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, the sum of either of the three arrays is $9$. Each\nperson needs a cake slice corresponding to a subarray with a total value of at\nleast $\\lceil \\frac{9}{3} \\rceil = 3$.\n\nIf we assign the subarray ($1$,$1$) to Alice, its total value to her\nis $5$, which is $\\ge 3$; the subarray ($2$,$3$) to Bob, its\ntotal value to him is $1 + 5 = 6$, which is $\\ge 3$; and the subarray\n($4$,$5$) to Charlie, its total value to him $1 + 5 = 6$, which is\nalso $\\ge 3$. Each person gets their own separate pieces of the cake, and\nno piece is common to two or more people.\n\nIt can be shown that for the third test case, it is not possible to give\nslices of the cake in a way that satisfies the given constraints."
    },
    {
        "problem_id": "1983D",
        "url": "https://codeforces.com/problemset/problem/1983/D",
        "title": "Swap Dilemma",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "data structures",
            "divide and conquer",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Given two arrays of distinct positive integers $a$ and $b$ of length\n$n$, we would like to make both the arrays the same. Two arrays $x$\nand $y$ of length $k$ are said to be the same when for all $1 \\le i\n\\le k$, $x_i = y_i$.\n\nNow in one move, you can choose some index $l$ and $r$ in $a$\n($l \\le r$) and swap $a_l$ and $a_r$, then choose some $p$ and\n$q$ ($p \\le q$) in $b$ such that $r-l=q-p$ and swap $b_p$\nand $b_q$.\n\nIs it possible to make both arrays the same?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 2 \\cdot 10^4$). The description of the\ntest cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 10^5$) \u2014 the length of the arrays $a$ and $b$.\n\nThe second line of each test case contains $n$ distinct integers\n$a_1,a_2,a_3,\\ldots,a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$) \u2014 the integers\nin the array $a$.\n\nThe third line of each test case contains $n$ distinct integers\n$b_1,b_2,b_3,\\ldots,b_n$ ($1 \\le b_i \\le 2 \\cdot 10^5$) \u2014 the integers\nin the array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each testcase, print \"YES\" if the arrays $a$ and $b$ can be made\nthe same. Otherwise, print \"NO\". can output the answer in any case (upper or\nlower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be\nrecognized as positive responses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n4\n1 2 3 4\n1 2 3 4\n5\n1 3 4 2 5\n7 1 2 5 4\n4\n1 2 3 4\n4 3 2 1\n3\n1 2 3\n1 3 2\n5\n1 5 7 1000 4\n4 1 7 5 1000\n3\n1 4 2\n1 3 2\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nNO\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, you don't need to perform any operations since the\narrays are same.\n\nIn the second testcase, it can be proven there exists no way to make the\narrays same.\n\nIn the third testcase, one of the ways to make the arrays same is to first\nchoose $l=1$, $r=3$, $p=1$, $q=3$ then choose $l=1$,\n$r=2$, $p=3$, $q=4$."
    },
    {
        "problem_id": "1983E",
        "url": "https://codeforces.com/problemset/problem/1983/E",
        "title": "I Love Balls",
        "rating": 2300,
        "tags": [
            "combinatorics",
            "math",
            "probabilities"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alice and Bob are playing a game. There are $n$ balls, out of which\n$k$ are special. Each ball has a value associated with it.\n\nThe players play turn by turn. In each turn, the player randomly picks a ball\nand adds the value of the ball to their score, which is $0$ at the\nbeginning of the game. The selected ball is removed from the game. If the ball\nwas special, the same player takes the next turn if at least one ball is\nremaining. If the ball picked was not special, the next player plays their\nturn.\n\nThey play this game until no balls are remaining in the game. Alice plays\nfirst.\n\nFind the expected score that both the players have at the end of the game\nmodulo $10^9+7$.\n\nFormally, let $M = 10^9+7$. It can be shown that the answer can be\nexpressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and\n$q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer\nequal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer\n$x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.",
        "input": "There are multiple test cases. The first line of the input contains an integer\n$t$, the number of test cases ($1 \\le t \\le 2 \\cdot 10^5$).\n\nEach test case description is on a new line. The first line of the test case\ncontains two integers $n$ and $k$ in the respective order separated by\na space ($1 \\le k \\le n \\le 4 \\cdot 10^5$).\n\nThe second line of the test case contains $n$ integers: $v_1, v_2,\n\\ldots, v_n$, the value for each ball separated by spaces. The first $k$\nballs are special ($1 \\le v_i \\le 10^7$).\n\nThe sum of $n$ over all test cases does not exceed $5 \\cdot 10^5$.",
        "output": "Output two integers per test case in a new line, the expected score of Alice\nand the expected score of Bob modulo $10^9+7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n5 2\n10 20 5 15 25\n</pre></td>\n    <td><pre>45 30\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1 1\n732507\n2 2\n5817860 5398510\n5 1\n2122894 4951549 2750585 7821535 3214167\n8 4\n1405323 5069867 6883092 6972029 328406 2478975 7628890 9973340\n4 2\n9662050 3566134 3996473 9872255\n</pre></td>\n    <td><pre>732507 0\n11216370 0\n810642660 210218077\n722402997 318336932\n349086489 678010430\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 3\n1095611 8219204 7773462\n2 1\n8176490 2774103\n3 1\n9178636 5138057 3367761\n12 9\n7597698 6843019 2298534 1522386 4969588 1340345 3967362 9152890 6689668 9986080 4745473 7407325\n10 5\n6986368 2397882 5804127 6980694 3740836 3215836 5195724 3179261 4136769 4544231\n</pre></td>\n    <td><pre>17088277 0\n6862348 4088245\n677038671 340645790\n36949997 29570371\n725118051 321063684\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Alice's expected score is $45$, and Bob's is\n$30$ at the end of the game."
    },
    {
        "problem_id": "1983F",
        "url": "https://codeforces.com/problemset/problem/1983/F",
        "title": "array-value",
        "rating": 2500,
        "tags": [
            "binary search",
            "bitmasks",
            "data structures",
            "greedy",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "You have an array of non-negative integers $a_1, a_2, \\ldots, a_n$.\n\nThe value of a sub-array of length $\\ge 2$, $a[l, r] = [a_l, a_{l+1},\n\\ldots, a_r]$ is the minimum value of $a_i \\oplus a_j$ such that $l\n\\le i < j \\le r$, where $\\oplus$ is the xor (exclusive-or) operator.\n\nYou have to find the $k$-th smallest value over all sub-arrays of length\n$\\ge 2$.",
        "input": "The first line of the input contains multiple test cases $t$ ($1 \\le t\n\\le 2 \\cdot 10^4$).\n\nThe first line of each test case contains integer numbers $n$ and $k$\n($2 \\le n \\le 10^5$, $1 \\le k \\le \\frac{n\\cdot(n-1)}{2}$).\n\nThe second line of the input contains $n$ non-negative integer numbers\n$a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array itself.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "Print the $k$-th smallest value obtained over all subarrays of length at\nleast $2$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5 2\n1 2 3 4 5\n2 1\n4 3\n4 6\n1 2 4 8\n5 9\n1 2 3 4 5\n</pre></td>\n    <td><pre>1\n7\n12\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, we have subarrays with their smallest exclusive-or pair\nas:\n\n$[1,2]: 3$\n\n$[2,3]: 1$\n\n$[3,4]: 7$\n\n$[4,5]: 1$\n\n$[1,2,3]: 1$\n\n$[2,3,4]: 1$\n\n$[3,4,5]: 1$\n\n$[1,2,3,4]: 1$\n\n$[2,3,4,5]: 1$\n\n$[1,2,3,4,5]: 1$\n\nThe sorted order would be: $1, 1, 1, 1, 1, 1, 1, 1, 3, 7$. Therefore, the\nsecond smallest element would be $1$."
    },
    {
        "problem_id": "1983G",
        "url": "https://codeforces.com/problemset/problem/1983/G",
        "title": "Your Loss",
        "rating": 3000,
        "tags": [
            "bitmasks",
            "brute force",
            "dp",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "You are given a tree with $n$ nodes numbered from $1$ to $n$,\nalong with an array of size $n$. The value of $i$-th node is\n$a_{i}$. There are $q$ queries. In each query, you are given 2 nodes\nnumbered as $x$ and $y$.\n\nConsider the path from the node numbered as $x$ to the node numbered as\n$y$. Let the path be represented by $x = p_0, p_1, p_2, \\ldots, p_r =\ny$, where $p_i$ are the intermediate nodes. Compute the sum of\n$a_{p_i}\\oplus i$ for each $i$ such that $0 \\le i \\le r$ where\n$\\oplus$ is the [XOR](https://en.wikipedia.org/wiki/Exclusive_or)\noperator.\n\nMore formally, compute $$\\sum_{i =0}^{r} a_{p_i}\\oplus i$$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases. Each test case contains several sets of input data.\n\nThe first line of each set of input data contains a single integer $n$\n($1 \\le n \\le 5 \\cdot 10^5$) \u2014 the number of nodes.\n\nThe next $n-1$ lines of each set of input data contain $2$ integers,\n$u$ and $v$ representing an edge between the node numbered $u$ and\nthe node numbered $v$. It is guaranteed that $u \\ne v$ and that the\nedges form a tree.\n\nThe next line of each set of input data contains $n$ integers, $a_1,\na_2, \\ldots, a_n$ ($1 \\le a_i \\le 5 \\cdot 10^5$) \u2014 values of the nodes.\n\nThe next line contains a single integer $q$ ($1 \\le q \\le 10^5$) \u2014 the\nnumber of queries.\n\nThe next $q$ lines describe the queries. The $i$-th query contains\n$2$ integers $x$ and $y$ ($1 \\le x,y \\le n$) denoting the\nstarting and the ending node of the path.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$ and sum of $q$ over all test cases does not exceed\n$10^5$.",
        "output": "For each query, output a single number \u2014 the sum from the problem statement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n4\n1 2\n2 3\n3 4\n2 3 6 5\n3\n1 4\n3 4\n1 1\n</pre></td>\n    <td><pre>14\n10\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1984A",
        "url": "https://codeforces.com/problemset/problem/1984/A",
        "title": "Strange Splitting",
        "rating": 800,
        "tags": [
            "constructive algorithms"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Define the range of a non-empty array to be the maximum value minus the\nminimum value. For example, the range of $[1,4,2]$ is $4-1=3$.\n\nYou are given an array $a_1, a_2, \\ldots, a_n$ of length $n \\geq 3$.\nIt is guaranteed $a$ is sorted.\n\nYou have to color each element of $a$ red or blue so that:\n\n  * the range of the red elements does not equal the range of the blue elements, and \n  * there is at least one element of each color. \n\nIf there does not exist any such coloring, you should report it. If there are\nmultiple valid colorings, you can print any of them.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 100$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains an integer $n$ ($3 \\leq n \\leq\n50$) \u2014 the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$). It is guaranteed $a_1 \\leq a_2\n\\leq \\ldots \\leq a_{n - 1} \\leq a_{n}$.",
        "output": "For each test case, if it is impossible to color $a$ to satisfy all the\nconstraints, output $\\texttt{NO}$.\n\nOtherwise, first output $\\texttt{YES}$.\n\nThen, output a string $s$ of length $n$. For $1 \\leq i \\leq n$, if\nyou color $a_i$ red, $s_i$ should be $\\texttt{R}$. For $1 \\leq i\n\\leq n$, if you color $a_i$ blue, $s_i$ should be $\\texttt{B}$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n4\n1 1 2 2\n5\n1 2 3 4 5\n3\n3 3 3\n4\n1 2 2 2\n3\n1 2 2\n3\n1 1 2\n3\n1 9 84\n</pre></td>\n    <td><pre>YES\nRBRR\nYES\nBBRBB\nNO\nYES\nRBBR\nYES\nRRB\nYES\nBRR\nYES\nBRB</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, given the array $[1, 1, 2, 2]$, we can color the\nsecond element blue and the remaining elements red; then the range of the red\nelements $[1, 2, 2]$ is $2-1=1$, and the range of the blue elements\n$[1]$ is $1-1=0$.\n\nIn the second test case, we can color the first, second, fourth and fifth\nelements $[1, 2, 4, 5]$ blue and the remaining elements $[3]$ red.\n\nThe range of the red elements is $3 - 3 = 0$ and the range of the blue\nelements is $5 - 1 = 4$, which are different.\n\nIn the third test case, it can be shown there is no way to color $a = [3, 3,\n3]$ to satisfy the constraints."
    },
    {
        "problem_id": "1984B",
        "url": "https://codeforces.com/problemset/problem/1984/B",
        "title": "Large Addition",
        "rating": 1100,
        "tags": [
            "implementation",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "A digit is large if it is between $5$ and $9$, inclusive. A positive\ninteger is large if all of its digits are large.\n\nYou are given an integer $x$. Can it be the sum of two large positive\nintegers with the same number of digits?",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains a single integer $x$ ($10 \\leq\nx \\leq 10^{18}$).",
        "output": "For each test case, output $\\texttt{YES}$ if $x$ satisfies the\ncondition, and $\\texttt{NO}$ otherwise.\n\nYou can output $\\texttt{YES}$ and $\\texttt{NO}$ in any case (for\nexample, strings $\\texttt{yES}$, $\\texttt{yes}$, and\n$\\texttt{Yes}$ will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>11\n1337\n200\n1393938\n1434\n98765432123456789\n11111111111111111\n420\n1984\n10\n69\n119\n</pre></td>\n    <td><pre>YES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nNO\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we can have $658 + 679 = 1337$.\n\nIn the second test case, it can be shown that no numbers of equal length and\nonly consisting of large digits can add to $200$.\n\nIn the third test case, we can have $696\\,969 + 696\\,969 = 1\\,393\\,938$.\n\nIn the fourth test case, we can have $777 + 657 = 1434$."
    },
    {
        "problem_id": "1984C1",
        "url": "https://codeforces.com/problemset/problem/1984/C1",
        "title": "Magnitude (Easy Version)",
        "rating": 1300,
        "tags": [
            "dp",
            "greedy",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "The two versions of the problem are different. You may want to read both\nversions. You can make hacks only if both versions are solved.\n\nYou are given an array $a$ of length $n$. Start with $c = 0$.\nThen, for each $i$ from $1$ to $n$ (in increasing order) do\nexactly one of the following:\n\n  * Option $1$: set $c$ to $c + a_i$. \n  * Option $2$: set $c$ to $|c + a_i|$, where $|x|$ is the absolute value of $x$. \n\nLet the maximum final value of $c$ after the procedure described above be\nequal to $k$. Find $k$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq\nn \\leq 2 \\cdot 10^5$).\n\nThe second line of each case contains $n$ integers $a_1$, $a_2$,\n$a_3$, $\\ldots$, $a_n$ ($-10^9 \\leq a_i \\leq 10^9$).\n\nThe sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the value of $k$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n4\n10 -9 -3 4\n8\n1 4 3 4 1 4 3 4\n3\n-1 -2 -3\n4\n-1000000000 1000000000 1000000000 1000000000\n4\n1 9 8 4\n</pre></td>\n    <td><pre>6\n24\n6\n4000000000\n22\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, if we set $c$ to its absolute value every time we\nadd to it, we end up with $6$. It can be shown that this is the maximum\nresult.\n\nIn the second test case, taking the absolute value will never change anything,\nso we can just sum the array without doing anything to get $24$.\n\nIn the third test case, it is optimal to wait until the end to set $c$ to\nits absolute value, resulting in an answer of $6$."
    },
    {
        "problem_id": "1984C2",
        "url": "https://codeforces.com/problemset/problem/1984/C2",
        "title": "Magnitude (Hard Version)",
        "rating": 1700,
        "tags": [
            "combinatorics",
            "dp",
            "greedy",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "The two versions of the problem are different. You may want to read both\nversions. You can make hacks only if both versions are solved.\n\nYou are given an array $a$ of length $n$. Start with $c = 0$.\nThen, for each $i$ from $1$ to $n$ (in increasing order) do\nexactly one of the following:\n\n  * Option $1$: set $c$ to $c + a_i$. \n  * Option $2$: set $c$ to $|c + a_i|$, where $|x|$ is the absolute value of $x$. \n\nLet the maximum final value of $c$ after the procedure described above be\nequal to $k$. Find the number of unique procedures that result in $c =\nk$. Two procedures are different if at any index $i$, one procedure\nchose option $1$ and another chose option $2$, even if the value of\n$c$ is equal for both procedures after that turn.\n\nSince the answer may be large, output it modulo $998\\,244\\,353$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq\nn \\leq 2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($-10^9 \\leq a_i \\leq 10^9$).\n\nThe sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the number of unique procedures\nthat result in $c = k$, modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n4\n2 -5 3 -3\n8\n1 4 3 4 1 4 3 4\n3\n-1 -2 -3\n4\n-1000000000 1000000000 1000000000 1000000000\n4\n1 9 8 4\n</pre></td>\n    <td><pre>12\n256\n1\n8\n16\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it can be shown that our maximal final value of\n$c$ is $3$. There are $12$ ways to achieve this because in order\nto get $3$, we have to take absolute value at indices $2$ or $4$,\nor both, resulting in $3$ ways. For the other two indices, it doesn't\nchange the value whether we take absolute value or not, so we have $2 \\cdot\n2 = 4$ ways for them. In total, we have $3 \\cdot 4 = 12$ ways.\n\nIn the second test case, taking the absolute value will never change anything,\nso we can either take absolute value or not, for every index. This gives us\n$2^8 = 256$ possible ways."
    },
    {
        "problem_id": "1984D",
        "url": "https://codeforces.com/problemset/problem/1984/D",
        "title": "''a'' String Problem",
        "rating": 2000,
        "tags": [
            "brute force",
            "hashing",
            "implementation",
            "math",
            "string suffix structures",
            "strings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a string $s$ consisting of lowercase Latin characters. Count\nthe number of nonempty strings $t \\neq$ \"$\\texttt{a}$\" such that it is\npossible to partition$^{\\dagger}$ $s$ into some substrings satisfying\nthe following conditions:\n\n  * each substring either equals $t$ or \"$\\texttt{a}$\", and \n  * at least one substring equals $t$. \n\n$^{\\dagger}$ A partition of a string $s$ is an ordered sequence of\nsome $k$ strings $t_1, t_2, \\ldots, t_k$ (called substrings) such that\n$t_1 + t_2 + \\ldots + t_k = s$, where $+$ represents the concatenation\noperation.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe only line of each test case contains a string $s$ consisting of\nlowercase Latin characters ($2 \\leq |s| \\leq 2 \\cdot 10^5$).\n\nThe sum of $|s|$ over all test cases does not exceed $3 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the number of nonempty strings\n$t \\neq$ \"$\\texttt{a}$\" that satisfy all constraints.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\naaaaa\nbaba\ncabacb\naaabaaa\nbitset\nab\nabbaaaabbb\nyearnineteeneightyfour\n</pre></td>\n    <td><pre>4\n4\n1\n16\n1\n2\n3\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $t$ can be \"$\\texttt{aa}$\",\n\"$\\texttt{aaa}$\", \"$\\texttt{aaaa}$\", or the full string.\n\nIn the second test case, $t$ can be \"$\\texttt{b}$\",\n\"$\\texttt{bab}$\", \"$\\texttt{ba}$\", or the full string.\n\nIn the third test case, the only such $t$ is the full string."
    },
    {
        "problem_id": "1984E",
        "url": "https://codeforces.com/problemset/problem/1984/E",
        "title": "Shuffle",
        "rating": 2400,
        "tags": [
            "dp",
            "greedy",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Two hungry red pandas, Oscar and Lura, have a tree $T$ with $n$ nodes.\nThey are willing to perform the following shuffle procedure on the whole tree\n$T$ exactly once. With this shuffle procedure, they will create a new tree\nout of the nodes of the old tree.\n\n  1. Choose any node $V$ from the original tree $T$. Create a new tree $T_2$, with $V$ as the root. \n  2. Remove $V$ from $T$, such that the original tree is split into one or more subtrees (or zero subtrees, if $V$ is the only node in $T$). \n  3. Shuffle each subtree with the same procedure (again choosing any node as the root), then connect all shuffled subtrees' roots back to $V$ to finish constructing $T_2$. \n\nAfter this, Oscar and Lura are left with a new tree $T_2$. They can only\neat leaves and are very hungry, so please find the maximum number of leaves\nover all trees that can be created in exactly one shuffle.\n\nNote that leaves are all nodes with degree $1$. Thus, the root may be\nconsidered as a leaf if it has only one child.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe first line of every test case contains a single integer $n$ ($2 \\leq\nn \\leq 2 \\cdot 10^5$) \u2014 the number of nodes within the original tree\n$T$.\n\nThe next $n - 1$ lines each contain two integers $u$ and $v$ ($1\n\\leq u, v \\leq n$) \u2014 an edge within the original tree $T$. The given\nedges form a tree.\n\nThe sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the maximum number of leaves\nachievable with exactly one shuffle procedure on the whole tree.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5\n1 2\n1 3\n2 4\n2 5\n5\n1 2\n2 3\n3 4\n4 5\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n10\n9 3\n8 1\n10 6\n8 5\n7 8\n4 6\n1 3\n10 1\n2 7\n</pre></td>\n    <td><pre>4\n3\n5\n6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it can be shown that the maximum number of leaves is\n$4$. To accomplish this, we can start our shuffle with selecting node\n$3$ as the new root.\n\n![](CDN_BASE_URL/038cb83999c75e319cd6897cdfe03b7b) Next, we are left only with\none subtree, in which we can select node $2$ to be the new root of that\nsubtree.  ![](CDN_BASE_URL/85eb09dd4b3b98aa44c0450fc1904edf) This will force\nall $3$ remaining nodes to be leaves, and once we connect them back to our\nnew root, the shuffled subtree looks like this:\n![](CDN_BASE_URL/71ffcc64012b118124db081f8a9493b2) We connect the shuffled\nsubtree back to our new root of our new tree. Our final tree has four leaves\n(including the root), and looks like this:\n![](CDN_BASE_URL/882e22ac95139c8917e71dee39d6a32c)\n\nIn our second test case, we have a line of five nodes. It can be shown that\nthe maximum number of leaves after one shuffle is $3$. We can start off\nwith node $2$, which forces node $1$ to become a leaf. Then, if we\nselect node $4$ on the right side, we will also have nodes $3$ and\n$5$ as leaves.\n\nThe third test case is a star graph with six nodes. The number of leaves\ncannot increase, thus our answer will be $5$ (if we start the shuffling\nwith the original root node)."
    },
    {
        "problem_id": "1984F",
        "url": "https://codeforces.com/problemset/problem/1984/F",
        "title": "Reconstruction",
        "rating": 2500,
        "tags": [
            "brute force",
            "dp",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "There is a hidden array $a_1, a_2, \\ldots, a_n$ of length $n$ whose\nelements are integers between $-m$ and $m$, inclusive.\n\nYou are given an array $b_1, b_2, \\ldots, b_n$ of length $n$ and a\nstring $s$ of length $n$ consisting of the characters\n$\\texttt{P}$, $\\texttt{S}$, and $\\texttt{?}$.\n\nFor each $i$ from $1$ to $n$ inclusive, we must have:\n\n  * If $s_i = \\texttt{P}$, $b_i$ is the sum of $a_1$ through $a_i$. \n  * If $s_i = \\texttt{S}$, $b_i$ is the sum of $a_i$ through $a_n$. \n\nOutput the number of ways to replace all $\\texttt{?}$ in $s$ with\neither $\\texttt{P}$ or $\\texttt{S}$ such that there exists an array\n$a_1, a_2, \\ldots, a_n$ with elements not exceeding $m$ by absolute\nvalue satisfying the constraints given by the array $b_1, b_2, \\ldots,\nb_n$ and the string $s$.\n\nSince the answer may be large, output it modulo $998\\,244\\,353$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^3$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($2 \\leq n \\leq 2 \\cdot 10^3$, $2 \\leq m \\leq 10^{9}$) \u2014 the length of\nthe hidden array $a_1, a_2, \\ldots, a_n$ and the maximum absolute value of\nan element $a_i$.\n\nThe second line of each test case contains a string $s$ of length $n$\nconsisting of characters $\\texttt{P}$, $\\texttt{S}$, and\n$\\texttt{?}$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2,\n\\ldots, b_n$ ($|b_i| \\leq m \\cdot n$).\n\nThe sum of $n$ over all test cases does not exceed $5 \\cdot 10^3$.",
        "output": "For each test case, output a single integer \u2014 the number of ways to replace\nall $\\texttt{?}$ in $s$ with either $\\texttt{P}$ or\n$\\texttt{S}$ that result in the existence of a valid array $a_1, a_2,\n\\ldots, a_n$, modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n4 10\nPSPP\n1 9 8 10\n4 1000000000\n????\n1 1 1 4000000000\n8 1000000000\n?P?SSP?P\n-857095623 -1424391899 -851974476 673437144 471253851 -543483033 364945701 -178537332\n4 7\nPPSS\n4 2 1 3\n9 20\n?????????\n1 2 3 4 5 6 7 8 9\n3 1000000000\nP??\n-145463248 -974068460 -1287458396\n</pre></td>\n    <td><pre>1\n0\n2\n1\n14\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we can see that the following array satisfies all\nconstraints, thus the answer is $1$:\n\n  1. $\\texttt{P}$ \u2014 ${[\\color{red}{\\textbf{1}},3,4,2]}$: sum of $1$. \n  2. $\\texttt{S}$ \u2014 ${[1,\\color{red}{\\textbf{3},4,2}]}$: sum of $9$. \n  3. $\\texttt{P}$ \u2014 ${[\\color{red}{1,3,\\textbf{4}},2]}$: sum of $8$. \n  4. $\\texttt{P}$ \u2014 ${[\\color{red}{1,3,4,\\textbf{2}}]}$: sum of $10$. \n\nIn the second test case, it can be shown that no array $a$ with all\n$|a_i| \\leq m = 10^9$ satisfies all constraints."
    },
    {
        "problem_id": "1984G",
        "url": "https://codeforces.com/problemset/problem/1984/G",
        "title": "Magic Trick II",
        "rating": 3200,
        "tags": [
            "constructive algorithms",
            "implementation",
            "sortings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "The secret behind Oscar's first magic trick has been revealed! Because he\nstill wants to impress Lura, he comes up with a new idea: he still wants to\nsort a permutation $p_1, p_2, \\ldots, p_n$ of $[1, 2, \\ldots, n]$.\n\nThis time, he chooses an integer $k$. He wants to sort the permutation in\nnon-decreasing order using the following operation several times:\n\n  1. Pick a continuous subarray of length $k$ and remove it from $p$. \n  2. Insert the continuous subarray back into $p$ at any position (perhaps, in the very front or the very back). \n\nTo be as impressive as possible, Oscar would like to choose the maximal value\nof $k$ such that he can sort his permutation. Please help him find the\nmaximal $k$ as well as a sequence of operations that will sort the\npermutation. You don't need to minimize the number of operations, but you are\nallowed to use at most $5n^2$ operations.\n\nWe have a proof that, for the maximal $k$ such that you can sort the\npermutation in any number of operations, you can also sort it in at most\n$5n^2$ operations.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^3$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($5 \\leq\nn \\leq 10^3$) \u2014 the length of the permutation.\n\nThe second line of each test case contains a permutation $p_1, p_2, \\ldots,\np_n$ of $[1, 2, \\ldots, n]$.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^3$.",
        "output": "For each test case, first output the chosen value of $k$ on a new line\n($1 \\leq k \\leq n$).\n\nThen, output a single integer $m$ \u2014 the number of operations used ($0\n\\leq m \\leq 5n^2$).\n\nThen, on each of the next $m$ lines, output the operations denoted by two\nintegers $i$ and $j$ ($1 \\leq i, j \\leq n - k + 1$), representing\nan operation where you remove the subarray starting from index $i$ and\nreplace it back into $p$ at index $j$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5\n5 1 2 3 4\n5\n2 3 5 4 1\n6\n1 2 3 4 5 6\n</pre></td>\n    <td><pre>4\n1\n2 1\n3\n2\n1 3\n2 1\n6\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it is enough to move the last four numbers to the\nfront.\n\nIn the second test case, it can be shown that we cannot have $k = 4$ or\n$k = 5$. With $k = 3$, we can move the first three numbers to the end,\nand then the middle three to the front to sort the permutation.\n\nIn the third test case, the permutation is already sorted. We can have $k =\n6$ and use no operations."
    },
    {
        "problem_id": "1984H",
        "url": "https://codeforces.com/problemset/problem/1984/H",
        "title": "Tower Capturing",
        "rating": 3300,
        "tags": [
            "combinatorics",
            "dp",
            "geometry"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "There are $n$ towers at $n$ distinct points $(x_1, y_1), (x_2, y_2),\n\\ldots, (x_n, y_n)$, such that no three are collinear and no four are\nconcyclic. Initially, you own towers $(x_1, y_1)$ and $(x_2, y_2)$,\nand you want to capture all of them. To do this, you can do the following\noperation any number of times:\n\n  * Pick two towers $P$ and $Q$ you own and one tower $R$ you don't own, such that the circle through $P$, $Q$, and $R$ contains all $n$ towers inside of it. \n  * Afterwards, capture all towers in or on triangle $\\triangle PQR$, including $R$ itself. \n\nAn attack plan is a series of choices of $R$ ($R_1, R_2, \\ldots, R_k$)\nusing the above operations after which you capture all towers. Note that two\nattack plans are considered different only if they differ in their choice of\n$R$ in some operation; in particular, two attack plans using the same\nchoices of $R$ but different choices of $P$ and $Q$ are considered\nthe same.\n\nCount the number of attack plans of minimal length. Note that it might not be\npossible to capture all towers, in which case the answer is $0$.\n\nSince the answer may be large, output it modulo $998\\,244\\,353$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 250$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($4 \\leq\nn \\leq 100$) \u2014 the number of towers.\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$ and\n$y_i$ ($-10^4 \\leq x_i, y_i \\leq 10^4$) \u2014 the location of the\n$i$-th tower. Initially, you own towers $(x_1, y_1)$ and $(x_2,\ny_2)$.\n\nAll towers are at distinct locations, no three towers are collinear, and no\nfour towers are concyclic.\n\nThe sum of $n$ over all test cases does not exceed $1000$.",
        "output": "For each test case, output a single integer \u2014 the number of attack plans of\nminimal length after which you capture all towers, modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5\n1 1\n2 5\n3 3\n4 2\n5 4\n6\n1 1\n3 3\n1 2\n2 1\n3 10000\n19 84\n7\n2 7\n-4 -3\n-3 6\n3 1\n-5 2\n1 -4\n-1 7\n</pre></td>\n    <td><pre>1\n0\n10\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there is only one possible attack plan of shortest\nlength, shown below.\n\n![](CDN_BASE_URL/fa2c55e855095283a306e017f03d06af)\n\n  * Use the operation with $P =$ tower $1$, $Q =$ tower $2$, and $R =$ tower $5$. The circle through these three towers contains all towers inside of it, and as a result towers $3$ and $5$ are captured. \n  * Use the operation with $P =$ tower $5$, $Q =$ tower $1$, and $R =$ tower $4$. The circle through these three towers contains all towers inside of it, and as a result tower $4$ is captured. \n\nIn the second case, for example, you can never capture the tower at $(3,\n10\\,000)$."
    },
    {
        "problem_id": "1985A",
        "url": "https://codeforces.com/problemset/problem/1985/A",
        "title": "Creating Words",
        "rating": 800,
        "tags": [
            "implementation",
            "strings"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Matthew is given two strings $a$ and $b$, both of length $3$. He\nthinks it's particularly funny to create two new words by swapping the first\ncharacter of $a$ with the first character of $b$. He wants you to\noutput $a$ and $b$ after the swap.\n\nNote that the new words may not necessarily be different.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 100$)  \u2014 the number of\ntest cases.\n\nThe first and only line of each test case contains two space-separated\nstrings, $a$ and $b$, both of length $3$. The strings only contain\nlowercase Latin letters.",
        "output": "For each test case, after the swap, output $a$ and $b$, separated by a\nspace.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\nbit set\ncat dog\nhot dog\nuwu owo\ncat cat\nzzz zzz\n</pre></td>\n    <td><pre>sit bet\ndat cog\ndot hog\nowu uwo\ncat cat\nzzz zzz\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1985B",
        "url": "https://codeforces.com/problemset/problem/1985/B",
        "title": "Maximum Multiple Sum",
        "rating": 800,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Given an integer $n$, find an integer $x$ such that:\n\n  * $2 \\leq x \\leq n$. \n  * The sum of multiples of $x$ that are less than or equal to $n$ is maximized. Formally, $x + 2x + 3x + \\dots + kx$ where $kx \\leq n$ is maximized over all possible values of $x$.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 100$) \u2014 the number of test\ncases.\n\nEach test case contains a single integer $n$ ($2 \\leq n \\leq 100$).",
        "output": "For each test case, output an integer, the optimal value of $x$. It can be\nshown there is only one unique answer.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3\n15\n</pre></td>\n    <td><pre>3\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For $n = 3$, the possible values of $x$ are $2$ and $3$. The\nsum of all multiples of $2$ less than or equal to $n$ is just $2$,\nand the sum of all multiples of $3$ less than or equal to $n$ is\n$3$. Therefore, $3$ is the optimal value of $x$.\n\nFor $n = 15$, the optimal value of $x$ is $2$. The sum of all\nmultiples of $2$ less than or equal to $n$ is $2 + 4 + 6 + 8 + 10 +\n12 + 14 = 56$, which can be proven to be the maximal over all other possible\nvalues of $x$."
    },
    {
        "problem_id": "1985C",
        "url": "https://codeforces.com/problemset/problem/1985/C",
        "title": "Good Prefixes",
        "rating": 1000,
        "tags": [
            "greedy"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alex thinks some array is good if there exists some element that can be\nrepresented as the sum of all other elements (the sum of all other elements is\n$0$ if there are no other elements). For example, the array\n$[1,6,3,2]$ is good since $1+3+2=6$. Furthermore, the array $[0]$\nis also good. However, the arrays $[1,2,3,4]$ and $[1]$ are not good.\n\nAlex has an array $a_1,a_2,\\ldots,a_n$. Help him count the number of good\nnon-empty prefixes of the array $a$. In other words, count the number of\nintegers $i$ ($1 \\le i \\le n$) such that the length $i$ prefix\n(i.e. $a_1,a_2,\\ldots,a_i$) is good.",
        "input": "The first line of the input contains a single integer $t$ ($1 \\leq t\n\\leq 10^4$) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of elements in the array.\n\nThe second line of each test case contains $n$ integers\n$a_1,a_2,\\ldots,a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the elements of the\narray.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the number of good non-empty\nprefixes of the array $a$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1\n0\n1\n1\n4\n1 1 2 0\n5\n0 1 2 1 4\n7\n1 1 0 3 5 2 12\n7\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 294967296\n10\n0 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 589934592\n</pre></td>\n    <td><pre>1\n0\n3\n3\n4\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the fourth test case, the array has five prefixes:\n\n  * prefix $[0]$ is a good array, as mentioned in the statement; \n  * prefix $[0, 1]$ is not a good array, since $0 \\ne 1$; \n  * prefix $[0, 1, 2]$ is not a good array, since $0 \\ne 1 + 2$, $1 \\ne 0 + 2$ and $2 \\ne 0 + 1$; \n  * prefix $[0, 1, 2, 1]$ is a good array, since $2 = 0 + 1 + 1$; \n  * prefix $[0, 1, 2, 1, 4]$ is a good array, since $4 = 0 + 1 + 2 + 1$. \n\nAs you can see, three of them are good, so the answer is $3$."
    },
    {
        "problem_id": "1985D",
        "url": "https://codeforces.com/problemset/problem/1985/D",
        "title": "Manhattan Circle",
        "rating": 900,
        "tags": [
            "implementation",
            "math"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Given a $n$ by $m$ grid consisting of '.' and '#' characters, there\nexists a whole manhattan circle on the grid. The top left corner of the grid\nhas coordinates $(1,1)$, and the bottom right corner has coordinates\n$(n, m)$.\n\nPoint ($a, b$) belongs to the manhattan circle centered at ($h, k$) if\n$|h - a| + |k - b| < r$, where $r$ is a positive constant.\n\nOn the grid, the set of points that are part of the manhattan circle is marked\nas '#'. Find the coordinates of the center of the circle.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 1000$)  \u2014 the number of\ntest cases.\n\nThe first line of each test case contains $n$ and $m$ ($1 \\leq n\n\\cdot m \\leq 2 \\cdot 10^5$) \u2014 the height and width of the grid,\nrespectively.\n\nThe next $n$ lines contains $m$ characters '.' or '#'. If the\ncharacter is '#', then the point is part of the manhattan circle.\n\nIt is guaranteed the sum of $n \\cdot m$ over all test cases does not\nexceed $2 \\cdot 10^5$, and there is a whole manhattan circle on the grid.",
        "output": "For each test case, output the two integers, the coordinates of the center of\nthe circle.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5 5\n.....\n.....\n..#..\n.....\n.....\n5 5\n..#..\n.###.\n#####\n.###.\n..#..\n5 6\n......\n......\n.#....\n###...\n.#....\n1 1\n#\n5 6\n...#..\n..###.\n.#####\n..###.\n...#..\n2 10\n..........\n...#......\n</pre></td>\n    <td><pre>3 3\n3 3\n4 2\n1 1\n3 4\n2 4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1985E",
        "url": "https://codeforces.com/problemset/problem/1985/E",
        "title": "Secret Box",
        "rating": 1200,
        "tags": [
            "brute force",
            "combinatorics",
            "math"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Ntarsis has a box $B$ with side lengths $x$, $y$, and $z$. It\nlies in the 3D coordinate plane, extending from $(0,0,0)$ to\n$(x,y,z)$.\n\nNtarsis has a secret box $S$. He wants to choose its dimensions such that\nall side lengths are positive integers, and the volume of $S$ is $k$.\nHe can place $S$ somewhere within $B$ such that:\n\n  * $S$ is parallel to all axes. \n  * every corner of $S$ lies on an integer coordinate. \n\n$S$ is magical, so when placed at an integer location inside $B$, it\nwill not fall to the ground.\n\nAmong all possible ways to choose the dimensions of $S$, determine the\nmaximum number of distinct locations he can choose to place his secret box\n$S$ inside $B$. Ntarsis does not rotate $S$ once its side lengths\nare selected.",
        "input": "The first line consists of an integer $t$, the number of test cases ($1\n\\leq t \\leq 2000$). The description of the test cases follows.\n\nThe first and only line of each test case contains four integers $x, y, z$\nand $k$ ($1 \\leq x, y, z \\leq 2000$, $1 \\leq k \\leq x \\cdot y \\cdot\nz$).\n\nIt is guaranteed the sum of all $x$, sum of all $y$, and sum of all\n$z$ do not exceed $2000$ over all test cases.\n\nNote that $k$ may not fit in a standard 32-bit integer data type.",
        "output": "For each test case, output the answer as an integer on a new line. If there is\nno way to select the dimensions of $S$ so it fits in $B$, output\n$0$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n3 3 3 8\n3 3 3 18\n5 1 1 1\n2 2 2 7\n3 4 2 12\n4 3 1 6\n1800 1800 1800 4913000000\n</pre></td>\n    <td><pre>8\n2\n5\n0\n4\n4\n1030301\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, it is optimal to choose $S$ with side lengths\n$2$, $2$, and $2$, which has a volume of $2 \\cdot 2 \\cdot 2 =\n8$. It can be shown there are $8$ ways to put $S$ inside $B$.\n\nThe coordinate with the least $x$, $y$, and $z$ values for each\npossible arrangement of $S$ are:\n\n  1. $(0, 0, 0)$ \n  2. $(1, 0, 0)$ \n  3. $(0, 1, 0)$ \n  4. $(0, 0, 1)$ \n  5. $(1, 0, 1)$ \n  6. $(1, 1, 0)$ \n  7. $(0, 1, 1)$ \n  8. $(1, 1, 1)$ \n\nThe arrangement of $S$ with a coordinate of $(0, 0, 0)$ is depicted\nbelow:\n\n![](CDN_BASE_URL/5dd57f6f246d08830a2230a234fb9d02)\n\nFor the second test case, $S$ with side lengths $2$, $3$, and\n$3$ are optimal."
    },
    {
        "problem_id": "1985F",
        "url": "https://codeforces.com/problemset/problem/1985/F",
        "title": "Final Boss",
        "rating": 1500,
        "tags": [
            "binary search",
            "data structures"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are facing the final boss in your favorite video game. The boss enemy has\n$h$ health. Your character has $n$ attacks. The $i$'th attack\ndeals $a_i$ damage to the boss but has a cooldown of $c_i$ turns,\nmeaning the next time you can use this attack is turn $x + c_i$ if your\ncurrent turn is $x$. Each turn, you can use all attacks that are not\ncurrently on cooldown, all at once. If all attacks are on cooldown, you do\nnothing for the turn and skip to the next turn.\n\nInitially, all attacks are not on cooldown. How many turns will you take to\nbeat the boss? The boss is beaten when its health is $0$ or less.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$)  \u2013 the number of\ntest cases.\n\nThe first line of each test case contains two integers $h$ and $n$\n($1 \\leq h, n \\leq 2 \\cdot 10^5$) \u2013 the health of the boss and the number\nof attacks you have.\n\nThe following line of each test case contains $n$ integers $a_1, a_2,\n..., a_n$ ($1 \\leq a_i \\leq 2 \\cdot 10^5$) \u2013 the damage of your attacks.\n\nThe following line of each test case contains $n$ integers $c_1, c_2,\n..., c_n$ ($1 \\leq c_i \\leq 2 \\cdot 10^5$) \u2013 the cooldown of your\nattacks.\n\nIt is guaranteed that the sum of $h$ and $n$ over all test cases does\nnot exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output an integer, the minimum number of turns required to\nbeat the boss.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n3 2\n2 1\n2 1\n5 2\n2 1\n2 1\n50 3\n5 6 7\n5 6 7\n50 3\n2 2 2\n3 3 3\n90000 2\n200000 200000\n1 1\n100000 1\n1\n200000\n6 7\n3 2 3 2 3 1 2\n6 5 9 5 10 7 7\n21 6\n1 1 1 1 1 1\n5 5 8 10 7 6\n</pre></td>\n    <td><pre>1\n3\n15\n25\n1\n19999800001\n1\n21\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, you can use attacks $1$ and $2$ on the first\nturn, dealing $3$ damage in total, and slaying the boss.\n\nFor the second case, you can beat the boss in $3$ turns by using the\nfollowing attacks:\n\nTurn $1$: Use attacks $1$ and $2$, dealing $3$ damage to the\nboss. The boss now has $2$ health left.\n\nTurn $2$: Use attack $2$, dealing $1$ damage to the boss. The boss\nnow has $1$ health left.\n\nTurn $3$: Use attack $1$, dealing $2$ damage to the boss. The boss\nnow has $-1$ health left. Since its health is less than or equal to\n$0$, you beat the boss.\n\nFor the sixth test case: remember to use 64-bit integers as the answer can get\nlarge."
    },
    {
        "problem_id": "1985G",
        "url": "https://codeforces.com/problemset/problem/1985/G",
        "title": "D-Function",
        "rating": 1600,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Let $D(n)$ represent the sum of digits of $n$. For how many integers\n$n$ where $10^{l} \\leq n < 10^{r}$ satisfy $D(k \\cdot n) = k \\cdot\nD(n)$? Output the answer modulo $10^9+7$.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2013 the\nnumber of test cases.\n\nEach test case contains three integers $l$, $r$, and $k$ ($0\n\\leq l < r \\leq 10^9$, $1 \\leq k \\leq 10^9$).",
        "output": "For each test case, output an integer, the answer, modulo $10^9 + 7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n0 1 4\n0 2 7\n1 2 1\n1 2 3\n582 74663 3\n0 3 1\n</pre></td>\n    <td><pre>2\n3\n90\n12\n974995667\n999\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, the only values of $n$ that satisfy the condition\nare $1$ and $2$.\n\nFor the second test case, the only values of $n$ that satisfy the\ncondition are $1$, $10$, and $11$.\n\nFor the third test case, all values of $n$ between $10$ inclusive and\n$100$ exclusive satisfy the condition."
    },
    {
        "problem_id": "1985H1",
        "url": "https://codeforces.com/problemset/problem/1985/H1",
        "title": "Maximize the Largest Component (Easy Version)",
        "rating": 1700,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "implementation"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Easy and hard versions are actually different problems, so read statements of\nboth problems completely and carefully. The only difference between the two\nversions is the operation.\n\nAlex has a grid with $n$ rows and $m$ columns consisting of '.' and\n'#' characters. A set of '#' cells forms a connected component if from any\ncell in this set, it is possible to reach any other cell in this set by only\nmoving to another cell in the set that shares a common side. The size of a\nconnected component is the number of cells in the set.\n\nIn one operation, Alex selects any row $r$ ($1 \\le r \\le n$) or any\ncolumn $c$ ($1 \\le c \\le m$), then sets every cell in row $r$ or\ncolumn $c$ to be '#'. Help Alex find the maximum possible size of the\nlargest connected component of '#' cells that he can achieve after performing\nthe operation at most once.",
        "input": "The first line of the input contains a single integer $t$ ($1 \\leq t\n\\leq 10^4$) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\le n \\cdot m \\le 10^6$) \u2014 the number of rows and columns of the grid.\n\nThe next $n$ lines each contain $m$ characters. Each character is\neither '.' or '#'.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not\nexceed $10^6$.",
        "output": "For each test case, output a single integer \u2014 the maximum possible size of a\nconnected component of '#' cells that Alex can achieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 1\n.\n4 2\n..\n#.\n#.\n.#\n3 5\n.#.#.\n..#..\n.#.#.\n5 5\n#...#\n....#\n#...#\n.....\n...##\n6 6\n.#..#.\n#..#..\n.#...#\n#.#.#.\n.#.##.\n###..#\n6 8\n..#....#\n.####.#.\n###.#..#\n.##.#.##\n.#.##.##\n#..##.#.\n</pre></td>\n    <td><pre>1\n6\n9\n11\n15\n30\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second test case, it is optimal for Alex to set all cells in column\n$2$ to be '#'. Doing so will lead to the largest connected component of\n'#' having a size of $6$.\n\nIn the third test case, it is optimal for Alex to set all cells in row $2$\nto be '#'. Doing so will lead to the largest connected component of '#' having\na size of $9$.\n\nIn the fourth test case, it is optimal for Alex to set all cells in row\n$4$ to be '#'. Doing so will lead to the largest connected component of\n'#' having a size of $11$."
    },
    {
        "problem_id": "1985H2",
        "url": "https://codeforces.com/problemset/problem/1985/H2",
        "title": "Maximize the Largest Component (Hard Version)",
        "rating": 2200,
        "tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "implementation"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Easy and hard versions are actually different problems, so read statements of\nboth problems completely and carefully. The only difference between the two\nversions is the operation.\n\nAlex has a grid with $n$ rows and $m$ columns consisting of '.' and\n'#' characters. A set of '#' cells forms a connected component if from any\ncell in this set, it is possible to reach any other cell in this set by only\nmoving to another cell in the set that shares a common side. The size of a\nconnected component is the number of cells in the set.\n\nIn one operation, Alex selects any row $r$ ($1 \\le r \\le n$) and any\ncolumn $c$ ($1 \\le c \\le m$), then sets every cell in row $r$ and\ncolumn $c$ to be '#'. Help Alex find the maximum possible size of the\nlargest connected component of '#' cells that he can achieve after performing\nthe operation at most once.",
        "input": "The first line of the input contains a single integer $t$ ($1 \\leq t\n\\leq 10^4$) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\le n \\cdot m \\le 10^6$) \u2014 the number of rows and columns of the grid.\n\nThe next $n$ lines each contain $m$ characters. Each character is\neither '.' or '#'.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not\nexceed $10^6$.",
        "output": "For each test case, output a single integer \u2014 the maximum possible size of a\nconnected component of '#' cells that Alex can achieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 1\n.\n4 2\n..\n#.\n#.\n.#\n3 5\n.#.#.\n..#..\n.#.#.\n5 5\n#...#\n....#\n#...#\n.....\n...##\n6 6\n.#..#.\n#..#..\n.#...#\n#.#.#.\n.#.##.\n###..#\n6 8\n..#....#\n.####.#.\n###.#..#\n.##.#.##\n.#.##.##\n#..##.#.\n</pre></td>\n    <td><pre>1\n7\n11\n16\n22\n36\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the fourth test case, it is optimal for Alex to set all cells in row\n$4$ and column $2$ to be '#'. Doing so will lead to the largest\nconnected component of '#' having a size of $16$.\n\nIn the fifth test case, it is optimal for Alex to set all cells in row $2$\nand column $4$ to be '#'. Doing so will lead to the largest connected\ncomponent of '#' having a size of $22$."
    },
    {
        "problem_id": "1986A",
        "url": "https://codeforces.com/problemset/problem/1986/A",
        "title": "X Axis",
        "rating": 800,
        "tags": [
            "brute force",
            "geometry",
            "math",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given three points with integer coordinates $x_1$, $x_2$, and\n$x_3$ on the $X$ axis ($1 \\leq x_i \\leq 10$). You can choose any\npoint with an integer coordinate $a$ on the $X$ axis. Note that the\npoint $a$ may coincide with $x_1$, $x_2$, or $x_3$. Let\n$f(a)$ be the total distance from the given points to the point $a$.\nFind the smallest value of $f(a)$.\n\nThe distance between points $a$ and $b$ is equal to $|a - b|$. For\nexample, the distance between points $a = 5$ and $b = 2$ is $3$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^3$) \u2014 the number of test cases. Then\nfollows their descriptions.\n\nThe single line of each test case contains three integers $x_1$,\n$x_2$, and $x_3$ ($1 \\leq x_i \\leq 10$) \u2014 the coordinates of the\npoints.",
        "output": "For each test case, output the smallest value of $f(a)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n1 1 1\n1 5 9\n8 2 8\n10 9 3\n2 1 1\n2 4 1\n7 3 5\n1 9 4\n</pre></td>\n    <td><pre>0\n8\n6\n7\n1\n3\n4\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the smallest value of $f(a)$ is achieved when $a\n= 1$: $f(1) = |1 - 1| + |1 - 1| + |1 - 1| = 0$.\n\nIn the second test case, the smallest value of $f(a)$ is achieved when\n$a = 5$: $f(5) = |1 - 5| + |5 - 5| + |9 - 5| = 8$.\n\nIn the third test case, the smallest value of $f(a)$ is achieved when $a\n= 8$: $f(8) = |8 - 8| + |2 - 8| + |8 - 8| = 6$.\n\nIn the fourth test case, the smallest value of $f(a)$ is achieved when\n$a = 9$: $f(10) = |10 - 9| + |9 - 9| + |3 - 9| = 7$."
    },
    {
        "problem_id": "1986B",
        "url": "https://codeforces.com/problemset/problem/1986/B",
        "title": "Matrix Stabilization",
        "rating": 1000,
        "tags": [
            "brute force",
            "data structures",
            "greedy",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a matrix of size $n \\times m$, where the rows are numbered\nfrom $1$ to $n$ from top to bottom, and the columns are numbered from\n$1$ to $m$ from left to right. The element at the intersection of the\n$i$-th row and the $j$-th column is denoted by $a_{ij}$.\n\nConsider the algorithm for stabilizing matrix $a$:\n\n  1. Find the cell $(i, j)$ such that its value is strictly greater than the values of all its neighboring cells. If there is no such cell, terminate the algorithm. If there are multiple such cells, choose the cell with the smallest value of $i$, and if there are still multiple cells, choose the one with the smallest value of $j$.\n  2. Set $a_{ij} = a_{ij} - 1$. \n  3. Go to step $1$. \n\nIn this problem, cells $(a, b)$ and $(c, d)$ are considered neighbors\nif they share a common side, i.e., $|a - c| + |b - d| = 1$.\n\nYour task is to output the matrix $a$ after the stabilization algorithm\nhas been executed. It can be shown that this algorithm cannot run for an\ninfinite number of iterations.",
        "input": "Each test consists of multiple sets of input data. The first line contains a\nsingle integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of sets of\ninput data. This is followed by their description.\n\nThe first line of each set of input data contains two integers $n$ and\n$m$ ($1 \\leq n, m \\leq 100, n \\cdot m > 1$) \u2014 the number of rows and\ncolumns of matrix $a$.\n\nThe next $n$ lines describe the corresponding rows of the matrix. The\n$i$-th line contains $m$ integers $a_{i1}, a_{i2}, \\ldots, a_{im}$\n($1 \\leq a_{ij} \\leq 10^9$).\n\nIt is guaranteed that the sum of $n \\cdot m$ over all sets of input data\ndoes not exceed $2 \\cdot 10^5$.",
        "output": "For each set of input data, output $n$ lines with $m$ numbers in each\nline \u2014 the values of the cells of matrix $a$ after the stabilization\nalgorithm.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 2\n3 1\n2 1\n1\n1\n2 2\n1 2\n3 4\n2 3\n7 4 5\n1 8 10\n5 4\n92 74 31 74\n74 92 17 7\n31 17 92 3\n74 7 3 92\n7 31 1 1\n3 3\n1000000000 1 1000000000\n1 1000000000 1\n1000000000 1 1000000000\n</pre></td>\n    <td><pre>1 1 \n1 \n1 \n1 2 \n3 3 \n4 4 5 \n1 8 8 \n74 74 31 31 \n74 74 17 7 \n31 17 17 3 \n31 7 3 3 \n7 7 1 1 \n1 1 1 \n1 1 1 \n1 1 1 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first set of input data, the algorithm will select the cell $(1,\n1)$ twice in a row and then terminate.\n\n![](CDN_BASE_URL/ce7b57ad25f59927de6d90880ce5a2ba)\n\nIn the second set of input data, there is no cell whose value is strictly\ngreater than the values of all neighboring cells.\n\nIn the third set of input data, the algorithm will select the cell $(2,\n2)$ and then terminate.\n\n![](CDN_BASE_URL/e6f79376ac190defeb9657662c825d80)\n\nIn the fourth set of input data, the algorithm will select the cell $(1,\n1)$ three times and then the cell $(2, 3)$ twice.\n\n![](CDN_BASE_URL/7651bb6af57f6669236e3dd32a7c1293)"
    },
    {
        "problem_id": "1986C",
        "url": "https://codeforces.com/problemset/problem/1986/C",
        "title": "Update Queries",
        "rating": 1100,
        "tags": [
            "data structures",
            "greedy",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Let's consider the following simple problem. You are given a string $s$ of\nlength $n$, consisting of lowercase Latin letters, as well as an array of\nindices $ind$ of length $m$ ($1 \\leq ind_i \\leq n$) and a string\n$c$ of length $m$, consisting of lowercase Latin letters. Then, in\norder, you perform the update operations, namely, during the $i$-th\noperation, you set $s_{ind_i} = c_i$. Note that you perform all $m$\noperations from the first to the last.\n\nOf course, if you change the order of indices in the array $ind$ and/or\nthe order of letters in the string $c$, you can get different results.\nFind the lexicographically smallest string $s$ that can be obtained after\n$m$ update operations, if you can rearrange the indices in the array\n$ind$ and the letters in the string $c$ as you like.\n\nA string $a$ is lexicographically less than a string $b$ if and only\nif one of the following conditions is met:\n\n  * $a$ is a prefix of $b$, but $a \\neq b$;\n  * in the first position where $a$ and $b$ differ, the symbol in string $a$ is earlier in the alphabet than the corresponding symbol in string $b$.",
        "input": "Each test consists of several sets of input data. The first line contains a\nsingle integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of sets of\ninput data. Then follows their description.\n\nThe first line of each set of input data contains two integers $n$ and\n$m$ ($1 \\leq n, m \\leq 10^5$) \u2014 the length of the string $s$ and\nthe number of updates.\n\nThe second line of each set of input data contains a string $s$ of length\n$n$, consisting of lowercase Latin letters.\n\nThe third line of each set of input data contains $m$ integers $ind_1,\nind_2, \\ldots, ind_m$ ($1 \\leq ind_i \\leq n$) \u2014 the array of indices\n$ind$.\n\nThe fourth line of each set of input data contains a string $c$ of length\n$m$, consisting of lowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ over all sets of input data does not\nexceed $2 \\cdot 10^5$. Similarly, the sum of $m$ over all sets of\ninput data does not exceed $2 \\cdot 10^5$.",
        "output": "For each set of input data, output the lexicographically smallest string\n$s$ that can be obtained by rearranging the indices in the array $ind$\nand the letters in the string $c$ as you like.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 2\na\n1 1\ncb\n4 4\nmeow\n1 2 1 4\nzcwz\n7 4\nabacaba\n1 3 5 7\ndamn\n7 10\ntraktor\n7 6 5 4 3 2 1 6 4 2\ncodeforces\n</pre></td>\n    <td><pre>b\ncwoz\nabdcmbn\nccdeefo\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first set of input data, you can leave the array $ind$ and the\nstring $c$ unchanged and simply perform all operations in that order.\n\nIn the second set of input data, you can set the array $ind = [1, 1, 4,\n2]$ and $c =$ \"zczw\". Then the string $s$ will change as follows:\n$meow \\rightarrow zeow \\rightarrow ceow \\rightarrow ceoz \\rightarrow\ncwoz$.\n\nIn the third set of input data, you can leave the array $ind$ unchanged\nand set $c = $ \"admn\". Then the string $s$ will change as follows:\n$abacaba \\rightarrow abacaba \\rightarrow abdcaba \\rightarrow abdcmba\n\\rightarrow abdcmbn$."
    },
    {
        "problem_id": "1986D",
        "url": "https://codeforces.com/problemset/problem/1986/D",
        "title": "Mathematical Problem",
        "rating": 1400,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "implementation",
            "math",
            "two pointers"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a string $s$ of length $n > 1$, consisting of digits\nfrom $0$ to $9$. You must insert exactly $n - 2$ symbols $+$\n(addition) or $\\times$ (multiplication) into this string to form a valid\narithmetic expression.\n\nIn this problem, the symbols cannot be placed before the first or after the\nlast character of the string $s$, and two symbols cannot be written\nconsecutively. Also, note that the order of the digits in the string cannot be\nchanged. Let's consider $s = 987009$:\n\n  * From this string, the following arithmetic expressions can be obtained: $9 \\times 8 + 70 \\times 0 + 9 = 81$, $98 \\times 7 \\times 0 + 0 \\times 9 = 0$, $9 + 8 + 7 + 0 + 09 = 9 + 8 + 7 + 0 + 9 = 33$. Note that the number $09$ is considered valid and is simply transformed into $9$.\n  * From this string, the following arithmetic expressions cannot be obtained: $+9 \\times 8 \\times 70 + 09$ (symbols should only be placed between digits), $98 \\times 70 + 0 + 9$ (since there are $6$ digits, there must be exactly $4$ symbols).\n\nThe result of the arithmetic expression is calculated according to the rules\nof mathematics \u2014 first all multiplication operations are performed, then\naddition. You need to find the minimum result that can be obtained by\ninserting exactly $n - 2$ addition or multiplication symbols into the\ngiven string $s$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. Then\nfollows their description.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq\nn \\leq 20$) \u2014 the length of the string $s$.\n\nThe second line of each test case contains a string $s$ of length $n$,\nconsisting of digits from $0$ to $9$.",
        "output": "For each test case, output the minimum result of the arithmetic expression\nthat can be obtained by inserting exactly $n - 2$ addition or\nmultiplication symbols into the given string.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>18\n2\n10\n2\n74\n2\n00\n2\n01\n3\n901\n3\n101\n5\n23311\n6\n987009\n7\n1111111\n20\n99999999999999999999\n20\n00000000000000000000\n4\n0212\n18\n057235283621345395\n4\n1112\n20\n19811678487321784121\n4\n1121\n4\n2221\n3\n011\n</pre></td>\n    <td><pre>10\n74\n0\n1\n9\n1\n19\n0\n11\n261\n0\n0\n0\n12\n93\n12\n24\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first four test cases, we cannot add symbols, so the answer will be the\noriginal number.\n\nIn the fifth test case, the optimal answer looks as follows: $9 \\times 01 =\n9 \\times 1 = 9$.\n\nIn the sixth test case, the optimal answer looks as follows: $1 \\times 01 =\n1 \\times 1 = 1$.\n\nIn the seventh test case, the optimal answer looks as follows: $2 + 3 + 3 +\n11 = 19$.\n\nIn the eighth test case, one of the optimal answers looks as follows: $98\n\\times 7 \\times 0 + 0 \\times 9 = 0$."
    },
    {
        "problem_id": "1986E",
        "url": "https://codeforces.com/problemset/problem/1986/E",
        "title": "Beautiful Array",
        "rating": 1700,
        "tags": [
            "greedy",
            "math",
            "number theory",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given an array of integers $a_1, a_2, \\ldots, a_n$ and an integer\n$k$. You need to make it beautiful with the least amount of operations.\n\nBefore applying operations, you can shuffle the array elements as you like.\nFor one operation, you can do the following:\n\n  * Choose an index $1 \\leq i \\leq n$,\n  * Make $a_i = a_i + k$.\n\nThe array $b_1, b_2, \\ldots, b_n$ is beautiful if $b_i = b_{n - i +\n1}$ for all $1 \\leq i \\leq n$.\n\nFind the minimum number of operations needed to make the array beautiful, or\nreport that it is impossible.",
        "input": "Each test consists of several sets of input data. The first line contains a\nsingle integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of sets of\ninput data. Then follows their description.\n\nThe first line of each set of input data contains two integers $n$ and\n$k$ ($1 \\leq n \\leq 10^5$, $1 \\leq k \\leq 10^9$) \u2014 the size of the\narray $a$ and the number $k$ from the problem statement.\n\nThe second line of each set of input data contains $n$ integers $a_1,\na_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 the elements of the array\n$a$.\n\nIt is guaranteed that the sum of $n$ over all sets of input data does not\nexceed $2 \\cdot 10^5$.",
        "output": "For each set of input data, output the minimum number of operations needed to\nmake the array beautiful, or $-1$ if it is impossible.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>11\n1 1000000000\n1\n2 1\n624323799 708290323\n3 1\n3 2 1\n4 1\n7 1 5 3\n5 1\n11 2 15 7 10\n7 1\n1 8 2 16 8 16 31\n13 1\n2 1 1 3 3 11 12 22 45 777 777 1500 74\n10 2\n1 2 1 2 1 2 1 2 1 2\n11 2\n1 2 1 2 1 2 1 2 1 2 1\n13 3\n2 3 9 14 17 10 22 20 18 30 1 4 28\n5 1\n2 3 5 3 5\n</pre></td>\n    <td><pre>0\n83966524\n1\n4\n6\n1\n48\n-1\n0\n14\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first set of input data, the array is already beautiful.\n\nIn the second set of input data, you can shuffle the array before the\noperations and perform the operation with index $i = 1$ for $83966524$\ntimes.\n\nIn the third set of input data, you can shuffle the array $a$ and make it\nequal to $[2, 3, 1]$. Then apply the operation with index $i = 3$ to\nget the array $[2, 3, 2]$, which is beautiful.\n\nIn the eighth set of input data, there is no set of operations and no way to\nshuffle the elements to make the array beautiful.\n\nIn the ninth set of input data, the array is already beautiful."
    },
    {
        "problem_id": "1986F",
        "url": "https://codeforces.com/problemset/problem/1986/F",
        "title": "Non-academic Problem",
        "rating": 1900,
        "tags": [
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a connected undirected graph, the vertices of which are numbered\nwith integers from $1$ to $n$. Your task is to minimize the number of\npairs of vertices $1 \\leq u < v \\leq n$ between which there exists a path\nin this graph. To achieve this, you can remove exactly one edge from the\ngraph.\n\nFind the smallest number of pairs of vertices!",
        "input": "Each test consists of several sets of input data. The first line contains a\nsingle integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of sets of\ninput data. Then follows their description.\n\nThe first line of each set of input data contains two integers $n$ and\n$m$ ($2 \\leq n \\leq 10^5$, $n - 1 \\leq m \\leq \\min(10^5, \\frac{n\n\\cdot (n - 1)}{2})$) \u2014 the number of vertices in the graph and the number of\nedges.\n\nEach of the next $m$ lines contains two integers $u$ and $v$ ($1\n\\leq u, v \\leq n, u \\neq v$), indicating that there is an undirected edge in\nthe graph between vertices $u$ and $v$.\n\nIt is guaranteed that the given graph is connected and without multiple edges.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all sets\nof input data does not exceed $2 \\cdot 10^5$.",
        "output": "For each set of input data, output the smallest number of pairs of reachable\nvertices, if exactly one edge can be removed.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2 1\n1 2\n3 3\n1 2\n2 3\n1 3\n5 5\n1 2\n1 3\n3 4\n4 5\n5 3\n6 7\n1 2\n1 3\n2 3\n3 4\n4 5\n4 6\n5 6\n5 5\n1 2\n1 3\n2 3\n2 4\n3 5\n10 12\n1 2\n1 3\n2 3\n2 4\n4 5\n5 6\n6 7\n7 4\n3 8\n8 9\n9 10\n10 8\n</pre></td>\n    <td><pre>0\n3\n4\n6\n6\n21\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first set of input data, we will remove the single edge $(1, 2)$\nand the only pair of vertices $(1, 2)$ will become unreachable from each\nother.\n\nIn the second set of input data, no matter which edge we remove, all vertices\nwill be reachable from each other.\n\nIn the fourth set of input data, the graph looks like this initially.\n\n![](CDN_BASE_URL/c00467697f2843fb1ecf4e292e93aa87)\n\nWe will remove the edge $(3, 4)$ and then the only reachable pairs of\nvertices will be $(1, 2)$, $(1, 3)$, $(2, 3)$, $(4, 5)$,\n$(4, 6)$, $(5, 6)$.\n\n![](CDN_BASE_URL/9d2fd2df4094f1654c448ff596e16eb3)\n\nIn the sixth set of input data, the graph looks like this initially.\n\n![](CDN_BASE_URL/a18a02e5685863de8060f83f96c068e2)\n\nAfter removing the edge $(2, 4)$, the graph will look like this. Thus,\nthere will be $21$ pairs of reachable vertices.\n\n![](CDN_BASE_URL/f53901ac967e9f60a7423e8ea66c67e4)"
    },
    {
        "problem_id": "1986G1",
        "url": "https://codeforces.com/problemset/problem/1986/G1",
        "title": "Permutation Problem (Simple Version)",
        "rating": 2200,
        "tags": [
            "binary search",
            "brute force",
            "combinatorics",
            "data structures",
            "math",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 128,
        "description": "This is a simple version of the problem. The only difference is that in this\nversion $n \\leq 10^5$ and the sum of $n$ for all sets of input data\ndoes not exceed $10^5$.\n\nYou are given a permutation $p$ of length $n$. Calculate the number of\nindex pairs $1 \\leq i < j \\leq n$ such that $p_i \\cdot p_j$ is\ndivisible by $i \\cdot j$ without remainder.\n\nA permutation is a sequence of $n$ integers, where each integer from\n$1$ to $n$ occurs exactly once. For example, $[1]$,\n$[3,5,2,1,4]$, $[1,3,2]$ are permutations, while $[2,3,2]$,\n$[4,3,1]$, $[0]$ are not.",
        "input": "Each test consists of multiple sets of input data. The first line contains a\nsingle integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of sets of\ninput data. Then follows their description.\n\nThe first line of each set of input data contains a single integer $n$\n($1 \\leq n \\leq 10^5$) \u2014 the length of the permutation $p$.\n\nThe second line of each set of input data contains $n$ distinct integers\n$p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq n$) \u2014 the permutation\n$p$.\n\nIt is guaranteed that the sum of $n$ for all sets of input data does not\nexceed $10^5$.",
        "output": "For each set of input data, output the number of index pairs $1 \\leq i < j\n\\leq n$ such that $p_i \\cdot p_j$ is divisible by $i \\cdot j$\nwithout remainder.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1\n1\n2\n1 2\n3\n2 3 1\n5\n2 4 1 3 5\n12\n8 9 7 12 1 10 6 3 2 4 11 5\n15\n1 2 4 6 8 10 12 14 3 9 15 5 7 11 13\n</pre></td>\n    <td><pre>0\n1\n1\n3\n9\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first set of input data, there are no index pairs, as the size of the\npermutation is $1$.\n\nIn the second set of input data, there is one index pair $(1, 2)$ and it\nis valid.\n\nIn the third set of input data, the index pair $(1, 2)$ is valid.\n\nIn the fourth set of input data, the index pairs $(1, 2)$, $(1, 5)$,\nand $(2, 5)$ are valid."
    },
    {
        "problem_id": "1986G2",
        "url": "https://codeforces.com/problemset/problem/1986/G2",
        "title": "Permutation Problem (Hard Version)",
        "rating": 2500,
        "tags": [
            "brute force",
            "data structures",
            "hashing",
            "math",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 128,
        "description": "This is the hard version of the problem. The only difference is that in this\nversion $n \\leq 5 \\cdot 10^5$ and the sum of $n$ for all sets of input\ndata does not exceed $5 \\cdot 10^5$.\n\nYou are given a permutation $p$ of length $n$. Calculate the number of\nindex pairs $1 \\leq i < j \\leq n$ such that $p_i \\cdot p_j$ is\ndivisible by $i \\cdot j$ without remainder.\n\nA permutation is a sequence of $n$ integers, in which each integer from\n$1$ to $n$ occurs exactly once. For example, $[1]$,\n$[3,5,2,1,4]$, $[1,3,2]$ are permutations, while $[2,3,2]$,\n$[4,3,1]$, $[0]$ are not.",
        "input": "Each test consists of several sets of input data. The first line contains a\nsingle integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of sets of\ninput data. Then follows their description.\n\nThe first line of each set of input data contains a single integer $n$\n($1 \\leq n \\leq 5 \\cdot 10^5$) \u2014 the length of the permutation $p$.\n\nThe second line of each set of input data contains $n$ distinct integers\n$p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq n$) \u2014 the permutation\n$p$.\n\nIt is guaranteed that the sum of $n$ for all sets of input data does not\nexceed $5 \\cdot 10^5$.",
        "output": "For each set of input data, output the number of index pairs $1 \\leq i < j\n\\leq n$ such that $p_i \\cdot p_j$ is divisible by $i \\cdot j$\nwithout remainder.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1\n1\n2\n1 2\n3\n2 3 1\n5\n2 4 1 3 5\n12\n8 9 7 12 1 10 6 3 2 4 11 5\n15\n1 2 4 6 8 10 12 14 3 9 15 5 7 11 13\n</pre></td>\n    <td><pre>0\n1\n1\n3\n9\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first set of input data, there are no index pairs, as the size of the\npermutation is $1$.\n\nIn the second set of input data, there is one index pair $(1, 2)$ and it\nis valid.\n\nIn the third set of input data, the index pair $(1, 2)$ is valid.\n\nIn the fourth set of input data, the index pairs $(1, 2)$, $(1, 5)$,\nand $(2, 5)$ are valid."
    },
    {
        "problem_id": "1987A",
        "url": "https://codeforces.com/problemset/problem/1987/A",
        "title": "Upload More RAM",
        "rating": 800,
        "tags": [
            "greedy",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Oh no, the ForceCodes servers are running out of memory! Luckily, you can help\nthem out by uploading some of your RAM!\n\nYou want to upload $n$ GBs of RAM. Every second, you will upload either\n$0$ or $1$ GB of RAM. However, there is a restriction on your network\nspeed: in any $k$ consecutive seconds, you can upload only at most $1$\nGB of RAM in total.\n\nFind the minimum number of seconds needed to upload $n$ GBs of RAM!",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first and only line of each test case contains two integers $n$ and\n$k$ ($1 \\le n, k \\le 100$) \u2014 the number of GBs that you want to upload\nand the length of the time window respectively.",
        "output": "For each test case, output a single integer \u2014 the minimum number of seconds\nneeded to upload $n$ GBs of RAM.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5 1\n2 2\n2 3\n1 7\n11 5\n100 100\n</pre></td>\n    <td><pre>5\n3\n4\n1\n51\n9901\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can upload $1$ GB of RAM per second, so to\nupload $5$ GBs, you need $5$ seconds.\n\nIn the second test case, you can upload $1$ GB in the first second,\n$0$ GBs in the second second, and $1$ GB in the third second, which in\ntotal adds up to exactly $2$ GBs of uploaded RAM.\n\nIn the third test case, you can upload $1$ GB in the first second, $0$\nGBs in the second second, $0$ GBs in the third second, and $1$ GB in\nthe fourth second, which in total adds up to exactly $2$ GBs of uploaded\nRAM."
    },
    {
        "problem_id": "1987B",
        "url": "https://codeforces.com/problemset/problem/1987/B",
        "title": "K-Sort",
        "rating": 1000,
        "tags": [
            "greedy"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given an array of integers $a$ of length $n$.\n\nYou can apply the following operation any number of times (maybe, zero):\n\n  * First, choose an integer $k$ such that $1 \\le k \\le n$ and pay $k + 1$ coins. \n  * Then, choose exactly $k$ indices such that $1 \\le i_1 < i_2 < \\ldots < i_k \\le n$. \n  * Then, for each $x$ from $1$ to $k$, increase $a_{i_x}$ by $1$. \n\nFind the minimum number of coins needed to make $a$ non-decreasing. That\nis, $a_1 \\le a_2 \\le \\ldots \\le a_n$.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 10^5$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of coins\nneeded to make $a$ non-decreasing.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3\n1 7 9\n5\n2 1 4 7 6\n4\n1 3 2 4\n1\n179\n9\n344 12 37 60 311 613 365 328 675\n</pre></td>\n    <td><pre>0\n3\n2\n0\n1821\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $a$ is already sorted, so you don't have to spend\nany coins.\n\nIn the second test case, the optimal sequence of operations is:\n\n  * Choose $k = 2$ and the indices $2$ and $5$: $[ 2, \\color{red}{1}, 4, 7, \\color{red}{6} ] \\rightarrow [2, 2, 4, 7, 7]$. This costs $3$ coins. \n\nIt can be proven that it is not possible to make $a$ non-decreasing by\nspending less than $3$ coins."
    },
    {
        "problem_id": "1987C",
        "url": "https://codeforces.com/problemset/problem/1987/C",
        "title": "Basil's Garden",
        "rating": 1200,
        "tags": [
            "dp",
            "greedy"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "There are $n$ flowers in a row, the $i$-th of them initially has a\npositive height of $h_i$ meters.\n\nEvery second, the wind will blow from the left, causing the height of some\nflowers to decrease.\n\nSpecifically, every second, for each $i$ from $1$ to $n$, in this\norder, the following happens:\n\n  * If $i = n$ or $h_i > h_{i + 1}$, the value of $h_i$ changes to $\\max(0, h_i - 1)$. \n\nHow many seconds will pass before $h_i=0$ for all $1 \\le i \\le n$ for\nthe first time?",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 10^5$) \u2014 the number of flowers.\n\nThe second line of each test case contains $n$ integers $h_1, h_2,\n\\ldots, h_n$ ($1 \\le h_i \\le 10 ^ 9$) \u2014 the heights of the flowers.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single integer \u2014 the number of seconds that will\npass before $h_i=0$ for all $1 \\le i \\le n$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n1 1 2\n2\n3 1\n1\n9\n5\n7 4 4 3 2\n</pre></td>\n    <td><pre>4\n3\n9\n7\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the flower heights change as follows: $[1, 1, 2]\n\\rightarrow [1, 1, 1] \\rightarrow [1, 1, 0] \\rightarrow [1, 0, 0] \\rightarrow\n[0, 0, 0]$.\n\nIn the second test case, the flower heights change as follows: $[3, 1]\n\\rightarrow [2, 0] \\rightarrow [1, 0] \\rightarrow [0, 0]$."
    },
    {
        "problem_id": "1987D",
        "url": "https://codeforces.com/problemset/problem/1987/D",
        "title": "World is Mine",
        "rating": 1800,
        "tags": [
            "dp",
            "games"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alice and Bob are playing a game. Initially, there are $n$ cakes, with the\n$i$-th cake having a tastiness value of $a_i$.\n\nAlice and Bob take turns eating them, with Alice starting first:\n\n  * In her turn, Alice chooses and eats any remaining cake whose tastiness is strictly greater than the maximum tastiness of any of the cakes she's eaten before that. Note that on the first turn, she can choose any cake. \n  * In his turn, Bob chooses any remaining cake and eats it. \n\nThe game ends when the current player can't eat a suitable cake. Let $x$\nbe the number of cakes that Alice ate. Then, Alice wants to maximize $x$,\nwhile Bob wants to minimize $x$.\n\nFind out how many cakes Alice will eat if both players play optimally.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 500$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 5000$) \u2014 the number of cakes.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le n$) \u2014 the tastiness values of the cakes.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5000$.",
        "output": "For each test case, output a single integer \u2014 the number of cakes Alice will\neat if both players play optimally.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9\n4\n1 4 2 3\n3\n1 1 1\n5\n1 4 2 3 4\n4\n3 4 1 4\n1\n1\n8\n4 3 2 5 6 8 3 4\n7\n6 1 1 3 5 3 1\n11\n6 11 6 8 7 5 3 11 2 3 5\n17\n2 6 5 3 9 1 6 2 5 6 3 2 3 9 6 1 6\n</pre></td>\n    <td><pre>2\n1\n3\n2\n1\n3\n2\n4\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one possible sequence of turns is:\n\n  1. Alice eats a cake with a tastiness value of $1$. The remaining cakes are $[4, 2, 3]$. \n  2. Bob eats a cake with a tastiness value of $2$. The remaining cakes are $[4, 3]$. \n  3. Alice eats a cake with a tastiness of $3$. The remaining cakes are $[4]$. \n  4. Bob eats a cake with a tastiness value of $4$. The remaining cakes are $[]$. \n  5. Since there are no more cakes left, the game ends. \n\nIn the second test case, one possible sequence of turns is:\n\n  1. Alice eats a cake with a tastiness value of $1$. The remaining cakes are $[1, 1]$. \n  2. Bob eats a cake with a tastiness value of $1$. The remaining cakes are $[1]$. \n  3. Since Alice has already eaten a cake with a tastiness value of $1$, she cannot make a turn, so the game ends."
    },
    {
        "problem_id": "1987E",
        "url": "https://codeforces.com/problemset/problem/1987/E",
        "title": "Wonderful Tree!",
        "rating": 2000,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dsu",
            "greedy",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "God's Blessing on This ArrayForces!\n\nA Random Pebble\n\nYou are given a tree with $n$ vertices, rooted at vertex $1$. The\n$i$-th vertex has an integer $a_i$ written on it.\n\nLet $L$ be the set of all direct children$^{\\text{\u2217}}$ of $v$. A\ntree is called wonderful, if for all vertices $v$ where $L$ is not\nempty, $$a_v \\le \\sum_{u \\in L}{a_u}.$$ In one operation, you choose\nany vertex $v$ and increase $a_v$ by $1$.\n\nFind the minimum number of operations needed to make the given tree wonderful!\n\n$^{\\text{\u2217}}$ Vertex $u$ is called a direct child of vertex $v$\nif:\n\n  * $u$ and $v$ are connected by an edge, and \n  * $v$ is on the (unique) path from $u$ to the root of the tree.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 5000$) \u2014 the number of vertices in the tree.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the values initially written on\nthe vertices.\n\nThe third line of each test case contains $n - 1$ integers $p_2, p_3 ,\n\\ldots, p_n$ ($1 \\le p_i < i$), indicating that there is an edge from\nvertex $p_i$ to vertex $i$. It is guaranteed that the given edges form\na tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5000$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of operations\nneeded to make the tree wonderful.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5\n9 3 4 1 2\n1 1 3 3\n2\n5 3\n1\n2\n36 54\n1\n3\n0 0 0\n1 2\n</pre></td>\n    <td><pre>3\n2\n0\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The tree in the first test case:\n\n![](CDN_BASE_URL/9a07d26506b9ad6c01c4152da8319590)\n\nYou can apply the operation once on vertex $5$ and twice on vertex $2$\nto get a wonderful tree.\n\nIn the second test case, you can apply the operation twice on vertex $2$\nto get a wonderful tree.\n\nIn the third and fourth test cases, the tree is already wonderful, so you\ndon't need to apply any operations."
    },
    {
        "problem_id": "1987F1",
        "url": "https://codeforces.com/problemset/problem/1987/F1",
        "title": "Interesting Problem (Easy Version)",
        "rating": 2500,
        "tags": [
            "dp"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. The only difference between the two\nversions is the constraint on $n$. You can make hacks only if both\nversions of the problem are solved.\n\nYou are given an array of integers $a$ of length $n$.\n\nIn one operation, you will perform the following two-step process:\n\n  1. Choose an index $i$ such that $1 \\le i < |a|$ and $a_i = i$. \n  2. Remove $a_i$ and $a_{i+1}$ from the array and concatenate the remaining parts. \n\nFind the maximum number of times that you can perform the operation above.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 100$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le n$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$100$.",
        "output": "For each test case, output a single integer \u2014 the maximum number of times that\nyou can perform the operation.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5\n1 5 3 2 4\n8\n2 1 3 4 5 6 7 8\n3\n1 2 3\n4\n1 2 4 4\n5\n4 4 1 3 5\n1\n1\n</pre></td>\n    <td><pre>2\n3\n1\n2\n0\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one possible optimal sequence of operations is $[ 1,\n5, \\color{red}{3}, \\color{red}{2}, 4 ] \\rightarrow [\\color{red}{1},\n\\color{red}{5}, 4] \\rightarrow [4]$.\n\nIn the third test case, one possible optimal sequence of operations is $[1,\n\\color{red}{2}, \\color{red}{3}] \\rightarrow [1]$."
    },
    {
        "problem_id": "1987F2",
        "url": "https://codeforces.com/problemset/problem/1987/F2",
        "title": "Interesting Problem (Hard Version)",
        "rating": 2600,
        "tags": [
            "dp"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. The only difference between the two\nversions is the constraint on $n$. You can make hacks only if both\nversions of the problem are solved.\n\nYou are given an array of integers $a$ of length $n$.\n\nIn one operation, you will perform the following two-step process:\n\n  1. Choose an index $i$ such that $1 \\le i < |a|$ and $a_i = i$. \n  2. Remove $a_i$ and $a_{i+1}$ from the array and concatenate the remaining parts. \n\nFind the maximum number of times that you can perform the operation above.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 800$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le n$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$800$.",
        "output": "For each test case, output a single integer \u2014 the maximum number of times that\nyou can perform the operation.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5\n1 5 3 2 4\n8\n2 1 3 4 5 6 7 8\n3\n1 2 3\n4\n1 2 4 4\n5\n4 4 1 3 5\n1\n1\n</pre></td>\n    <td><pre>2\n3\n1\n2\n0\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one possible optimal sequence of operations is $[ 1,\n5, \\color{red}{3}, \\color{red}{2}, 4 ] \\rightarrow [\\color{red}{1},\n\\color{red}{5}, 4] \\rightarrow [4]$.\n\nIn the third test case, one possible optimal sequence of operations is $[1,\n\\color{red}{2}, \\color{red}{3}] \\rightarrow [1]$."
    },
    {
        "problem_id": "1987G1",
        "url": "https://codeforces.com/problemset/problem/1987/G1",
        "title": "Spinning Round (Easy Version)",
        "rating": 2900,
        "tags": [
            "divide and conquer",
            "dp",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 7000,
        "memory_limit_mb": 1024,
        "description": "This is the easy version of the problem. The only difference between the two\nversions are the allowed characters in $s$. In the easy version, $s$\nonly contains the character ?. You can make hacks only if both versions of the\nproblem are solved.\n\nYou are given a permutation $p$ of length $n$. You are also given a\nstring $s$ of length $n$, consisting only of the character ?.\n\nFor each $i$ from $1$ to $n$:\n\n  * Define $l_i$ as the largest index $j < i$ such that $p_j > p_i$. If there is no such index, $l_i := i$. \n  * Define $r_i$ as the smallest index $j > i$ such that $p_j > p_i$. If there is no such index, $r_i := i$. \n\nInitially, you have an undirected graph with $n$ vertices (numbered from\n$1$ to $n$) and no edges. Then, for each $i$ from $1$ to\n$n$, add one edge to the graph:\n\n  * If $s_i =$ L, add the edge $(i, l_i)$ to the graph. \n  * If $s_i =$ R, add the edge $(i, r_i)$ to the graph. \n  * If $s_i =$ ?, either add the edge $(i, l_i)$ or the edge $(i, r_i)$ to the graph at your choice. \n\nFind the maximum possible diameter$^{\\text{\u2217}}$ over all connected graphs\nthat you can form. Output $-1$ if it is not possible to form any connected\ngraphs.\n\n$^{\\text{\u2217}}$ Let $d(s, t)$ denote the smallest number of edges on any\npath between $s$ and $t$.\n\nThe diameter of the graph is defined as the maximum value of $d(s, t)$\nover all pairs of vertices $s$ and $t$.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test\ncases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 4 \\cdot 10^5$) \u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1,p_2,\\ldots,\np_n$ ($1 \\le p_i \\le n$) \u2014 the elements of $p$, which are guaranteed\nto form a permutation.\n\nThe third line of each test case contains a string $s$ of length $n$.\nIt is guaranteed that it consists only of the character ?.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$4 \\cdot 10^5$.",
        "output": "For each test case, output the maximum possible diameter over all connected\ngraphs that you form, or $-1$ if it is not possible to form any connected\ngraphs.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n5\n2 1 4 3 5\n?????\n2\n1 2\n??\n3\n3 1 2\n???\n7\n5 3 1 6 4 2 7\n???????\n5\n5 2 1 3 4\n?????\n6\n6 2 3 4 5 1\n??????\n8\n1 7 5 6 2 8 4 3\n????????\n12\n6 10 7 1 8 5 12 2 11 3 4 9\n????????????\n</pre></td>\n    <td><pre>4\n1\n2\n6\n4\n5\n5\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, here are some possible connected graphs that you can\nform (the labels are indices):\n\n![](CDN_BASE_URL/4561c9025a4357785c7aff0bb1bbff9a)|\n![](CDN_BASE_URL/a680f9e3bffa38fd90dd7bbc4c3e5f3b)|\n![](CDN_BASE_URL/bb06c0111d994ef8c2f7e8e1cb93e921)  \n---|---|---  \n  \nIn the second test case, the only connected graph has a diameter of $1$."
    },
    {
        "problem_id": "1987G2",
        "url": "https://codeforces.com/problemset/problem/1987/G2",
        "title": "Spinning Round (Hard Version)",
        "rating": 3500,
        "tags": [
            "divide and conquer",
            "dp",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 7000,
        "memory_limit_mb": 1024,
        "description": "This is the hard version of the problem. The only difference between the two\nversions are the allowed characters in $s$. You can make hacks only if\nboth versions of the problem are solved.\n\nYou are given a permutation $p$ of length $n$. You are also given a\nstring $s$ of length $n$, where each character is either L, R, or ?.\n\nFor each $i$ from $1$ to $n$:\n\n  * Define $l_i$ as the largest index $j < i$ such that $p_j > p_i$. If there is no such index, $l_i := i$. \n  * Define $r_i$ as the smallest index $j > i$ such that $p_j > p_i$. If there is no such index, $r_i := i$. \n\nInitially, you have an undirected graph with $n$ vertices (numbered from\n$1$ to $n$) and no edges. Then, for each $i$ from $1$ to\n$n$, add one edge to the graph:\n\n  * If $s_i =$ L, add the edge $(i, l_i)$ to the graph. \n  * If $s_i =$ R, add the edge $(i, r_i)$ to the graph. \n  * If $s_i =$ ?, either add the edge $(i, l_i)$ or the edge $(i, r_i)$ to the graph at your choice. \n\nFind the maximum possible diameter over all connected$^{\\text{\u2217}}$ graphs\nthat you can form. Output $-1$ if it is not possible to form any connected\ngraphs.\n\n$^{\\text{\u2217}}$ Let $d(s, t)$ denote the smallest number of edges on any\npath between $s$ and $t$.\n\nThe diameter of the graph is defined as the maximum value of $d(s, t)$\nover all pairs of vertices $s$ and $t$.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test\ncases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 4 \\cdot 10^5$) \u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1,p_2,\\ldots,\np_n$ ($1 \\le p_i \\le n$) \u2014 the elements of $p$, which are guaranteed\nto form a permutation.\n\nThe third line of each test case contains a string $s$ of length $n$.\nIt is guaranteed that it consists only of the characters L, R, and ?.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$4 \\cdot 10^5$.",
        "output": "For each test case, output the maximum possible diameter over all connected\ngraphs that you form, or $-1$ if it is not possible to form any connected\ngraphs.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n5\n2 1 4 3 5\nR?RL?\n2\n1 2\nLR\n3\n3 1 2\nL?R\n7\n5 3 1 6 4 2 7\n?R?R?R?\n5\n5 2 1 3 4\n?????\n6\n6 2 3 4 5 1\n?LLRLL\n8\n1 7 5 6 2 8 4 3\n?R??????\n12\n6 10 7 1 8 5 12 2 11 3 4 9\n????????????\n</pre></td>\n    <td><pre>3\n-1\n-1\n4\n4\n3\n5\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are two connected graphs (the labels are\nindices):\n\n![](CDN_BASE_URL/4561c9025a4357785c7aff0bb1bbff9a)|\n![](CDN_BASE_URL/a680f9e3bffa38fd90dd7bbc4c3e5f3b)  \n---|---  \n  \nThe graph on the left has a diameter of $2$, while the graph on the right\nhas a diameter of $3$, so the answer is $3$.\n\nIn the second test case, there are no connected graphs, so the answer is\n$-1$."
    },
    {
        "problem_id": "1987H",
        "url": "https://codeforces.com/problemset/problem/1987/H",
        "title": "Fumo Temple",
        "rating": 3500,
        "tags": [
            "interactive"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "This temple only magnifies the mountain's power.\n\nBadeline\n\nThis is an interactive problem.\n\nYou are given two positive integers $n$ and $m$ ($\\bf{n \\le m}$).\n\nThe jury has hidden from you a rectangular matrix $a$ with $n$ rows\nand $m$ columns, where $a_{i,j} \\in \\\\{ -1, 0, 1 \\\\}$ for all $1 \\le\ni \\le n$ and $1 \\le j \\le m$. The jury has also selected a cell $(i_0,\nj_0)$. Your goal is to find $(i_0,j_0)$.\n\nIn one query, you give a cell $(i, j)$, then the jury will reply with an\ninteger.\n\n  * If $(i, j) = (i_0, j_0)$, the jury will reply with $0$. \n  * Else, let $S$ be the sum of $a_{x,y}$ over all $x$ and $y$ such that $\\min(i, i_0) \\le x \\le \\max(i, i_0)$ and $\\min(j, j_0) \\le y \\le \\max(j, j_0)$. Then, the jury will reply with $|i - i_0| + |j - j_0| + |S|$. \n\nFind $(i_0, j_0)$ by making at most $n + 225$ queries.\n\nNote: the grader is not adaptive: $a$ and $(i_0,j_0)$ are fixed before\nany queries are made.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 50$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe only line of each test case contains two integers $n$ and $m$\n($1 \\le n \\le m \\le 5000$) \u2014 the numbers of rows and the number of columns\nof the hidden matrix $a$ respectively.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not\nexceed $25 \\cdot 10^6$.",
        "output": "",
        "interaction": "The interaction for each test case begins by reading the integers $n$ and\n$m$.\n\nTo make a query, output \"? i j\" ($1 \\le i \\le n, 1 \\le j \\le m$) without\nquotes. Afterwards, you should read one single integer \u2014 the answer to your\nquery.\n\nIf you receive the integer $-1$ instead of an answer or a valid value of\n$n$ or $m$, it means your program has made an invalid query, has\nexceeded the limit of queries, or has given an incorrect answer on the\nprevious test case. Your program must terminate immediately to receive a Wrong\nAnswer verdict. Otherwise, you can get an arbitrary verdict because your\nsolution will continue to read from a closed stream.\n\nWhen you are ready to give the final answer, output \"! i j\" ($1 \\le i \\le n,\n1 \\le j \\le m$) without quotes \u2014 the indices of the hidden cell. After\nsolving a test case, your program should move to the next one immediately.\nAfter solving all test cases, your program should be terminated immediately.\n\nAfter printing a query do not forget to output end of line and flush the\noutput. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\nHacks\n\nTo hack, use the following format:\n\nThe first line contains an integer $t$ ($1 \\le t \\le 50$) \u2014 the number\nof test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\le n \\le m \\le 5000$) \u2014 the sizes of the hidden matrix.\n\nThe second line of each test case contains two integers $i_0$ and\n$j_0$ ($1 \\le i_0 \\le n, 1 \\le j_0 \\le m$) \u2014 the hidden cell.\n\nThen $n$ lines follow. The $i$-th of them contains the string\n$s_i$ of length $n$, consisting only of the characters -, 0, and +.\nHere, $a_{ij} = -1$ if $s_{ij} = \\mathtt{-}$, $a_{ij} = 0$ if\n$s_{ij} = \\mathtt{0}$, and $a_{ij} = 1$ if $s_{ij} = \\mathtt{+}$.\n\nThe sum of $n \\cdot m$ over all test cases should not exceed $25 \\cdot\n10^6$.\n\nAs an example, the hack format for the example input is:\n\n$\\texttt{2}\\\\\\ \\texttt{3}\\,\\texttt{4} \\\\\\ \\texttt{1}\\,\\texttt{4} \\\\\\\n\\texttt{+0+0} \\\\\\ \\texttt{+00+} \\\\\\ \\texttt{0---} \\\\\\\n\\texttt{1}\\,\\texttt{1}\\\\\\\\\\texttt{1}\\,\\texttt{1}\\\\\\\\\\texttt{0}$",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3 4\n\n5\n\n3\n\n5\n\n1 1\n\n0\n\n</pre></td>\n    <td><pre>\n\n? 1 1\n\n? 3 3\n\n? 3 2\n\n! 1 4\n\n? 1 1\n\n! 1 1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The hidden matrix in the first test case:\n\n$1$| $0$| $1$| $\\color{red}{\\textbf{0}}$  \n---|---|---|---  \n$1$| $0$| $0$| $1$  \n$0$| $-1$| $-1$| $-1$  \n  \nThe hidden matrix in the second test case:\n\n$\\color{red}{\\textbf{0}}$  \n---  \n  \nNote that the line breaks in the example input and output are for the sake of\nclarity, and do not occur in the real interaction."
    },
    {
        "problem_id": "1988A",
        "url": "https://codeforces.com/problemset/problem/1988/A",
        "title": "Split the Multiset",
        "rating": 900,
        "tags": [
            "brute force",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 512,
        "description": "A multiset is a set of numbers in which there can be equal elements, and the\norder of the numbers does not matter. For example, $\\\\{2,2,4\\\\}$ is a\nmultiset.\n\nYou have a multiset $S$. Initially, the multiset contains only one\npositive integer $n$. That is, $S=\\\\{n\\\\}$. Additionally, there is a\ngiven positive integer $k$.\n\nIn one operation, you can select any positive integer $u$ in $S$ and\nremove one copy of $u$ from $S$. Then, insert no more than $k$\npositive integers into $S$ so that the sum of all inserted integers is\nequal to $u$.\n\nFind the minimum number of operations to make $S$ contain $n$ ones.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). Description of the test cases\nfollows.\n\nThe only line of each testcase contains two integers $n,k$ ($1\\le n\\le\n1000,2\\le k\\le 1000$).",
        "output": "For each testcase, print one integer, which is the required answer.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 5\n5 2\n6 3\n16 4\n</pre></td>\n    <td><pre>0\n4\n3\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, initially $S=\\\\{1\\\\}$, already satisfying the\nrequirement. Therefore, we need zero operations.\n\nFor the second test case, initially $S=\\\\{5\\\\}$. We can apply the\nfollowing operations:\n\n  * Select $u=5$, remove $u$ from $S$, and insert $2,3$ into $S$. Now, $S=\\\\{2,3\\\\}$. \n  * Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\\\{1,1,3\\\\}$. \n  * Select $u=3$, remove $u$ from $S$, and insert $1,2$ into $S$. Now, $S=\\\\{1,1,1,2\\\\}$. \n  * Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\\\{1,1,1,1,1\\\\}$. \n\nUsing $4$ operations in total, we achieve the goal.\n\nFor the third test case, initially $S=\\\\{6\\\\}$. We can apply the following\noperations:\n\n  * Select $u=6$, remove $u$ from $S$, and insert $1,2,3$ into $S$. Now, $S=\\\\{1,2,3\\\\}$. \n  * Select $u=2$, remove $u$ from $S$, and insert $1,1$ into $S$. Now, $S=\\\\{1,1,1,3\\\\}$. \n  * Select $u=3$, remove $u$ from $S$, and insert $1,1,1$ into $S$. Now, $S=\\\\{1,1,1,1,1,1\\\\}$. \n\nUsing $3$ operations in total, we achieve the goal.\n\nFor the fourth test case, initially $S=\\\\{16\\\\}$. We can apply the\nfollowing operations:\n\n  * Select $u=16$, remove $u$ from $S$, and insert $4,4,4,4$ into $S$. Now, $S=\\\\{4,4,4,4\\\\}$. \n  * Repeat for $4$ times: select $u=4$, remove $u$ from $S$, and insert $1,1,1,1$ into $S$. \n\nUsing $5$ operations in total, we achieve the goal."
    },
    {
        "problem_id": "1988B",
        "url": "https://codeforces.com/problemset/problem/1988/B",
        "title": "Make Majority",
        "rating": 900,
        "tags": [
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 512,
        "description": "You are given a sequence $[a_1,\\ldots,a_n]$ where each element $a_i$\nis either $0$ or $1$. You can apply several (possibly zero) operations\nto the sequence. In each operation, you select two integers $1\\le l\\le r\\le\n|a|$ (where $|a|$ is the current length of $a$) and replace\n$[a_l,\\ldots,a_r]$ with a single element $x$, where $x$ is the\nmajority of $[a_l,\\ldots,a_r]$.\n\nHere, the majority of a sequence consisting of $0$ and $1$ is defined\nas follows: suppose there are $c_0$ zeros and $c_1$ ones in the\nsequence, respectively.\n\n  * If $c_0\\ge c_1$, the majority is $0$. \n  * If $c_0<c_1$, the majority is $1$. \n\nFor example, suppose $a=[1,0,0,0,1,1]$. If we select $l=1,r=2$, the\nresulting sequence will be $[0,0,0,1,1]$. If we select $l=4,r=6$, the\nresulting sequence will be $[1,0,0,1]$.\n\nDetermine if you can make $a=[1]$ with a finite number of operations.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 4\\cdot 10^4$). Description of the test\ncases follows.\n\nThe first line of each testcase contains one integer $n$ ($1\\le n\\le\n2\\cdot 10^5$).\n\nThe second line of each testcase contains a string consisting of $0$ and\n$1$, describing the sequence $a$.\n\nIt's guaranteed that the sum of $n$ over all testcases does not exceed\n$2\\cdot 10^5$.",
        "output": "For each testcase, if it's possible to make $a=[1]$, print YES. Otherwise,\nprint NO. You can output the answer in any case (upper or lower). For example,\nthe strings yEs, yes, Yes, and YES will be recognized as positive responses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1\n0\n1\n1\n2\n01\n9\n100000001\n9\n000011000\n</pre></td>\n    <td><pre>No\nYes\nNo\nYes\nNo\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the fourth testcase of the example, initially $a=[1,0,0,0,0,0,0,0,1]$.\nA valid sequence of operations is:\n\n  1. Select $l=2,r=8$ and apply the operation. $a$ becomes $[1,0,1]$. \n  2. Select $l=1,r=3$ and apply the operation. $a$ becomes $[1]$."
    },
    {
        "problem_id": "1988C",
        "url": "https://codeforces.com/problemset/problem/1988/C",
        "title": "Increasing Sequence with Fixed OR",
        "rating": 1300,
        "tags": [
            "bitmasks",
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "You are given a positive integer $n$. Find the longest sequence of\npositive integers $a=[a_1,a_2,\\ldots,a_k]$ that satisfies the following\nconditions, and print the sequence:\n\n  * $a_i\\le n$ for all $1\\le i\\le k$. \n  * $a$ is strictly increasing. That is, $a_i>a_{i-1}$ for all $2\\le i\\le k$. \n  * $a_i\\,|\\,a_{i-1}=n$ for all $2\\le i\\le k$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). Description of the test cases\nfollows.\n\nThe only line of each test case contains one integer $n$ ($1\\le n\\le\n10^{18}$).\n\nIt's guaranteed that the sum of lengths of the longest valid sequences does\nnot exceed $5\\cdot 10^5$.",
        "output": "For each testcase, print two lines. In the first line, print the length of\nyour constructed sequence, $k$. In the second line, print $k$ positive\nintegers, denoting the sequence. If there are multiple longest sequences, you\ncan print any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1\n3\n14\n23\n</pre></td>\n    <td><pre>1\n1\n3\n1 2 3\n4\n4 10 12 14\n5\n7 18 21 22 23</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1988D",
        "url": "https://codeforces.com/problemset/problem/1988/D",
        "title": "The Omnipotent Monster Killer",
        "rating": 2000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "You, the monster killer, want to kill a group of monsters. The monsters are on\na tree with $n$ vertices. On vertex with number $i$ ($1\\le i\\le\nn$), there is a monster with $a_i$ attack points. You want to battle\nwith monsters for $10^{100}$ rounds.\n\nIn each round, the following happens in order:\n\n  1. All living monsters attack you. Your health decreases by the sum of attack points of all living monsters. \n  2. You select some (possibly all or none) monsters and kill them. After being killed, the monster will not be able to do any attacks in the future. \n\nThere is a restriction: in one round, you cannot kill two monsters that are\ndirectly connected by an edge.\n\nIf you choose what monsters to attack optimally, what is the smallest health\ndecrement you can have after all rounds?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). Description of the test cases\nfollows.\n\nThe first line of each test case contains an integer $n$ ($1\\le n\\le\n3\\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers\n$a_1,\\ldots,a_n$ ($1\\le a_i\\le 10^{12}$).\n\nThe following $n-1$ lines each contain two integers $x,y$ ($1\\le\nx,y\\le n$), denoting an edge on the tree connecting vertex $x$ and\n$y$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$3\\cdot 10^5$.",
        "output": "For each test case, print one integer: the minimum possible health decrement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1\n1000000000000\n5\n47 15 32 29 23\n1 2\n1 3\n2 4\n2 5\n7\n8 10 2 3 5 7 4\n1 2\n1 4\n3 2\n5 3\n6 2\n7 5\n</pre></td>\n    <td><pre>1000000000000\n193\n57\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, an optimal sequence of operations would be:\n\n  * In the first round: first, receive the attack from the monster on vertex $1$, so your health decreases by $10^{12}$. Then kill the monster on vertex $1$. \n  * In the second round to the $10^{100}$-th round: all monsters have been killed, so nothing happens. \n\nThe total health decrement is $10^{12}$.\n\nIn the second test case, an optimal sequence of operations would be:\n\n  * In the first round: first, receive the attack from the monster on vertex $1,2,3,4,5$, so your health decreases by $47+15+32+29+23=146$. Then kill the monsters on vertex $1,4,5$. \n  * In the second round: first, receive the attack from the monster on vertex $2,3$, so your health decreases by $15+32=47$. Then kill the monsters on vertex $2,3$. \n  * In the third round to the $10^{100}$-th round: all monsters have been killed, so nothing happens. \n\nThe total health decrement is $193$.\n\nIn the third test case, an optimal sequence of operations would be:\n\n  * In the first round: first, receive the attack from the monster on vertex $1,2,3,4,5,6,7$, so your health decreases by $8+10+2+3+5+7+4=39$. Then kill the monsters on vertex $1,3,6,7$. \n  * In the second round: first, receive the attack from the monster on vertex $2,4,5$, so your health decreases by $10+3+5=18$. Then kill the monsters on vertex $2,4,5$. \n  * In the third round to the $10^{100}$-th round: all monsters have been killed, so nothing happens. \n\nThe total health decrement is $57$."
    },
    {
        "problem_id": "1988E",
        "url": "https://codeforces.com/problemset/problem/1988/E",
        "title": "Range Minimum Sum",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "divide and conquer",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "For an array $[a_1,a_2,\\ldots,a_n]$ of length $n$, define $f(a)$\nas the sum of the minimum element over all subsegments. That is,\n$$f(a)=\\sum_{l=1}^n\\sum_{r=l}^n \\min_{l\\le i\\le r}a_i.$$\n\nA permutation is a sequence of integers from $1$ to $n$ of length\n$n$ containing each number exactly once. You are given a permutation\n$[a_1,a_2,\\ldots,a_n]$. For each $i$, solve the following problem\nindependently:\n\n  * Erase $a_i$ from $a$, concatenating the remaining parts, resulting in $b = [a_1,a_2,\\ldots,a_{i-1},\\;a_{i+1},\\ldots,a_{n}]$. \n  * Calculate $f(b)$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^5$). Description of the test cases\nfollows.\n\nThe first line of each test case contains an integer $n$ ($1\\le n\\le\n5\\cdot 10^5$).\n\nThe second line of each test case contains $n$ distinct integers\n$a_1,\\ldots,a_n$ ($1\\le a_i\\le n$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, print one line containing $n$ integers. The $i$-th\ninteger should be the answer when erasing $a_i$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1\n1\n3\n3 1 2\n5\n4 2 1 5 3\n8\n8 1 4 6 7 3 5 2\n</pre></td>\n    <td><pre>0 \n4 7 5 \n19 21 27 17 19 \n79 100 72 68 67 80 73 80 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second test case, $a=[3,1,2]$.\n\n  * When removing $a_1$, $b=[1,2]$. $f(b)=1+2+\\min\\\\{1,2\\\\}=4$. \n  * When removing $a_2$, $b=[3,2]$. $f(b)=3+2+\\min\\\\{3,2\\\\}=7$. \n  * When removing $a_3$, $b=[3,1]$. $f(b)=3+1+\\min\\\\{3,1\\\\}=5$."
    },
    {
        "problem_id": "1988F",
        "url": "https://codeforces.com/problemset/problem/1988/F",
        "title": "Heartbeat",
        "rating": 3000,
        "tags": [
            "combinatorics",
            "dp",
            "fft",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 512,
        "description": "For an array $u_1, u_2, \\ldots, u_n$, define\n\n  * a prefix maximum as an index $i$ such that $u_i>u_j$ for all $j<i$; \n  * a suffix maximum as an index $i$ such that $u_i>u_j$ for all $j>i$; \n  * an ascent as an index $i$ ($i>1$) such that $u_i>u_{i-1}$. \n\nYou are given three cost arrays: $[a_1, a_2, \\ldots, a_n]$, $[b_1, b_2,\n\\ldots, b_n]$, and $[c_0, c_1, \\ldots, c_{n-1}]$.\n\nDefine the cost of an array that has $x$ prefix maximums, $y$ suffix\nmaximums, and $z$ ascents as $a_x\\cdot b_y\\cdot c_z$.\n\nLet the sum of costs of all permutations of $1,2,\\ldots,n$ be $f(n)$.\nFind $f(1)$, $f(2)$, ..., $f(n)$ modulo $998\\,244\\,353$.",
        "input": "The first line contains an integer $n$ ($1\\le n\\le 700$).\n\nThe second line contains $n$ integers $a_1,\\ldots,a_n$ ($0\\le\na_i<998\\,244\\,353$).\n\nThe third line contains $n$ integers $b_1,\\ldots,b_n$ ($0\\le\nb_i<998\\,244\\,353$).\n\nThe fourth line contains $n$ integers $c_0,\\ldots,c_{n-1}$ ($0\\le\nc_i<998\\,244\\,353$).",
        "output": "Print $n$ integers: the $i$-th one is $f(i)$ modulo\n$998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1 1 1\n1 1 1\n1 1 1\n</pre></td>\n    <td><pre>1 2 6 </pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1 2 3\n2 3 1\n3 1 2\n</pre></td>\n    <td><pre>6 13 34 </pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1 4 2 5 3\n2 5 1 3 4\n300000000 100000000 500000000 400000000 200000000\n</pre></td>\n    <td><pre>600000000 303511294 612289529 324650937 947905622 </pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second example:\n\n  * Consider permutation $[1,2,3]$. Indices $1,2,3$ are prefix maximums. Index $3$ is the only suffix maximum. Indices $2,3$ are ascents. In conclusion, it has $3$ prefix maximums, $1$ suffix maximums, and $2$ ascents. Therefore, its cost is $a_3b_1c_2=12$. \n  * Permutation $[1,3,2]$ has $2$ prefix maximums, $2$ suffix maximums, and $1$ ascent. Its cost is $6$. \n  * Permutation $[2,1,3]$ has $2$ prefix maximums, $1$ suffix maximum, and $1$ ascent. Its cost is $4$. \n  * Permutation $[2,3,1]$ has $2$ prefix maximums, $2$ suffix maximums, and $1$ ascent. Its cost is $6$. \n  * Permutation $[3,1,2]$ has $1$ prefix maximum, $2$ suffix maximums, and $1$ ascent. Its cost is $3$. \n  * Permutation $[3,2,1]$ has $1$ prefix maximum, $3$ suffix maximums, and $0$ ascents. Its cost is $3$. \n\nThe sum of all permutations' costs is $34$, so $f(3)=34$."
    },
    {
        "problem_id": "1989A",
        "url": "https://codeforces.com/problemset/problem/1989/A",
        "title": "Catch the Coin",
        "rating": 800,
        "tags": [
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Monocarp visited a retro arcade club with arcade cabinets. There got curious\nabout the \"Catch the Coin\" cabinet.\n\nThe game is pretty simple. The screen represents a coordinate grid such that:\n\n  * the X-axis is directed from left to right; \n  * the Y-axis is directed from bottom to top; \n  * the center of the screen has coordinates $(0, 0)$. \n\nAt the beginning of the game, the character is located in the center, and\n$n$ coins appear on the screen \u2014 the $i$-th coin is at coordinates\n$(x_i, y_i)$. The coordinates of all coins are different and not equal to\n$(0, 0)$.\n\nIn one second, Monocarp can move the character in one of eight directions. If\nthe character is at coordinates $(x, y)$, then it can end up at any of the\ncoordinates $(x, y + 1)$, $(x + 1, y + 1)$, $(x + 1, y)$, $(x +\n1, y - 1)$, $(x, y - 1)$, $(x - 1, y - 1)$, $(x - 1, y)$, $(x\n- 1, y + 1)$.\n\nIf the character ends up at the coordinates with a coin, then Monocarp\ncollects that coin.\n\nAfter Monocarp makes a move, all coins fall down by $1$, that is, they\nmove from $(x, y)$ to $(x, y - 1)$. You can assume that the game field\nis infinite in all directions.\n\nMonocarp wants to collect at least one coin, but cannot decide which coin to\ngo for. Help him determine, for each coin, whether he can collect it.",
        "input": "The first line contains a single integer $n$ ($1 \\le n \\le 500$) \u2014 the\nnumber of coins.\n\nIn the $i$-th of the next $n$ lines, two integers $x_i$ and\n$y_i$ ($-50 \\le x_i, y_i \\le 50$) are written \u2014 the coordinates of the\n$i$-th coin. The coordinates of all coins are different. No coin is\nlocated at $(0, 0)$.",
        "output": "For each coin, print \"YES\" if Monocarp can collect it. Otherwise, print \"NO\".",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n24 42\n-2 -1\n-1 -2\n0 -50\n15 0\n</pre></td>\n    <td><pre>YES\nYES\nNO\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Pay attention to the second coin in the example. Monocarp can first move from\n$(0, 0)$ to $(-1, -1)$. Then the coin falls $1$ down and ends up\nat $(-2, -2)$. Finally, Monocarp moves to $(-2, -2)$ and collects the\ncoin."
    },
    {
        "problem_id": "1989B",
        "url": "https://codeforces.com/problemset/problem/1989/B",
        "title": "Substring and Subsequence",
        "rating": 1200,
        "tags": [
            "brute force",
            "greedy",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given two strings $a$ and $b$, both consisting of lowercase\nLatin letters.\n\nA subsequence of a string is a string which can be obtained by removing\nseveral (possibly zero) characters from the original string. A substring of a\nstring is a contiguous subsequence of that string.\n\nFor example, consider the string abac:\n\n  * a, b, c, ab, aa, ac, ba, bc, aba, abc, aac, bac and abac are its subsequences; \n  * a, b, c, ab, ba, ac, aba, bac and abac are its substrings. \n\nYour task is to calculate the minimum possible length of the string that\ncontains $a$ as a substring and $b$ as a subsequence.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^3$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a string $a$ ($1 \\le |a| \\le\n100$), consisting of lowercase Latin letters.\n\nThe second line of each test case contains a string $b$ ($1 \\le |b| \\le\n100$), consisting of lowercase Latin letters.",
        "output": "For each test case, print a single integer \u2014 the minimum possible length of\nthe string that contains $a$ as a substring and $b$ as a subsequence.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\naba\ncb\ner\ncf\nmmm\nmmm\ncontest\ntest\ncde\nabcefg\n</pre></td>\n    <td><pre>4\n4\n3\n7\n7\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the examples below, the characters that correspond to the subsequence equal\nto $b$ are bolded.\n\nIn the first example, one of the possible answers is caba.\n\nIn the second example, one of the possible answers is ercf.\n\nIn the third example, one of the possible answers is mmm.\n\nIn the fourth example, one of the possible answers is contest.\n\nIn the fifth example, one of the possible answers is abcdefg."
    },
    {
        "problem_id": "1989C",
        "url": "https://codeforces.com/problemset/problem/1989/C",
        "title": "Two Movies",
        "rating": 1400,
        "tags": [
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "A movie company has released $2$ movies. These $2$ movies were watched\nby $n$ people. For each person, we know their attitude towards the first\nmovie (liked it, neutral, or disliked it) and towards the second movie.\n\nIf a person is asked to leave a review for the movie, then:\n\n  * if that person liked the movie, they will leave a positive review, and the movie's rating will increase by $1$; \n  * if that person disliked the movie, they will leave a negative review, and the movie's rating will decrease by $1$; \n  * otherwise, they will leave a neutral review, and the movie's rating will not change. \n\nEvery person will review exactly one movie \u2014 and for every person, you can\nchoose which movie they will review.\n\nThe company's rating is the minimum of the ratings of the two movies. Your\ntask is to calculate the maximum possible rating of the company.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-1\n\\le a_i \\le 1$), where $a_i$ is equal to $-1$ if the first movie was\ndisliked by the $i$-th viewer; equal to $1$ if the first movie was\nliked; and $0$ if the attitude is neutral.\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($-1 \\le\nb_i \\le 1$), where $b_i$ is equal to $-1$ if the second movie was\ndisliked by the $i$-th viewer; equal to $1$ if the second movie was\nliked; and $0$ if the attitude is neutral.\n\nAdditional constraint on the input: the sum of $n$ over all test cases\ndoes not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, print a single integer \u2014 the maximum possible rating of\nthe company, if for each person, choose which movie to leave a review on.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n-1 1\n-1 -1\n1\n-1\n-1\n5\n0 -1 1 0 1\n-1 1 0 0 1\n4\n-1 -1 -1 1\n-1 1 1 1\n</pre></td>\n    <td><pre>0\n-1\n1\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1989D",
        "url": "https://codeforces.com/problemset/problem/1989/D",
        "title": "Smithing Skill",
        "rating": 1900,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "math",
            "sortings",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "You are playing a famous computer game (that just works) where you have\nvarious skills you can level up. Today, you focused on the \"Smithing\" skill.\nYour tactic is obvious: forging weapons from ingots and then melting them back\nto return the materials partially. For simplicity, every time you create an\nitem, you get $1$ experience point, and every time you melt an item, you\nalso get $1$ experience point.\n\nThere are $n$ classes of weapons you can forge and $m$ types of metal\ningots.\n\nYou can create one weapon of the $i$-th class, spending $a_i$ ingots\nof metal of the same type. Melting a weapon of the $i$-th class (which you\ncrafted earlier) returns you $b_i$ ingots of the type of metal it was made\nof.\n\nYou have $c_j$ metal ingots of the $j$-th type, and you know that you\ncan craft a weapon of any class from any metal type. Each combination of a\nweapon class and a metal type can be used any number of times.\n\nWhat is the maximum total amount of experience you can earn by crafting and\nmelting weapons?",
        "input": "The first line contains two integers $n$ and $m$ ($1 \\le n, m \\le\n10^6$) \u2014 the number of weapon classes and metal types.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le\na_i \\le 10^6$), where $a_i$ is the number of ingots you need to forge\none weapon of the $i$-th class.\n\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n$ ($0 \\le\nb_i < a_i$), where $b_i$ is the number of ingots you return by melting\none weapon of the $i$-th class you forged earlier.\n\nThe fourth line contains $m$ integers $c_1, c_2, \\dots, c_m$ ($1 \\le\nc_j \\le 10^9$) \u2014 the number of ingots you have of the corresponding metal\ntype.",
        "output": "Print one integer \u2014 the maximum total experience points you can gain by\nrepeatedly forging and melting weapons.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5 3\n9 6 7 5 5\n8 4 5 1 2\n10 4 7\n</pre></td>\n    <td><pre>12\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3 4\n10 20 20\n0 0 0\n9 10 19 20\n</pre></td>\n    <td><pre>8\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1 5\n3\n1\n1000000000 1000000000 1000000000 1000000000 1000000000\n</pre></td>\n    <td><pre>4999999990\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, you can do the following:\n\n  1. craft one weapon of the $1$-st class from the $1$-st type of metal, spending $9$ ingots; \n  2. melt that weapon, returning $8$ ingots of the $1$-st metal type; \n  3. again, craft and melt one weapon of the $1$-st class from the $1$-st metal type; \n  4. craft and melt one weapon of the $3$-rd class from the $1$-st metal type; \n  5. craft and melt one weapon of the $3$-rd class from the $3$-rd metal type; \n  6. craft and melt one weapon of the $4$-th class from the $1$-st metal type; \n  7. craft and melt one weapon of the $5$-th class from the $3$-rd metal type; \n\nIn the end you'll have $c = [2, 4, 2]$ ingots left. In total, you've\ncrafted $6$ weapons and melted $6$ weapons, gaining $12$\nexperience points in total."
    },
    {
        "problem_id": "1989E",
        "url": "https://codeforces.com/problemset/problem/1989/E",
        "title": "Distance to Different",
        "rating": 2300,
        "tags": [
            "combinatorics",
            "dp",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Consider an array $a$ of $n$ integers, where every element is from\n$1$ to $k$, and every integer from $1$ to $k$ appears at least\nonce.\n\nLet the array $b$ be constructed as follows: for the $i$-th element of\n$a$, $b_i$ is the distance to the closest element in $a$ which is\nnot equal to $a_i$. In other words, $b_i = \\min \\limits_{j \\in [1, n],\na_j \\ne a_i} |i - j|$.\n\nFor example, if $a = [1, 1, 2, 3, 3, 3, 3, 1]$, then $b = [2, 1, 1, 1,\n2, 2, 1, 1]$.\n\nCalculate the number of different arrays $b$ you can obtain if you\nconsider all possible arrays $a$, and print it modulo $998244353$.",
        "input": "The only line of the input contains two integers $n$ and $k$ ($2 \\le\nn \\le 2 \\cdot 10^5$; $2 \\le k \\le \\min(n, 10)$).",
        "output": "Print one integer \u2014 the number of different arrays $b$ you can obtain,\ntaken modulo $998244353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2 2\n</pre></td>\n    <td><pre>1\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4 3\n</pre></td>\n    <td><pre>3\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6 2\n</pre></td>\n    <td><pre>20\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6 5\n</pre></td>\n    <td><pre>3\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>133 7\n</pre></td>\n    <td><pre>336975971\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1989F",
        "url": "https://codeforces.com/problemset/problem/1989/F",
        "title": "Simultaneous Coloring",
        "rating": 3000,
        "tags": [
            "dfs and similar",
            "divide and conquer",
            "graphs"
        ],
        "div": "Div. 2",
        "time_limit_ms": 6000,
        "memory_limit_mb": 512,
        "description": "You are given a matrix, consisting of $n$ rows and $m$ columns.\n\nYou can perform two types of actions on it:\n\n  * paint the entire column in blue; \n  * paint the entire row in red. \n\nNote that you cannot choose which color to paint the row or column.\n\nIn one second, you can perform either one action or multiple actions at the\nsame time. If you perform one action, it will be free. If you perform $k >\n1$ actions at the same time, it will cost $k^2$ coins. When multiple\nactions are performed at the same time, for each cell affected by actions of\nboth types, the color can be chosen independently.\n\nYou are asked to process $q$ queries. Before each query, all cells become\ncolorless. Initially, there are no restrictions on the color of any cells. In\nthe $i$-th query, a restriction of the following form is added:\n\n  * $x_i~y_i~c_i$ \u2014 the cell in row $x_i$ in column $y_i$ should be painted in color $c_i$. \n\nThus, after $i$ queries, there are $i$ restrictions on the required\ncolors of the matrix cells. After each query, output the minimum cost of\npainting the matrix according to the restrictions.",
        "input": "The first line contains three integers $n, m$ and $q$ ($1 \\le n, m,\nq \\le 2 \\cdot 10^5$) \u2014 the size of the matrix and the number of queries.\n\nIn the $i$-th of the next $q$ lines, two integers $x_i, y_i$ and a\ncharacter $c_i$ ($1 \\le x_i \\le n$; $1 \\le y_i \\le m$; $c_i\n\\in$ {'R', 'B'}, where 'R' means red, and 'B' means blue) \u2014 description of\nthe $i$-th restriction. The cells in all queries are pairwise distinct.",
        "output": "Print $q$ integers \u2014 after each query, output the minimum cost of painting\nthe matrix according to the restrictions.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2 2 4\n1 1 R\n2 2 R\n1 2 B\n2 1 B\n</pre></td>\n    <td><pre>0\n0\n0\n16\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3 5 10\n1 1 B\n2 5 B\n2 2 B\n2 3 R\n2 1 B\n3 2 R\n3 3 B\n1 2 R\n1 3 B\n3 1 B\n</pre></td>\n    <td><pre>0\n0\n0\n0\n0\n0\n16\n16\n25\n25\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1990A",
        "url": "https://codeforces.com/problemset/problem/1990/A",
        "title": "Submission Bait",
        "rating": 900,
        "tags": [
            "brute force",
            "games",
            "greedy",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice and Bob are playing a game in an array $a$ of size $n$.\n\nThey take turns to do operations, with Alice starting first. The player who\ncan not operate will lose. At first, a variable $mx$ is set to $0$.\n\nIn one operation, a player can do:\n\n  * Choose an index $i$ ($1 \\le i \\le n$) such that $a_{i} \\geq mx$ and set $mx$ to $a_{i}$. Then, set $a_{i}$ to $0$.\n\nDetermine whether Alice has a winning strategy.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^3$) \u2014 the\nnumber of test cases.\n\nFor each test case:\n\n  * The first line contains an integer $n$ ($2 \\leq n \\leq 50$) \u2014 the size of the array. \n  * The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$) \u2014 the elements of the array.",
        "output": "For each test case, if Alice has a winning strategy, output \"YES\". Otherwise,\noutput \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n2 1\n2\n1 1\n3\n3 3 3\n4\n3 3 4 4\n4\n1 2 2 2\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Alice can choose $i=1$ since $a_1=2 \\ge mx=0$.\n\nAfter Alice's operation, $a=[0,1]$ and $mx=2$. Bob can not do any\noperation. Alice wins.\n\nIn the second test case, Alice doesn't have a winning strategy.\n\nFor example, if Alice chooses $i=1$, after Alice's operation:\n$a=[0,1]$ and $mx=1$. Then, Bob can choose $i=2$ since $a_2=1\n\\ge mx=1$. After Bob's operation: $a=[0,0]$ and $mx=1$. Alice can\nnot do any operation. Bob wins."
    },
    {
        "problem_id": "1990B",
        "url": "https://codeforces.com/problemset/problem/1990/B",
        "title": "Array Craft",
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "For an array $b$ of size $m$, we define:\n\n  * the maximum prefix position of $b$ is the smallest index $i$ that satisfies $b_1+\\ldots+b_i=\\max_{j=1}^{m}(b_1+\\ldots+b_j)$;\n  * the maximum suffix position of $b$ is the largest index $i$ that satisfies $b_i+\\ldots+b_m=\\max_{j=1}^{m}(b_j+\\ldots+b_m)$.\n\nYou are given three integers $n$, $x$, and $y$ ($x > y$).\nConstruct an array $a$ of size $n$ satisfying:\n\n  * $a_i$ is either $1$ or $-1$ for all $1 \\le i \\le n$;\n  * the maximum prefix position of $a$ is $x$;\n  * the maximum suffix position of $a$ is $y$.\n\nIf there are multiple arrays that meet the conditions, print any. It can be\nproven that such an array always exists under the given conditions.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nFor each test case:\n\n  * The only line contains three integers $n$, $x$, and $y$ ($2 \\leq n \\leq 10^5, 1 \\le y \\lt x \\le n)$. \n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed\n$10^5$.",
        "output": "For each test case, output $n$ space-separated integers $a_1, a_2,\n\\ldots, a_n$ in a new line.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2 2 1\n4 4 3\n6 5 1\n</pre></td>\n    <td><pre>1 1\n1 -1 1 1\n1 1 -1 1 1 -1</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second test case,\n\n  * $i=x=4$ is the smallest index that satisfies $a_1+\\ldots +a_i=\\max_{j=1}^{n}(a_1+\\ldots+a_j)=2$;\n  * $i=y=3$ is the greatest index that satisfies $a_i+\\ldots +a_n=\\max_{j=1}^{n}(a_j+\\ldots+a_n)=2$.\n\nThus, the array $a=[1,-1,1,1]$ is considered correct."
    },
    {
        "problem_id": "1990C",
        "url": "https://codeforces.com/problemset/problem/1990/C",
        "title": "Mad MAD Sum",
        "rating": 1500,
        "tags": [
            "brute force",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "We define the $\\operatorname{MAD}$ (Maximum Appearing Duplicate) in an\narray as the largest number that appears at least twice in the array.\nSpecifically, if there is no number that appears at least twice, the\n$\\operatorname{MAD}$ value is $0$.\n\nFor example, $\\operatorname{MAD}([1, 2, 1]) = 1$,\n$\\operatorname{MAD}([2, 2, 3, 3]) = 3$, $\\operatorname{MAD}([1, 2, 3,\n4]) = 0$.\n\nYou are given an array $a$ of size $n$. Initially, a variable\n$sum$ is set to $0$.\n\nThe following process will be executed in a sequential loop until all numbers\nin $a$ become $0$:\n\n  1. Set $sum := sum + \\sum_{i=1}^{n} a_i$; \n  2. Let $b$ be an array of size $n$. Set $b_i :=\\ \\operatorname{MAD}([a_1, a_2, \\ldots, a_i])$ for all $1 \\le i \\le n$, and then set $a_i := b_i$ for all $1 \\le i \\le n$. \n\nFind the value of $sum$ after the process.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 2 \\cdot 10^4$)\n\u2014 the number of test cases.\n\nFor each test case:\n\n  * The first line contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) \u2014 the size of the array $a$; \n  * The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n$) \u2014 the elements of the array. \n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output the value of $sum$ in a new line.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1\n1\n3\n2 2 3\n4\n2 1 1 2\n4\n4 4 4 4\n</pre></td>\n    <td><pre>1\n13\n9\n40\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $a=[1]$ initially.\n\nIn the first loop:\n\n  1. Set $sum := sum + a_1 = 0+1=1$; \n  2. Set $b_1 :=\\ \\operatorname{MAD}([a_1])=\\ \\operatorname{MAD}([1])=0$, and then set $a_1 := b_1$. \n\nAfter the first loop, $a=[0]$ and the process ends. The value of $sum$\nafter the process is $1$.\n\nIn the second test case, $a=[2,2,3]$ initially.\n\nAfter the first loop, $a=[0,2,2]$ and $sum=7$.\n\nAfter the second loop, $a=[0,0,2]$ and $sum=11$.\n\nAfter the third loop, $a=[0,0,0]$ and $sum=13$. Then the process ends.\n\nThe value of $sum$ after the process is $13$."
    },
    {
        "problem_id": "1990D",
        "url": "https://codeforces.com/problemset/problem/1990/D",
        "title": "Grid Puzzle",
        "rating": 1800,
        "tags": [
            "bitmasks",
            "brute force",
            "dp",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given an array $a$ of size $n$.\n\nThere is an $n \\times n$ grid. In the $i$-th row, the first $a_i$\ncells are black and the other cells are white. In other words, note\n$(i,j)$ as the cell in the $i$-th row and $j$-th column, cells\n$(i,1), (i,2), \\ldots, (i,a_i)$ are black, and cells $(i,a_i+1), \\ldots,\n(i,n)$ are white.\n\nYou can do the following operations any number of times in any order:\n\n  * Dye a $2 \\times 2$ subgrid white; \n  * Dye a whole row white. Note you can not dye a whole column white. \n\nFind the minimum number of operations to dye all cells white.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nFor each test case:\n\n  * The first line contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) \u2014 the size of the array $a$. \n  * The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq n$). \n\nIt's guaranteed that the sum of $n$ over all test cases will not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of operations\nto dye all cells white.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n1\n0\n4\n2 4 4 2\n4\n3 2 1 0\n3\n0 3 0\n3\n0 1 3\n3\n3 1 0\n4\n3 1 0 3\n4\n0 2 2 2\n6\n1 3 4 2 0 4\n8\n2 2 5 2 3 4 2 4\n</pre></td>\n    <td><pre>0\n3\n2\n1\n2\n2\n3\n2\n4\n6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you don't need to do any operation.\n\nIn the second test case, you can do:\n\n  * Dye $(1,1), (1,2), (2,1)$, and $(2,2)$ white; \n  * Dye $(2,3), (2,4), (3,3)$, and $(3,4)$ white; \n  * Dye $(3,1), (3,2), (4,1)$, and $(4,2)$ white. \n\nIt can be proven $3$ is the minimum number of operations.\n\nIn the third test case, you can do:\n\n  * Dye the first row white; \n  * Dye $(2,1), (2,2), (3,1)$, and $(3,2)$ white. \n\nIt can be proven $2$ is the minimum number of operations."
    },
    {
        "problem_id": "1990E1",
        "url": "https://codeforces.com/problemset/problem/1990/E1",
        "title": "Catch the Mole(Easy Version)",
        "rating": 2500,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "interactive",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. The only difference is the limit on\nthe number of queries.\n\nThis is an interactive problem.\n\nYou are given a tree of $n$ nodes with node $1$ as its root node.\n\nThere is a hidden mole in one of the nodes. To find its position, you can pick\nan integer $x$ ($1 \\le x \\le n$) to make an inquiry to the jury. Next,\nthe jury will return $1$ when the mole is in subtree $x$. Otherwise,\nthe judge will return $0$. If the judge returns $0$ and the mole is\nnot in root node $1$, the mole will move to the parent node of the node it\nis currently on.\n\nUse at most $300$ operations to find the current node where the mole is\nlocated.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 100$). The description of the test cases\nfollows.",
        "output": "",
        "interaction": "The first line of each test case contains one integer $n$ ($2 \\le n \\le\n5000$).\n\nThe following $n-1$ lines describe the edges of the tree. Each line\ncontains two space-separated integers $u_i$ and $v_i$ ($1 \\le u_i,\nv_i \\le n$), indicating an edge between nodes $u_i$ and $v_i$.\n\nIt is guaranteed that the input data represents a tree.\n\nThe interactor in this task is not adaptive. In other words, the node where\nthe mole is located at first is fixed in every test case and does not change\nduring the interaction.\n\nTo ask a query, you need to pick a vertex $x$ ($1 \\le x \\le n$) and\nprint the line of the following form:\n\n  * \"? x\" \n\nAfter that, you receive:\n\n  * $0$ if the mole is not in subtree $x$; \n  * $1$ if the mole is in subtree $x$. \n\nYou can make at most $300$ queries of this form for each test case.\n\nNext, if your program has found the current node where the mole is located,\nprint the line of the following form:\n\n  * \"! x\" \n\nNote that this line is not considered a query and is not taken into account\nwhen counting the number of queries asked.\n\nAfter this, proceed to the next test case.\n\nIf you make more than $300$ queries during an interaction, your program\nmust terminate immediately, and you will receive the Wrong Answer verdict.\nOtherwise, you can get an arbitrary verdict because your solution will\ncontinue to read from a closed stream.\n\nAfter printing a query or the answer for a test case, do not forget to output\nthe end of line and flush the output. Otherwise, you will get the verdict\nIdleness Limit Exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see the documentation for other languages. \n\nHacks\n\nTo hack, follow the test format below.\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le\n100$). The description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $x$\n($2 \\le n \\le 5000$, $1 \\le x \\le n$) \u2014 the size of the tree and the\ninitial position of the mole.\n\nThe following $n-1$ lines describe the edges of the tree. Each line\ncontains two space-separated integers $u_i$ and $v_i$ ($1 \\le u_i,\nv_i \\le n$), indicating an edge between nodes $u_i$ and $v_i$.\n\nThe input data must represent a tree.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n2\n1 2\n\n1\n\n6\n1 2\n1 3\n1 4\n4 5\n5 6\n\n0\n\n0\n\n1</pre></td>\n    <td><pre>\n\n\n? 2\n\n! 2\n\n\n\n\n\n\n? 2\n\n? 6\n\n? 4\n\n! 4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the mole is in node $2$ initially.\n\nFor the query \"? 2\", the jury returns $1$ because the mole is in subtree\n$2$. After this query, the mole does not move.\n\nThe answer $2$ is the current node where the mole is located, so the\nanswer is considered correct.\n\nIn the second test case, the mole is in node $6$ initially.\n\nFor the query \"? 2\", the jury returns $0$ because the mole is not in\nsubtree $2$. After this query, the mole moves from node $6$ to node\n$5$.\n\nFor the query \"? 6\", the jury returns $0$ because the mole is not in\nsubtree $6$. After this query, the mole moves from node $5$ to node\n$4$.\n\nFor the query \"? 4\", the jury returns $1$ because the mole is in subtree\n$4$. After this query, the mole does not move.\n\nThe answer $4$ is the current node where the mole is located, so the\nanswer is considered correct.\n\nPlease note that the example is only for understanding the statement, and the\nqueries in the example do not guarantee to determine the unique position of\nthe mole."
    },
    {
        "problem_id": "1990E2",
        "url": "https://codeforces.com/problemset/problem/1990/E2",
        "title": "Catch the Mole(Hard Version)",
        "rating": 2600,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "interactive",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. The only difference is the limit on\nthe number of queries.\n\nThis is an interactive problem.\n\nYou are given a tree of $n$ nodes with node $1$ as its root node.\n\nThere is a hidden mole in one of the nodes. To find its position, you can pick\nan integer $x$ ($1 \\le x \\le n$) to make an inquiry to the jury. Next,\nthe jury will return $1$ when the mole is in subtree $x$. Otherwise,\nthe judge will return $0$. If the judge returns $0$ and the mole is\nnot in root node $1$, the mole will move to the parent node of the node it\nis currently on.\n\nUse at most $160$ operations to find the current node where the mole is\nlocated.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 100$). The description of the test cases\nfollows.",
        "output": "",
        "interaction": "The first line of each test case contains one integer $n$ ($2 \\le n \\le\n5000$).\n\nThe following $n-1$ lines describe the edges of the tree. Each line\ncontains two space-separated integers $u_i$ and $v_i$ ($1 \\le u_i,\nv_i \\le n$), indicating an edge between nodes $u_i$ and $v_i$.\n\nIt is guaranteed that the input data represents a tree.\n\nThe interactor in this task is not adaptive. In other words, the node where\nthe mole is located at first is fixed in every test case and does not change\nduring the interaction.\n\nTo ask a query, you need to pick a vertex $x$ ($1 \\le x \\le n$) and\nprint the line of the following form:\n\n  * \"? x\" \n\nAfter that, you receive:\n\n  * $0$ if the mole is not in subtree $x$; \n  * $1$ if the mole is in subtree $x$. \n\nYou can make at most $160$ queries of this form for each test case.\n\nNext, if your program has found the current node where the mole is located,\nprint the line of the following form:\n\n  * \"! x\" \n\nNote that this line is not considered a query and is not taken into account\nwhen counting the number of queries asked.\n\nAfter this, proceed to the next test case.\n\nIf you make more than $160$ queries during an interaction, your program\nmust terminate immediately, and you will receive the Wrong Answer verdict.\nOtherwise, you can get an arbitrary verdict because your solution will\ncontinue to read from a closed stream.\n\nAfter printing a query or the answer for a test case, do not forget to output\nthe end of line and flush the output. Otherwise, you will get the verdict\nIdleness Limit Exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see the documentation for other languages. \n\nHacks\n\nTo hack, follow the test format below.\n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le\n100$). The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ and $x$\n($2 \\le n \\le 5000$, $1 \\le x \\le n$) \u2014 the size of the tree and the\ninitial position of the mole.\n\nThe following $n-1$ lines describe the edges of the tree. Each line\ncontains two space-separated integers $u_i$ and $v_i$ ($1 \\le u_i,\nv_i \\le n$), indicating an edge between nodes $u_i$ and $v_i$.\n\nThe input data must represent a tree.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n2\n1 2\n\n1\n\n6\n1 2\n1 3\n1 4\n4 5\n5 6\n\n0\n\n0\n\n1</pre></td>\n    <td><pre>\n\n\n? 2\n\n! 2\n\n\n\n\n\n\n? 2\n\n? 6\n\n? 4\n\n! 4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the mole is in node $2$ initially.\n\nFor the query \"? 2\", the jury returns $1$ because the mole is in subtree\n$2$. After this query, the mole does not move.\n\nThe answer $2$ is the current node where the mole is located, so the\nanswer is considered correct.\n\nIn the second test case, the mole is in node $6$ initially.\n\nFor the query \"? 2\", the jury returns $0$ because the mole is not in\nsubtree $2$. After this query, the mole moves from node $6$ to node\n$5$.\n\nFor the query \"? 6\", the jury returns $0$ because the mole is not in\nsubtree $6$. After this query, the mole moves from node $5$ to node\n$4$.\n\nFor the query \"? 4\", the jury returns $1$ because the mole is in subtree\n$4$. After this query, the mole does not move.\n\nThe answer $4$ is the current node where the mole is located, so the\nanswer is considered correct.\n\nPlease note that the example is only for understanding the statement, and the\nqueries in the example do not guarantee to determine the unique position of\nthe mole."
    },
    {
        "problem_id": "1990F",
        "url": "https://codeforces.com/problemset/problem/1990/F",
        "title": "Polygonal Segments",
        "rating": 2800,
        "tags": [
            "brute force",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 8000,
        "memory_limit_mb": 512,
        "description": "You are given an array $a$ of size $n$.\n\nA segment $[l, r](1 \\le l < r \\le n)$ is called a polygonal segment only\nif the following conditions hold:\n\n  * $(r-l+1) \\geq 3$; \n  * Considering $a_l, a_{l+1}, \\ldots, a_r$ as side lengths, these sides can form a polygon with $(r-l+1)$ sides. \n\nProcess $q$ queries of two types:\n\n  * \"1 l r\": find the length of the longest segment among all polygonal segments $[l_0,r_0]$ satisfying $l \\le l_0 \\le r_0 \\le r$. If there is no such polygonal segment, output $-1$ instead; \n  * \"2 i x\": assign $a_i := x$.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nFor each test case:\n\n  * The first line of each testcase contains two integers $n$, $q$ ($4 \\le n \\le 2\\cdot 10^5$, $1 \\le q \\le 10^5$); \n  * The second line of each testcase contains $n$ integers $a_1,a_2,\\ldots, a_n$ ($1 \\le a_i \\le 10^{12}$); \n  * The following $q$ lines contain the description of queries. Each line is of one of two types:\n    * \"1 l r\" ($1 \\le l < r \\le n$, $r-l+1\\ge 3$); \n    * \"2 i x\" ($1 \\le i \\le n$, $1 \\le x \\le 10^{12}$). \n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed\n$2 \\cdot 10^5$, and the sum of $q$ over all test cases will not exceed\n$10^5$.",
        "output": "For each query, if there is no suitable segment, output $-1$ in a new\nline. Otherwise, output the length of the longest segment satisfying the\ncondition above in a new line.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n5 6\n3 1 2 2 8\n1 1 3\n1 1 4\n1 1 5\n2 1 5\n1 1 4\n1 1 5\n4 10\n500000000000 500000000000 1000000000000 500000000000\n1 1 3\n1 2 4\n1 1 4\n2 1 499999999999\n2 3 999999999999\n1 1 3\n1 2 4\n1 1 4\n2 3 1000000000000\n1 1 3\n</pre></td>\n    <td><pre>-1\n4\n4\n3\n5\n-1\n-1\n4\n-1\n3\n4\n-1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first query of the first test case, there is no polygonal segment under\nthe given condition. For example, considering segment $[1,3]$, you can not\nform a triangle with side lengths of $a_1=3$, $a_2=1$, and\n$a_3=2$.\n\nIn the second query of the first test case, the longest polygonal segment is\n$[1,4]$. You can form a quadrilateral with side lengths of $a_1=3$,\n$a_2=1$, $a_3=2$, and $a_4=2$.\n\n![](CDN_BASE_URL/589caa1d808f5b5cc88c1eb5f51f2eaf) An example of a\nquadrilateral with side lengths of $3$, $1$, $2$, and $2$."
    },
    {
        "problem_id": "1991A",
        "url": "https://codeforces.com/problemset/problem/1991/A",
        "title": "Maximize the Last Element",
        "rating": 800,
        "tags": [
            "greedy",
            "implementation"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given an array $a$ of $n$ integers, where $n$ is odd.\n\nIn one operation, you will remove two adjacent elements from the array\n$a$, and then concatenate the remaining parts of the array. For example,\ngiven the array $[4,7,4,2,9]$, we can obtain the arrays $[4,2,9]$ and\n$[4,7,9]$ by the operations $[\\underline{4,7}, 4,2,9] \\to [4,2,9]$ and\n$[4,7,\\underline{4,2},9] \\to [4,7,9]$ respectively. However, we cannot\nobtain the array $[7,2,9]$ as it requires deleting non-adjacent elements\n$[\\underline{4},7,\\underline{4},2,9]$.\n\nYou will repeatedly perform this operation until exactly one element remains\nin $a$.\n\nFind the maximum possible value of the remaining element in $a$.",
        "input": "Each test contains multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 99$; $n$ is odd) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 100$) \u2014 the elements of the array $a$.\n\nNote that there is no bound on the sum of $n$ over all test cases.",
        "output": "For each test case, output a single integer \u2014 the maximum possible value of\nthe remaining element in $a$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1\n6\n3\n1 3 2\n5\n4 7 4 2 9\n7\n3 1 4 1 5 9 2\n</pre></td>\n    <td><pre>6\n2\n9\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the array $a$ is $[6]$. Since there is only\none element, no operations are needed. The maximum possible value of the\nremaining element is $6$.\n\nIn the second test case, the array $a$ is $[1, 3, 2]$. We can remove\nthe first two elements $[\\underline{1, 3}, 2] \\to [2]$, or remove the last\ntwo elements $[1, \\underline{3, 2}] \\to [1]$. Therefore, the maximum\npossible value of the remaining element is $2$.\n\nIn the third test case, the array $a$ is $[4, 7, 4, 2, 9]$. One way to\nmaximize the remaining element is $[4, \\underline{7, 4}, 2, 9] \\to\n[\\underline{4, 2}, 9] \\to [9]$. Therefore, the maximum possible value of the\nremaining element is $9$.\n\nIn the fourth test case, the array $a$ is $[3, 1, 4, 1, 5, 9, 2]$. It\ncan be shown that the maximum possible value of the remaining element is\n$5$."
    },
    {
        "problem_id": "1991B",
        "url": "https://codeforces.com/problemset/problem/1991/B",
        "title": "AND Reconstruction",
        "rating": 1100,
        "tags": [
            "bitmasks",
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given an array $b$ of $n - 1$ integers.\n\nAn array $a$ of $n$ integers is called good if $b_i = a_i \\, \\& \\,\na_{i + 1}$ for $1 \\le i \\le n-1$, where $\\&$ denotes the [bitwise\nAND operator](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nConstruct a good array, or report that no good arrays exist.",
        "input": "Each test contains multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 10^5$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n - 1$ integers $b_1, b_2,\n\\ldots, b_{n - 1}$ ($0 \\le b_i < 2^{30}$) \u2014 the elements of the array\n$b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single integer $-1$ if no good arrays exist.\n\nOtherwise, output $n$ space-separated integers $a_1, a_2, \\ldots, a_n$\n($0 \\le a_i < 2^{30}$) \u2014 the elements of a good array $a$.\n\nIf there are multiple solutions, you may output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n1\n3\n2 0\n4\n1 2 3\n5\n3 5 4 2\n</pre></td>\n    <td><pre>5 3\n3 2 1\n-1\n3 7 5 6 3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $b = [1]$. A possible good array is $a=[5,\n3]$, because $a_1 \\, \\& \\, a_2 = 5 \\, \\& \\, 3 = 1 = b_1$.\n\nIn the second test case, $b = [2, 0]$. A possible good array is $a=[3,\n2, 1]$, because $a_1 \\, \\& \\, a_2 = 3 \\, \\& \\, 2 = 2 = b_1$ and $a_2\n\\, \\& \\, a_3 = 2 \\, \\& \\, 1 = 0 = b_2$.\n\nIn the third test case, $b = [1, 2, 3]$. It can be shown that no good\narrays exist, so the output is $-1$.\n\nIn the fourth test case, $b = [3, 5, 4, 2]$. A possible good array is\n$a=[3, 7, 5, 6, 3]$."
    },
    {
        "problem_id": "1991C",
        "url": "https://codeforces.com/problemset/problem/1991/C",
        "title": "Absolute Zero",
        "rating": 1300,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given an array $a$ of $n$ integers.\n\nIn one operation, you will perform the following two-step move:\n\n  1. Choose an integer $x$ ($0 \\le x \\le 10^{9}$). \n  2. Replace each $a_i$ with $|a_i - x|$, where $|v|$ denotes the [absolute value](https://en.wikipedia.org/wiki/Absolute_value) of $v$. \n\nFor example, by choosing $x = 8$, the array $[5, 7, 10]$ will be\nchanged into $[|5-8|, |7-8|, |10-8|] = [3,1,2]$.\n\nConstruct a sequence of operations to make all elements of $a$ equal to\n$0$ in at most $40$ operations or determine that it is impossible. You\ndo not need to minimize the number of operations.",
        "input": "Each test contains multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer $-1$ if it is impossible to\nmake all array elements equal to $0$ in at most $40$ operations.\n\nOtherwise, output two lines. The first line of output should contain a single\ninteger $k$ ($0 \\le k \\le 40$) \u2014 the number of operations. The second\nline of output should contain $k$ integers $x_1, x_2, \\ldots, x_k$\n($0 \\le x_i \\le 10^{9}$) \u2014 the sequence of operations, denoting that on\nthe $i$-th operation, you chose $x=x_i$.\n\nIf there are multiple solutions, output any of them.\n\nYou do not need to minimize the number of operations.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1\n5\n2\n0 0\n3\n4 6 8\n4\n80 40 20 10\n5\n1 2 3 4 5\n</pre></td>\n    <td><pre>1\n5\n0\n\n3\n6 1 1\n7\n60 40 20 10 30 25 5\n-1</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we can perform only one operation by choosing $x =\n5$, changing the array from $[5]$ to $[0]$.\n\nIn the second test case, no operations are needed because all elements of the\narray are already $0$.\n\nIn the third test case, we can choose $x = 6$ to change the array from\n$[4, 6, 8]$ to $[2, 0, 2]$, then choose $x = 1$ to change it to\n$[1, 1, 1]$, and finally choose $x = 1$ again to change the array into\n$[0, 0, 0]$.\n\nIn the fourth test case, we can make all elements $0$ by following the\noperation sequence $(60, 40, 20, 10, 30, 25, 5)$.\n\nIn the fifth test case, it can be shown that it is impossible to make all\nelements $0$ in at most $40$ operations. Therefore, the output is\n$-1$."
    },
    {
        "problem_id": "1991D",
        "url": "https://codeforces.com/problemset/problem/1991/D",
        "title": "Prime XOR Coloring",
        "rating": 1900,
        "tags": [
            "bitmasks",
            "constructive algorithms",
            "graphs",
            "greedy",
            "math",
            "number theory"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given an undirected graph with $n$ vertices, numbered from $1$\nto $n$. There is an edge between vertices $u$ and $v$ if and only\nif $u \\oplus v$ is a [prime\nnumber](https://en.wikipedia.org/wiki/Prime_number), where $\\oplus$\ndenotes the [bitwise XOR\noperator](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nColor all vertices of the graph using the minimum number of colors, such that\nno two vertices directly connected by an edge have the same color.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of test cases\nfollows.\n\nThe only line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot\n10^5$) \u2014 the number of vertices in the graph.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output two lines.\n\nThe first line should contain a single integer $k$ ($1 \\le k \\le n$) \u2014\nthe minimum number of colors required.\n\nThe second line should contain $n$ integers $c_1, c_2, \\ldots, c_n$\n($1 \\le c_i \\le k$) \u2014 the color of each vertex.\n\nIf there are multiple solutions, output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1\n2\n3\n4\n5\n6\n</pre></td>\n    <td><pre>1\n1\n2\n1 2\n2\n1 2 2\n3\n1 2 2 3\n3\n1 2 2 3 3\n4\n1 2 2 3 3 4</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the minimum number of colors is $1$, because there\nis only one vertex.\n\nIn the second test case, the minimum number of colors is $2$, because\nthere is an edge connecting $1$ and $2$ ($1 \\oplus 2 = 3$, which\nis a prime number).\n\nIn the third test case, the minimum number of colors is still $2$, because\n$2$ and $3$ can be colored the same since there is no edge between\n$2$ and $3$ ($2 \\oplus 3 = 1$, which is not a prime number).\n\nIn the fourth test case, it can be shown that the minimum number of colors is\n$3$.\n\nIn the fifth test case, it can be shown that the minimum number of colors is\n$3$.\n\nIn the sixth test case, it can be shown that the minimum number of colors is\n$4$."
    },
    {
        "problem_id": "1991E",
        "url": "https://codeforces.com/problemset/problem/1991/E",
        "title": "Coloring Game",
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "games",
            "graphs",
            "greedy",
            "interactive"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem.\n\nConsider an undirected connected graph consisting of $n$ vertices and\n$m$ edges. Each vertex can be colored with one of three colors: $1$,\n$2$, or $3$. Initially, all vertices are uncolored.\n\nAlice and Bob are playing a game consisting of $n$ rounds. In each round,\nthe following two-step process happens:\n\n  1. Alice chooses two different colors. \n  2. Bob chooses an uncolored vertex and colors it with one of the two colors chosen by Alice. \n\nAlice wins if there exists an edge connecting two vertices of the same color.\nOtherwise, Bob wins.\n\nYou are given the graph. Your task is to decide which player you wish to play\nas and win the game.",
        "input": "Each test contains multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains two integers $n$, $m$ ($1\n\\le n \\le 10^4$, $n - 1 \\le m \\le \\min(\\frac{n \\cdot (n - 1)}{2},\n10^4)$) \u2014 the number of vertices and the number of edges in the graph,\nrespectively.\n\nEach of the next $m$ lines of each test case contains two integers\n$u_i$, $v_i$ ($1 \\le u_i, v_i \\le n$) \u2014 the edges of the graph. It\nis guaranteed that the graph is connected and there are no multiple edges or\nself-loops.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test\ncases does not exceed $10^4$.",
        "output": "",
        "interaction": "For each test case, you need to output a single line containing either \"Alice\"\nor \"Bob\", representing the player you choose.\n\nThen for each of the following $n$ rounds, the following two-step process\nhappens:\n\n  1. Alice (either you or the interactor) will output two integers $a$ and $b$ ($1 \\le a, b \\le 3$, $a \\neq b$) \u2014 the colors chosen by Alice. \n  2. Bob (either you or the interactor) will output two integers $i$ and $c$ ($1 \\le i \\le n$, $c = a$ or $c = b$) \u2014 the vertex and the color chosen by Bob. Vertex $i$ must be a previously uncolored vertex. \n\nIf any of your outputs are invalid, the jury will output \"-1\" and you will\nreceive a Wrong Answer verdict.\n\nAt the end of all $n$ turns, if you have lost the game, the jury will\noutput \"-1\" and you will receive a Wrong Answer verdict.\n\nIf your program has received a $-1$ instead of a valid value, it must\nterminate immediately. Otherwise, you may receive an arbitrary verdict because\nyour solution might be reading from a closed stream.\n\nNote that if you are playing as Alice, and there already exists an edge\nconnected two vertices of the same color, the interactor will not terminate\nearly and you will keep playing all $n$ rounds.\n\nAfter outputting, do not forget to output end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\nIn this problem, hacks are disabled.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3 3\n1 2\n2 3\n3 1\n\n\n3 1\n\n2 2\n\n1 1\n4 4\n1 2\n2 3\n3 4\n4 1\n\n2 3\n\n1 2\n\n2 1\n\n3 1\n\n</pre></td>\n    <td><pre>\n\n\n\n\nAlice\n3 1\n\n1 2\n\n2 1\n\n\n\n\n\n\nBob\n\n1 2\n\n2 1\n\n4 1\n\n3 3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Note that the sample test cases are example games and do not necessarily\nrepresent the optimal strategy for both players.\n\nIn the first test case, you choose to play as Alice.\n\n  1. Alice chooses two colors: $3$ and $1$. Bob chooses vertex $3$ and colors it with color $1$. \n  2. Alice chooses two colors: $1$ and $2$. Bob chooses vertex $2$ and colors it with color $2$. \n  3. Alice chooses two colors: $2$ and $1$. Bob chooses vertex $1$ and colors it with color $1$. \n\nAlice wins because the edge $(3, 1)$ connects two vertices of the same\ncolor.\n\nIn the second test case, you choose to play as Bob.\n\n  1. Alice chooses two colors: $2$ and $3$. Bob chooses vertex $1$ and colors it with color $2$. \n  2. Alice chooses two colors: $1$ and $2$. Bob chooses vertex $2$ and colors it with color $1$. \n  3. Alice chooses two colors: $2$ and $1$. Bob chooses vertex $4$ and colors it with color $1$. \n  4. Alice chooses two colors: $3$ and $1$. Bob chooses vertex $3$ and colors it with color $3$. \n\nBob wins because there are no edges with vertices of the same color."
    },
    {
        "problem_id": "1991F",
        "url": "https://codeforces.com/problemset/problem/1991/F",
        "title": "Triangle Formation",
        "rating": 2200,
        "tags": [
            "brute force",
            "greedy",
            "implementation",
            "math",
            "sortings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 256,
        "description": "You are given $n$ sticks, numbered from $1$ to $n$. The length of\nthe $i$-th stick is $a_i$.\n\nYou need to answer $q$ queries. In each query, you are given two integers\n$l$ and $r$ ($1 \\le l < r \\le n$, $r - l + 1 \\ge 6$).\nDetermine whether it is possible to choose $6$ distinct sticks from the\nsticks numbered $l$ to $r$, to form $2$ non-degenerate\ntriangles$^{\\text{\u2217}}$.\n\n$^{\\text{\u2217}}$A triangle with side lengths $a$, $b$, and $c$ is\ncalled non-degenerate if:\n\n  * $a < b + c$, \n  * $b < a + c$, and \n  * $c < a + b$.",
        "input": "The first line contains two integers $n$ and $q$ ($6 \\le n \\le\n10^5$, $1 \\le q \\le 10^5$) \u2014 the number of sticks and the number of\nqueries respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\le a_i \\le 10^9$) \u2014 $a_i$ denotes the length of the $i$-th stick.\n\nEach of the following $q$ lines contains two integers $l$ and $r$\n($1 \\le l < r \\le n$, $r - l + 1 \\ge 6$) \u2014 the parameters of each\nquery.",
        "output": "For each query, output \"YES\" (without quotes) if it is possible to form\n$2$ triangles, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10 5\n5 2 2 10 4 10 6 1 5 3\n1 6\n2 7\n2 8\n5 10\n4 10\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first query, the lengths of the sticks are $[5, 2, 2, 10, 4, 10]$.\nTwo sets of sticks $[2, 4, 5]$ and $[2, 10, 10]$ can be selected to\nform $2$ non-degenerate triangles.\n\nIn the second query, the lengths of the sticks are $[2, 2, 10, 4, 10, 6]$.\nIt can be shown that it is impossible to form $2$ non-degenerate\ntriangles.\n\nIn the third query, the lengths of the sticks are $[2, 2, 10, 4, 10, 6,\n1]$. Two sets of sticks $[1, 2, 2]$ and $[4, 10, 10]$ can be\nselected to form $2$ non-degenerate triangles.\n\nIn the fourth query, the lengths of the sticks are $[4, 10, 6, 1, 5, 3]$.\nIt can be shown that it is impossible to form $2$ non-degenerate\ntriangles.\n\nIn the fifth query, the lengths of the sticks are $[10, 4, 10, 6, 1, 5,\n3]$. Two sets of sticks $[1, 10, 10]$ and $[3, 4, 5]$ can be\nselected to form $2$ non-degenerate triangles."
    },
    {
        "problem_id": "1991G",
        "url": "https://codeforces.com/problemset/problem/1991/G",
        "title": "Grid Reset",
        "rating": 2700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a grid consisting of $n$ rows and $m$ columns, where\neach cell is initially white. Additionally, you are given an integer $k$,\nwhere $1 \\le k \\le \\min(n, m)$.\n\nYou will process $q$ operations of two types:\n\n  * $\\mathtt{H}$ (horizontal operation) \u2014 You choose a $1 \\times k$ rectangle completely within the grid, where all cells in this rectangle are white. Then, all cells in this rectangle are changed to black. \n  * $\\mathtt{V}$ (vertical operation) \u2014 You choose a $k \\times 1$ rectangle completely within the grid, where all cells in this rectangle are white. Then, all cells in this rectangle are changed to black. \n\nAfter each operation, if any rows or columns become completely black, all\ncells in these rows and columns are simultaneously reset to white.\nSpecifically, if all cells in the row and column a cell is contained in become\nblack, all cells in both the row and column will be reset to white.\n\nChoose the rectangles in a way that you can perform all given operations, or\ndetermine that it is impossible.",
        "input": "Each test contains multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains four integers $n$, $m$,\n$k$, and $q$ ($1 \\le n, m \\le 100$, $1 \\le k \\le \\min(n, m)$,\n$1 \\le q \\le 1000$) \u2014 the number of rows and columns in the grid, the size\nof the operation rectangle, and the number of operations, respectively.\n\nThe second line of each test case contains a string $s$ of length $q$,\nconsisting only of characters $\\mathtt{H}$ and $\\mathtt{V}$ \u2014 the\nsequence of operation types.\n\nIt is guaranteed that the sum of $q$ over all test cases does not exceed\n$1000$.",
        "output": "For each test case, output a single integer $-1$ if it is impossible to\nperform all the operations.\n\nOtherwise, output $q$ lines. Each line contains two integers $i$,\n$j$ ($1 \\le i \\le n$, $1 \\le j \\le m$) \u2014 the coordinates of the\ntop-left cell of the operation rectangle.\n\nIf there are multiple solutions, output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n4 5 3 6\nHVVHHV\n</pre></td>\n    <td><pre>1 1\n2 1\n1 1\n2 3\n3 3\n2 2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "![](CDN_BASE_URL/4e8cc9bc31ec8a5ba8c074c199a00b25) Illustration of example.\n\nThe first operation is horizontal. The operation rectangle starts at\n$(1,1)$ and is a $1 \\times 3$ rectangle. After the operation, cells\n$(1,1)$, $(1,2)$, and $(1,3)$ become black.\n\nThe second operation is vertical. The operation rectangle starts at\n$(2,1)$ and is a $3 \\times 1$ rectangle. After the operation, cells\n$(2,1)$, $(3,1)$, and $(4,1)$ become black. At this point, the\nfirst column becomes completely black, so all cells in the first column are\nreset to white.\n\nThe third operation is vertical. The operation rectangle starts at $(1,1)$\nand is a $3 \\times 1$ rectangle. After the operation, cells $(1,1)$,\n$(2,1)$, and $(3,1)$ become black.\n\nThe fourth operation is horizontal. The operation rectangle starts at\n$(2,3)$ and is a $1 \\times 3$ rectangle. After the operation, cells\n$(2,3)$, $(2,4)$, and $(2,5)$ become black.\n\nThe fifth operation is horizontal. The operation rectangle starts at\n$(3,3)$ and is a $1 \\times 3$ rectangle. After the operation, cells\n$(3,3)$, $(3,4)$, and $(3,5)$ become black.\n\nThe sixth operation is vertical. The operation rectangle starts at $(2,2)$\nand is a $3 \\times 1$ rectangle. After the operation, cells $(2,2)$,\n$(3,2)$, and $(4,2)$ become black. At this point, two rows and one\ncolumn become completely black, so all cells in these rows and the column are\nreset to white."
    },
    {
        "problem_id": "1991H",
        "url": "https://codeforces.com/problemset/problem/1991/H",
        "title": "Prime Split Game",
        "rating": 3300,
        "tags": [
            "bitmasks",
            "dp",
            "fft",
            "games",
            "math",
            "number theory"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alice and Bob are playing a game with $n$ piles of stones, where the\n$i$-th pile has $a_i$ stones. Players take turns making moves, with\nAlice going first.\n\nOn each move, the player does the following three-step process:\n\n  1. Choose an integer $k$ ($1 \\leq k \\leq \\frac n 2$). Note that the value of $k$ can be different for different moves. \n  2. Remove $k$ piles of stones. \n  3. Choose another $k$ piles of stones and split each pile into two piles. The number of stones in each new pile must be a prime number. \n\nThe player who is unable to make a move loses.\n\nDetermine who will win if both players play optimally.",
        "input": "Each test contains multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of piles of stones.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$) \u2014 the number of stones in\nthe piles.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output \"Alice\" (without quotes) if Alice wins and \"Bob\"\n(without quotes) otherwise.\n\nYou can output each letter in any case (upper or lower). For example, the\nstrings \"alIcE\", \"Alice\", and \"alice\" will all be considered identical.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n2 1\n3\n3 5 7\n4\n4 6 8 10\n5\n8 8 8 8 8\n</pre></td>\n    <td><pre>Bob\nAlice\nAlice\nBob\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are $2$ piles of stones with $2$ and\n$1$ stones respectively. Since neither $1$ nor $2$ can be split\ninto two prime numbers, Alice cannot make a move, so Bob wins.\n\nIn the second test case, there are $3$ piles of stones with $3$,\n$5$, and $7$ stones respectively. Alice can choose $k = 1$, remove\nthe pile of $7$ stones, and then split the pile of $5$ stones into two\npiles of prime numbers of stones, $2$ and $3$. Then, the piles consist\nof $3$ piles of stones with $3$, $2$, and $3$ stones\nrespectively, leaving Bob with no valid moves, so Alice wins.\n\nIn the third test case, there are $4$ piles of stones with $4$,\n$6$, $8$, and $10$ stones respectively. Alice can choose $k =\n2$, removing two piles of $8$ and $10$ stones. She splits the pile\nof $4$ stones into two piles of prime numbers of stones, $2$ and\n$2$, and the pile of $6$ stones into two piles of $3$ and $3$\nstones. Then, Bob has no valid moves, so Alice wins.\n\nIn the fourth test case, there are $5$ piles of stones, each containing\n$8$ stones. It can be shown that if both players play optimally, Bob will\nwin."
    },
    {
        "problem_id": "1991I",
        "url": "https://codeforces.com/problemset/problem/1991/I",
        "title": "Grid Game",
        "rating": 3500,
        "tags": [
            "constructive algorithms",
            "games",
            "graph matchings",
            "greedy",
            "interactive"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem.\n\nYou are given a grid with $n$ rows and $m$ columns. You need to fill\neach cell with a unique integer from $1$ to $n \\cdot m$.\n\nAfter filling the grid, you will play a game on this grid against the\ninteractor. Players take turns selecting one of the previously unselected\ncells from the grid, with the interactor going first.\n\nOn the first turn, the interactor can choose any cell from the grid. After\nthat, any chosen cell must be orthogonally adjacent to at least one previously\nselected cell. Two cells are considered orthogonally adjacent if they share an\nedge. The game continues until all cells have been selected.\n\nYour goal is to let the sum of numbers in the cells selected by you be\nstrictly less than the sum of numbers in the cells selected by the interactor.",
        "input": "Each test contains multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe only line of each test case contains two integers $n$ and $m$\n($4 \\le n, m \\le 10$) \u2014 the number of rows and columns in the grid.",
        "output": "",
        "interaction": "First, output $n$ lines, each containing $m$ integers, representing\nthe integers that you filled in the grid. Each integer from $1$ to $n\n\\cdot m$ should appear exactly once.\n\nThen, the game begins. The interactor and you take turns outputting\ncoordinates to select a cell for $n \\times m$ turns, with the interactor\nstarting first.\n\nOn each player's (either you or the interactor) turn, the player will output\ntwo integers $i$ and $j$ ($1 \\le i \\le n$, $1 \\le j \\le m$),\ndenoting that the player has selected the cell on the $i$-th row and\n$j$-th column. This cell should not have been selected in a previous\nround. Additionally, if it is not the first turn, the cell must be\northogonally adjacent to at least one previously selected cell.\n\nIf any of your outputs are invalid, the jury will output \"-1\" and you will\nreceive a Wrong Answer verdict.\n\nAt the end of all $n \\cdot m$ turns, if the sum of numbers in the cells\nselected by you is not strictly less than the sum of numbers in the cells\nselected by the interactor, the jury will output \"-1\" and you will receive a\nWrong Answer verdict.\n\nIf your program has received a Wrong Answer verdict, it must terminate\nimmediately. Otherwise, you may receive an arbitrary verdict because your\nsolution might be reading from a closed stream.\n\nAfter outputting, do not forget to output end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\nIn this problem, hacks are disabled.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n4 4\n\n\n\n\n3 4\n\n4 4\n\n4 2\n\n4 1\n\n1 4\n\n1 2\n\n2 2\n\n2 1\n\n</pre></td>\n    <td><pre>\n\n2 3 4 10\n12 6 11 15\n5 13 16 8\n9 7 1 14\n\n2 4\n\n4 3\n\n3 3\n\n3 1\n\n1 3\n\n1 1\n\n2 3\n\n3 2</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Note that this is an example game and does not necessarily represent the\noptimal strategy for both players.\n\nFirst, we fill a $4 \\times 4$ grid with unique integers from $1$ to\n$16$ in the following way:\n\n$2$| $3$| $4$| $10$  \n---|---|---|---  \n$12$| $6$| $11$| $15$  \n$5$| $13$| $16$| $8$  \n$9$| $7$| $1$| $14$  \n  \nNext, the game begins.\n\n  1. The interactor first selects $(3, 4)$, which is the number $8$. For this selection, the interactor could choose any number. From the next selection onwards, each chosen number has to be adjacent to any previously selected number. \n  2. We select $(2, 4)$, which is the number $15$, adjacent to $(3, 4)$. \n  3. The interactor selects $(4, 4)$, which is the number $14$, adjacent to $(3, 4)$. \n  4. We select $(4, 3)$, which is the number $1$, adjacent to $(4, 4)$. \n  5. $\\ldots$ \n  6. This is continued until all numbers are selected. \n\nIn the end, the numbers we selected were $[15, 1, 16, 5, 4, 2, 11, 13]$,\nand the numbers selected by the interactor were $[8, 14, 7, 9, 10, 3, 6,\n12]$. The sum of the numbers we selected is $67$, which is less than the\nsum of the numbers selected by the interactor $69$. Therefore, we have won\nthis game."
    },
    {
        "problem_id": "1992A",
        "url": "https://codeforces.com/problemset/problem/1992/A",
        "title": "Only Pluses",
        "rating": 800,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Kmes has written three integers $a$, $b$ and $c$ in order to\nremember that he has to give Noobish_Monk $a \\times b \\times c$ bananas.\n\nNoobish_Monk has found these integers and decided to do the following at most\n$5$ times:\n\n  * pick one of these integers; \n  * increase it by $1$. \n\nFor example, if $a = 2$, $b = 3$ and $c = 4$, then one can\nincrease $a$ three times by one and increase $b$ two times. After that\n$a = 5$, $b = 5$, $c = 4$. Then the total number of bananas will\nbe $5 \\times 5 \\times 4 = 100$.\n\nWhat is the maximum value of $a \\times b \\times c$ Noobish_Monk can\nachieve with these operations?",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first and only line of each test case contains three integers $a$,\n$b$ and $c$ ($1 \\le a, b, c \\le 10$) \u2014 Kmes's integers.",
        "output": "For each test case, output a single integer \u2014 the maximum amount of bananas\nNoobish_Monk can get.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n2 3 4\n10 1 10\n</pre></td>\n    <td><pre>100\n600\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1992B",
        "url": "https://codeforces.com/problemset/problem/1992/B",
        "title": "Angry Monk",
        "rating": 800,
        "tags": [
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "To celebrate his recovery, k1o0n has baked an enormous $n$ metres long\npotato casserole.\n\nTurns out, Noobish_Monk just can't stand potatoes, so he decided to ruin\nk1o0n's meal. He has cut it into $k$ pieces, of lengths $a_1, a_2,\n\\dots, a_k$ meters.\n\nk1o0n wasn't keen on that. Luckily, everything can be fixed. In order to do\nthat, k1o0n can do one of the following operations:\n\n  * Pick a piece with length $a_i \\ge 2$ and divide it into two pieces with lengths $1$ and $a_i - 1$. As a result, the number of pieces will increase by $1$; \n  * Pick a slice $a_i$ and another slice with length $a_j=1$ ($i \\ne j$) and merge them into one piece with length $a_i+1$. As a result, the number of pieces will decrease by $1$. \n\nHelp k1o0n to find the minimum number of operations he needs to do in order to\nmerge the casserole into one piece with length $n$.\n\nFor example, if $n=5$, $k=2$ and $a = [3, 2]$, it is optimal to do\nthe following:\n\n  1. Divide the piece with length $2$ into two pieces with lengths $2-1=1$ and $1$, as a result $a = [3, 1, 1]$. \n  2. Merge the piece with length $3$ and the piece with length $1$, as a result $a = [4, 1]$. \n  3. Merge the piece with length $4$ and the piece with length $1$, as a result $a = [5]$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$).\n\nDescription of each test case consists of two lines. The first line contains\ntwo integers $n$ and $k$ ($2 \\le n \\le 10^9$, $2 \\le k \\le\n10^5$) \u2014 length of casserole and the number of pieces.\n\nThe second line contains $k$ integers $a_1, a_2, \\ldots, a_k$ ($1\n\\le a_i \\le n - 1$, $\\sum a_i = n$) \u2014 lengths of pieces of casserole,\nwhich Noobish_Monk has cut.\n\nIt is guaranteed that the sum of $k$ over all $t$ test cases doesn't\nexceed $2 \\cdot 10^5$.",
        "output": "For each test case, output the minimum number of operations K1o0n needs to\nrestore his pie after the terror of Noobish_Monk.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5 3\n3 1 1\n5 2\n3 2\n11 4\n2 3 1 5\n16 6\n1 6 1 1 1 6\n</pre></td>\n    <td><pre>2\n3\n9\n15\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1992C",
        "url": "https://codeforces.com/problemset/problem/1992/C",
        "title": "Gorilla and Permutation",
        "rating": 900,
        "tags": [
            "constructive algorithms",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Gorilla and Noobish_Monk found three numbers $n$, $m$, and $k$\n($m < k$). They decided to construct a permutation$^{\\dagger}$ of\nlength $n$.\n\nFor the permutation, Noobish_Monk came up with the following function:\n$g(i)$ is the sum of all the numbers in the permutation on a prefix of\nlength $i$ that are not greater than $m$. Similarly, Gorilla came up\nwith the function $f$, where $f(i)$ is the sum of all the numbers in\nthe permutation on a prefix of length $i$ that are not less than $k$.\nA prefix of length $i$ is a subarray consisting of the first $i$\nelements of the original array.\n\nFor example, if $n = 5$, $m = 2$, $k = 5$, and the permutation is\n$[5, 3, 4, 1, 2]$, then:\n\n  * $f(1) = 5$, because $5 \\ge 5$; $g(1) = 0$, because $5 > 2$; \n  * $f(2) = 5$, because $3 < 5$; $g(2) = 0$, because $3 > 2$; \n  * $f(3) = 5$, because $4 < 5$; $g(3) = 0$, because $4 > 2$; \n  * $f(4) = 5$, because $1 < 5$; $g(4) = 1$, because $1 \\le 2$; \n  * $f(5) = 5$, because $2 < 5$; $g(5) = 1 + 2 = 3$, because $2 \\le 2$. \n\nHelp them find a permutation for which the value of $\\left(\\sum_{i=1}^n f(i)\n- \\sum_{i=1}^n g(i)\\right)$ is maximized.\n\n$^{\\dagger}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in any order. For example,\n$[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation (as\n$2$ appears twice in the array) and $[1,3,4]$ is also not a\npermutation (as $n=3$, but $4$ appears in the array).",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$)  \u2014\nthe number of test cases.\n\nThe only line of each case contains three integers $n$, $m$, $k$\n($2\\le n \\le 10^5$; $1 \\le m < k \\le n$) \u2014 the size of the permutation\nto be constructed and two integers.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output the permutation  \u2014 a set of numbers that satisfies\nthe conditions of the problem. If there are multiple solutions, output any of\nthem.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5 2 5\n3 1 3\n10 3 8\n</pre></td>\n    <td><pre>5 3 4 1 2\n3 2 1\n10 9 8 4 7 5 6 1 2 3</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, $\\left(\\sum_{i=1}^n f(i) - \\sum_{i=1}^n g(i)\\right) =\n5 \\cdot 5 - (0 \\cdot 3 + 1 + 3) = 25 - 4 = 21$"
    },
    {
        "problem_id": "1992D",
        "url": "https://codeforces.com/problemset/problem/1992/D",
        "title": "Test of Love",
        "rating": 1200,
        "tags": [
            "dp",
            "greedy",
            "implementation"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "ErnKor is ready to do anything for Julen, even to swim through crocodile-\ninfested swamps. We decided to test this love. ErnKor will have to swim across\na river with a width of $1$ meter and a length of $n$ meters.\n\nThe river is very cold. Therefore, in total (that is, throughout the entire\nswim from $0$ to $n+1$) ErnKor can swim in the water for no more than\n$k$ meters. For the sake of humanity, we have added not only crocodiles to\nthe river, but also logs on which he can jump. Our test is as follows:\n\nInitially, ErnKor is on the left bank and needs to reach the right bank. They\nare located at the $0$ and $n+1$ meters respectively. The river can be\nrepresented as $n$ segments, each with a length of $1$ meter. Each\nsegment contains either a log 'L', a crocodile 'C', or just water 'W'. ErnKor\ncan move as follows:\n\n  * If he is on the surface (i.e., on the bank or on a log), he can jump forward for no more than $m$ ($1 \\le m \\le 10$) meters (he can jump on the bank, on a log, or in the water). \n  * If he is in the water, he can only swim to the next river segment (or to the bank if he is at the $n$-th meter). \n  * ErnKor cannot land in a segment with a crocodile in any way. \n\nDetermine if ErnKor can reach the right bank.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$)  \u2014\nthe number of test cases.\n\nThe first line of each test case contains three numbers $n, m, k$ ($0\n\\le k \\le 2 \\cdot 10^5$, $1 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le\n10$) \u2014 the length of the river, the distance ErnKor can jump, and the number\nof meters ErnKor can swim without freezing.\n\nThe second line of each test case contains a string $a$ of length $n$.\n$a_i$ denotes the object located at the $i$-th meter. ($a_i \\in\n\\\\{$'W','C','L'$\\\\}$)\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output \"YES\" if ErnKor can pass the test, and output \"NO\"\notherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n6 2 0\nLWLLLW\n6 1 1\nLWLLLL\n6 1 1\nLWLLWL\n6 2 15\nLWLLCC\n6 10 0\nCCCCCC\n6 6 1\nWCCCCW\n</pre></td>\n    <td><pre>YES\nYES\nNO\nNO\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Let's consider examples:\n\n  * First example: We jump from the shore to the first log ($0 \\rightarrow 1$), from the first log to the second ($1 \\rightarrow 3$), from the second to the fourth ($3 \\rightarrow 5$), and from the last log to the shore ($5 \\rightarrow 7$). So, we have $0 \\rightarrow 1 \\rightarrow 3 \\rightarrow 5 \\rightarrow 7$. Since we did not encounter a crocodile and swam no more than k meters, the answer is \u00abYES\u00bb. \n  * Second example: $0 \\rightarrow 1$, we jump into the water from the first log ($1 \\rightarrow 2$), swim a cell to the log ($2 \\leadsto 3$), $3 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6 \\rightarrow 7$. Since we did not encounter a crocodile and swam no more than k meters, the answer is \u00abYES\u00bb. \n  * In the third example, ErnKor needs to swim two cells 'W', but can only swim one. Therefore, the answer is \u00abNO\u00bb. \n  * Sixth example: We jump from the shore into the water ($0 \\rightarrow 6$) and swim one cell in the water ($6 \\leadsto 7$). Since we did not encounter a crocodile and swam no more than k meters, the answer is \u00abYES\u00bb."
    },
    {
        "problem_id": "1992E",
        "url": "https://codeforces.com/problemset/problem/1992/E",
        "title": "Novice's Mistake",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "math",
            "strings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "One of the first programming problems by K1o0n looked like this: \"Noobish_Monk\nhas $n$ $(1 \\le n \\le 100)$ friends. Each of them gave him $a$\n$(1 \\le a \\le 10000)$ apples for his birthday. Delighted with such a gift,\nNoobish_Monk returned $b$ $(1 \\le b \\le \\min(10000, a \\cdot n))$\napples to his friends. How many apples are left with Noobish_Monk?\"\n\nK1o0n wrote a solution, but accidentally considered the value of $n$ as a\nstring, so the value of $n \\cdot a - b$ was calculated differently.\nSpecifically:\n\n  * when multiplying the string $n$ by the integer $a$, he will get the string $s=\\underbrace{n + n + \\dots + n + n}_{a\\ \\text{times}}$ \n  * when subtracting the integer $b$ from the string $s$, the last $b$ characters will be removed from it. If $b$ is greater than or equal to the length of the string $s$, it will become empty. \n\nLearning about this, ErnKor became interested in how many pairs $(a, b)$\nexist for a given $n$, satisfying the constraints of the problem, on which\nK1o0n's solution gives the correct answer.\n\n\"The solution gives the correct answer\" means that it outputs a non-empty\nstring, and this string, when converted to an integer, equals the correct\nanswer, i.e., the value of $n \\cdot a - b$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 100$)  \u2014\nthe number of test cases.\n\nFor each test case, a single line of input contains an integer $n$ ($1\n\\le n \\le 100$).\n\nIt is guaranteed that in all test cases, $n$ is distinct.",
        "output": "For each test case, output the answer in the following format:\n\nIn the first line, output the integer $x$ \u2014 the number of bad tests for\nthe given $n$.\n\nIn the next $x$ lines, output two integers $a_i$ and $b_i$ \u2014 such\nintegers that K1o0n's solution on the test \"$n$ $a_i$ $b_i$\" gives\nthe correct answer.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2\n3\n10\n</pre></td>\n    <td><pre>3\n20 18 \n219 216 \n2218 2214 \n1\n165 162 \n1\n1262 2519 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, $a = 20$, $b = 18$ are suitable, as\n\"$\\text{2}$\" $\\cdot 20 - 18 =$ \"$\\text{22222222222222222222}$\"$-\n18 = 22 = 2 \\cdot 20 - 18$"
    },
    {
        "problem_id": "1992F",
        "url": "https://codeforces.com/problemset/problem/1992/F",
        "title": "Valuable Cards",
        "rating": 1900,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "number theory",
            "two pointers"
        ],
        "div": "Div. 3",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "In his favorite cafe Kmes once again wanted to try the herring under a fur\ncoat. Previously, it would not have been difficult for him to do this, but the\ncafe recently introduced a new purchasing policy.\n\nNow, in order to make a purchase, Kmes needs to solve the following problem:\n$n$ cards with prices for different positions are laid out in front of\nhim, on the $i$-th card there is an integer $a_i$, among these prices\nthere is no whole positive integer $x$.\n\nKmes is asked to divide these cards into the minimum number of bad segments\n(so that each card belongs to exactly one segment). A segment is considered\nbad if it is impossible to select a subset of cards with a product equal to\n$x$. All segments, in which Kmes will divide the cards, must be bad.\n\nFormally, the segment $(l, r)$ is bad if there are no indices $i_1 < i_2\n< \\ldots < i_k$ such that $l \\le i_1, i_k \\le r$, and $a_{i_1} \\cdot\na_{i_2} \\ldots \\cdot a_{i_k} = x$.\n\nHelp Kmes determine the minimum number of bad segments in order to enjoy his\nfavorite dish.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^3$) \u2014\nthe number of test cases.\n\nThe first line of each set of input data gives you $2$ integers $n$\nand $x$ ($1 \\le n \\le 10^5, 2 \\le x \\le 10^5$) \u2014 the number of cards\nand the integer, respectively.\n\nThe second line of each set of input data contains $n$ integers $a_i$\n($1 \\le a_i \\le 2 \\cdot 10^5, a_i \\neq x$) \u2014 the prices on the cards.\n\nIt is guaranteed that the sum of $n$ over all sets of test data does not\nexceed $10^5$.",
        "output": "For each set of input data, output the minimum number of bad segments.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n6 4\n2 3 6 2 1 2\n9 100000\n50000 25000 12500 6250 3125 2 4 8 16\n5 2\n1 1 1 1 1\n8 6\n4 3 4 3 4 3 4 3\n7 12\n6 11 1 3 11 10 2\n10 5\n2 4 4 2 4 4 4 3 1 1\n7 8\n4 6 5 1 2 4 1\n8 27\n3 9 17 26 2 20 9 3\n</pre></td>\n    <td><pre>3\n2\n1\n1\n2\n1\n3\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1992G",
        "url": "https://codeforces.com/problemset/problem/1992/G",
        "title": "Ultra-Meow",
        "rating": 2000,
        "tags": [
            "combinatorics",
            "dp",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2500,
        "memory_limit_mb": 256,
        "description": "K1o0n gave you an array $a$ of length $n$, consisting of numbers $1,\n2, \\ldots, n$. Accept it? Of course! But what to do with it? Of course,\ncalculate $\\text{MEOW}(a)$.\n\nLet $\\text{MEX}(S, k)$ be the $k$-th positive (strictly greater than\nzero) integer in ascending order that is not present in the set $S$.\nDenote $\\text{MEOW}(a)$ as the sum of $\\text{MEX}(b, |b| + 1)$, over\nall distinct subsets $b$ of the array $a$.\n\nExamples of $\\text{MEX}(S, k)$ values for sets:\n\n  * $\\text{MEX}(\\\\{3,2\\\\}, 1) = 1$, because $1$ is the first positive integer not present in the set; \n  * $\\text{MEX}(\\\\{4,2,1\\\\}, 2) = 5$, because the first two positive integers not present in the set are $3$ and $5$; \n  * $\\text{MEX}(\\\\{\\\\}, 4) = 4$, because there are no numbers in the empty set, so the first $4$ positive integers not present in it are $1, 2, 3, 4$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nIn a single line of each test case, an integer $n$ ($1 \\le n \\le\n5000$) is entered, the size of the array of gifted numbers.\n\nIt is guaranteed that the sum of $n^2$ over all test cases does not exceed\n$25 \\cdot 10^6$.",
        "output": "For each test case, output a single number \u2014 $\\text{MEOW}(a)$. Since it\nmay be very large, output it modulo $10^9 + 7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n3\n4999\n5\n1\n</pre></td>\n    <td><pre>12\n31\n354226409\n184\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1993A",
        "url": "https://codeforces.com/problemset/problem/1993/A",
        "title": "Question Marks",
        "rating": 800,
        "tags": [
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Tim is doing a test consisting of $4n$ questions; each question has\n$4$ options: 'A', 'B', 'C', and 'D'. For each option, there are exactly\n$n$ correct answers corresponding to that option \u2014 meaning there are\n$n$ questions with the answer 'A', $n$ questions with the answer 'B',\n$n$ questions with the answer 'C', and $n$ questions with the answer\n'D'.\n\nFor each question, Tim wrote his answer on the answer sheet. If he could not\nfigure out the answer, he would leave a question mark '?' for that question.\n\nYou are given his answer sheet of $4n$ characters. What is the maximum\nnumber of correct answers Tim can get?",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 1000$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le\n100$).\n\nThe second line of each test case contains a string $s$ of $4n$\ncharacters ($s_i \\in \\\\{\\texttt{A}, \\texttt{B}, \\texttt{C}, \\texttt{D},\n\\texttt{?}\\\\}$) \u2014 Tim's answers for the questions.",
        "output": "For each test case, print a single integer \u2014 the maximum score that Tim can\nachieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1\nABCD\n2\nAAAAAAAA\n2\nAAAABBBB\n2\n????????\n3\nABCABCABCABC\n5\nACADC??ACAC?DCAABC?C\n</pre></td>\n    <td><pre>4\n2\n4\n0\n9\n13\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there is exactly one question with each answer 'A',\n'B', 'C', and 'D'; so it's possible that Tim gets all his answers correct.\n\nIn the second test case, there are only two correct answers 'A' which makes\nhim get exactly $2$ points in any case.\n\nIn the third test case, Tim can get at most $2$ correct answers with\noption 'A' and $2$ correct answers with option 'B'. For example, he would\nget $4$ points if the answers were 'AACCBBDD'.\n\nIn the fourth test case, he refuses to answer any question at all, which makes\nhim get $0$ points."
    },
    {
        "problem_id": "1993B",
        "url": "https://codeforces.com/problemset/problem/1993/B",
        "title": "Parity and Sum",
        "rating": 1100,
        "tags": [
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Given an array $a$ of $n$ positive integers.\n\nIn one operation, you can pick any pair of indexes $(i, j)$ such that\n$a_i$ and $a_j$ have distinct parity, then replace the smaller one\nwith the sum of them. More formally:\n\n  * If $a_i < a_j$, replace $a_i$ with $a_i + a_j$; \n  * Otherwise, replace $a_j$ with $a_i + a_j$. \n\nFind the minimum number of operations needed to make all elements of the array\nhave the same parity.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\le a_i \\le 10^9$) \u2014 the elements of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of operations\nrequired.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n5\n1 3 5 7 9\n4\n4 4 4 4\n3\n2 3 4\n4\n3 2 2 8\n6\n4 3 6 1 2 1\n6\n3 6 1 2 1 2\n5\n999999996 999999997 999999998 999999999 1000000000\n</pre></td>\n    <td><pre>0\n0\n2\n4\n3\n3\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, all integers already have the same parity. Therefore,\nno operation is needed.\n\nIn the third test case, we can perform two operations $(1, 2)$ and $(1,\n3)$. The array $a$ transforms as follows: $a = [\\color{red}2,\n\\color{red}3, 4] \\longrightarrow [\\color{red}5, 3, \\color{red}4]\n\\longrightarrow [5, 3, 9]$.\n\nIn the fourth test case, an example of an optimal sequence of operations is\n$(1, 2)$, $(1, 3)$, $(1, 4)$, and $(1, 4)$. The array $a$\ntransforms as follows: $a = [\\color{red}3, \\color{red}2, 2, 8]\n\\longrightarrow [\\color{red}3, 5, \\color{red}2, 8] \\longrightarrow\n[\\color{red}3, 5, 5, \\color{red}8] \\longrightarrow [\\color{red}{11}, 5, 5,\n\\color{red}8] \\longrightarrow [11, 5, 5, 19]$."
    },
    {
        "problem_id": "1993C",
        "url": "https://codeforces.com/problemset/problem/1993/C",
        "title": "Light Switches",
        "rating": 1400,
        "tags": [
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "There is an apartment consisting of $n$ rooms, each with its light\ninitially turned off.\n\nTo control the lights in these rooms, the owner of the apartment decided to\ninstall chips in the rooms so that each room has exactly one chip, and the\nchips are installed at different times. Specifically, these times are\nrepresented by the array $a_1, a_2, \\ldots, a_n$, where $a_i$ is the\ntime (in minutes) at which a chip is installed in the $i$-th room.\n\nAs soon as a chip is installed, it changes the room's light status every\n$k$ minutes \u2014 it turns on the light for $k$ minutes, then turns it off\nfor the next $k$ minutes, then turns it back on for the next $k$\nminutes, and so on. In other words, the light status is changed by the chip at\nminute $a_i$, $a_i + k$, $a_i + 2k$, $a_i + 3k$, $\\ldots$\nfor the $i$-th room.\n\nWhat is the earliest moment when all rooms in the apartment have their lights\nturned on?",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of rooms in the apartment\nand the period of the chips.\n\nThe second line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$\n($1 \\le a_i \\le 10^9$) \u2014 the moments when the chips are installed.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, print a single integer \u2014 the answer to the question (in\nminutes). If there is no such moment that the lights are turned on in all the\nrooms, print $-1$ instead.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9\n4 4\n2 3 4 5\n4 3\n2 3 4 5\n4 3\n3 4 8 9\n3 3\n6 2 1\n1 1\n1\n7 5\n14 34 6 25 46 7 17\n6 5\n40 80 99 60 90 50\n6 5\n64 40 50 68 70 10\n2 1\n1 1000000000\n</pre></td>\n    <td><pre>5\n-1\n10\n8\n1\n47\n100\n-1\n-1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, all lights will be on by the minute $5$ without\nany of them being turned off by the chips. The answer is $5$.\n\nIn the second test case, due to $k=3$, the $1$-st light will be on at\nminutes $2, 3, 4, 8, 9, 10, 14, \\ldots$; meanwhile, the $4$-th light\nwill be on at minutes $5, 6, 7, 11, 12, 13, 17, \\ldots$. These two\nsequences don't have any number in common, so they will never be on at the\nsame time.\n\nIn the third test case, it can be seen that the $1$-st and $2$-nd\nlights will be turned off at minutes $6$ and $7$, but the chips will\nturn them back on at minutes $9$ and $10$. The $3$-rd and\n$4$-th lights will also be on at minute $10$, so the answer is\n$10$."
    },
    {
        "problem_id": "1993D",
        "url": "https://codeforces.com/problemset/problem/1993/D",
        "title": "Med-imize",
        "rating": 2200,
        "tags": [
            "binary search",
            "dp",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Given two positive integers $n$ and $k$, and another array $a$ of\n$n$ integers.\n\nIn one operation, you can select any subarray of size $k$ of $a$, then\nremove it from the array without changing the order of other elements. More\nformally, let $(l, r)$ be an operation on subarray $a_l, a_{l+1},\n\\ldots, a_r$ such that $r-l+1=k$, then performing this operation means\nreplacing $a$ with $[a_1, \\ldots, a_{l-1}, a_{r+1}, \\ldots, a_n]$.\n\nFor example, if $a=[1,2,3,4,5]$ and we perform operation $(3,5)$ on\nthis array, it will become $a=[1,2]$. Moreover, operation $(2, 4)$\nresults in $a=[1,5]$, and operation $(1,3)$ results in $a=[4,5]$.\n\nYou have to repeat the operation while the length of $a$ is greater than\n$k$ (which means $|a| \\gt k$). What is the largest possible\nmedian$^\\dagger$ of all remaining elements of the array $a$ after the\nprocess?\n\n$^\\dagger$The median of an array of length $n$ is the element whose\nindex is $\\left \\lfloor (n+1)/2 \\right \\rfloor$ after we sort the elements\nin non-decreasing order. For example: $median([2,1,5,4,3]) = 3$,\n$median([5]) = 5$, and $median([6,8,2,4]) = 4$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\le n, k \\le 5 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\le a_i \\le 10^9$) \u2014 the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case, print a single integer \u2014 the largest median possible after\nperforming the operations.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n4 3\n3 9 9 2\n5 3\n3 2 5 6 4\n7 1\n5 9 2 6 5 4 6\n8 2\n7 1 2 6 8 3 4 5\n4 5\n3 4 5 6\n</pre></td>\n    <td><pre>3\n4\n9\n6\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can select a subarray $(l, r)$ which can be\neither $(1, 3)$ or $(2, 4)$. Thus, two obtainable final arrays are\n$[3]$ and $[2]$. The former one has the larger median ($3 > 2$) so\nthe answer is $3$.\n\nIn the second test case, three obtainable final arrays are $[6, 4]$,\n$[3, 4]$, and $[3, 2]$. Their medians are $4$, $3$, and\n$2$ respectively. The answer is $4$.\n\nIn the third test case, only one element is left in the final array and it can\nbe any element of the initial array. The largest one among them is $9$, so\nthe answer is $9$."
    },
    {
        "problem_id": "1993E",
        "url": "https://codeforces.com/problemset/problem/1993/E",
        "title": "Xor-Grid Problem",
        "rating": 2700,
        "tags": [
            "bitmasks",
            "constructive algorithms",
            "dp",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 256,
        "description": "Given a matrix $a$ of size $n \\times m$, each cell of which contains a\nnon-negative integer. The integer lying at the intersection of the $i$-th\nrow and the $j$-th column of the matrix is called $a_{i,j}$.\n\nLet's define $f(i)$ and $g(j)$ as the\n[XOR](https://en.wikipedia.org/wiki/Exclusive_or) of all integers in the\n$i$-th row and the $j$-th column, respectively. In one operation, you\ncan either:\n\n  * Select any row $i$, then assign $a_{i,j} := g(j)$ for each $1 \\le j \\le m$; or \n  * Select any column $j$, then assign $a_{i,j} := f(i)$ for each $1 \\le i \\le n$. \n\n![](CDN_BASE_URL/3bba110245afb461968dbb618fc60828) An example of applying an\noperation on column $2$ of the matrix.\n\nIn this example, as we apply an operation on column $2$, all elements in\nthis column are changed:\n\n  * $a_{1,2} := f(1) = a_{1,1} \\oplus a_{1,2} \\oplus a_{1,3} \\oplus a_{1,4} = 1 \\oplus 1 \\oplus 1 \\oplus 1 = 0$ \n  * $a_{2,2} := f(2) = a_{2,1} \\oplus a_{2,2} \\oplus a_{2,3} \\oplus a_{2,4} = 2 \\oplus 3 \\oplus 5 \\oplus 7 = 3$ \n  * $a_{3,2} := f(3) = a_{3,1} \\oplus a_{3,2} \\oplus a_{3,3} \\oplus a_{3,4} = 2 \\oplus 0 \\oplus 3 \\oplus 0 = 1$ \n  * $a_{4,2} := f(4) = a_{4,1} \\oplus a_{4,2} \\oplus a_{4,3} \\oplus a_{4,4} = 10 \\oplus 11 \\oplus 12 \\oplus 16 = 29$ \n\nYou can apply the operations any number of times. Then, we calculate the\n$\\textit{beauty}$ of the final matrix by summing the absolute differences\nbetween all pairs of its adjacent cells.\n\nMore formally, $\\textit{beauty}(a) = \\sum|a_{x,y} - a_{r,c}|$ for all\ncells $(x, y)$ and $(r, c)$ if they are adjacent. Two cells are\nconsidered adjacent if they share a side.\n\nFind the minimum $\\textit{beauty}$ among all obtainable matrices.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 250$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\le n, m \\le 15$) \u2014 the number of rows and columns of $a$,\nrespectively.\n\nThe next $n$ lines, each containing $m$ integers $a_{i,1}, a_{i,2},\n\\ldots, a_{i,m}$ ($0 \\le a_{i,j} < 2^{20}$) \u2014 description of the matrix\n$a$.\n\nIt is guaranteed that the sum of $(n^2 + m^2)$ over all test cases does\nnot exceed $500$.",
        "output": "For each test case, print a single integer $b$ \u2014 the smallest possible\n$\\textit{beauty}$ of the matrix.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 2\n1 3\n2 3\n0 1 0\n5 4 4\n2 3\n0 2 4\n4 5 1\n3 3\n1 2 3\n4 5 6\n7 8 9\n</pre></td>\n    <td><pre>1\n3\n13\n24\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Let's denote $r(i)$ as the first type operation applied on the $i$-th\nrow, and $c(j)$ as the second type operation applied on the $j$-th\ncolumn.\n\nIn the first test case, you can apply an operation $c(1)$, which assigns\n$a_{1,1} := 1 \\oplus 3 = 2$. Then, we'll receive this matrix:\n\n2| 3  \n---|---  \n  \nIn the second test case, you can apply an operation $r(1)$, which assigns:\n\n  * $a_{1,1} := g(1) = 0 \\oplus 5 = 5$ \n  * $a_{1,2} := g(2) = 1 \\oplus 4 = 5$ \n  * $a_{1,3} := g(3) = 0 \\oplus 4 = 4$ \n\nThe resulting matrix after performing the operation is:\n\n5| 5| 4  \n---|---|---  \n5| 4| 4  \n  \nIn the third test case, the best way to achieve minimum $\\textit{beauty}$\nis applying three operations: $c(3)$, $r(2)$, and $c(2)$. The\nresulting matrix is:\n\n0| 4| 6  \n---|---|---  \n4| 5| 6"
    },
    {
        "problem_id": "1993F1",
        "url": "https://codeforces.com/problemset/problem/1993/F1",
        "title": "Dyn-scripted Robot (Easy Version)",
        "rating": 2400,
        "tags": [
            "brute force",
            "chinese remainder theorem",
            "constructive algorithms",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. The only difference is that in this\nversion $k \\le n$. You can make hacks only if both versions of the problem\nare solved.  \n  \nGiven a $w \\times h$ rectangle on the $Oxy$ plane, with points $(0,\n0)$ at the bottom-left and $(w, h)$ at the top-right of the rectangle.\n\nYou also have a robot initially at point $(0, 0)$ and a script $s$ of\n$n$ characters. Each character is either L, R, U, or D, which tells the\nrobot to move left, right, up, or down respectively.\n\nThe robot can only move inside the rectangle; otherwise, it will change the\nscript $s$ as follows:\n\n  * If it tries to move outside a vertical border, it changes all L characters to R's (and vice versa, all R's to L's). \n  * If it tries to move outside a horizontal border, it changes all U characters to D's (and vice versa, all D's to U's). \n\nThen, it will execute the changed script starting from the character which it\ncouldn't execute.\n\n![](CDN_BASE_URL/ff5ae9758c965c2d8398c936e9581dab) An example of the robot's\nmovement process, $s = \\texttt{\"ULULURD\"}$\n\nThe script $s$ will be executed for $k$ times continuously. All\nchanges to the string $s$ will be retained even when it is repeated.\nDuring this process, how many times will the robot move to the point $(0,\n0)$ in total? Note that the initial position does NOT count.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains four integers $n$, $k$,\n$w$, and $h$ ($1 \\le n, w, h \\le 10^6$; $1 \\le k \\le n$).\n\nThe second line contains a single string $s$ of size $n$ ($s_i \\in\n\\\\{\\texttt{L}, \\texttt{R}, \\texttt{U}, \\texttt{D}\\\\}$) \u2014 the script to be\nexecuted.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, print a single integer \u2014 the number of times the robot\nreaches $(0, 0)$ when executing script $s$ for $k$ times\ncontinuously.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2 2 2 2\nUR\n4 2 1 1\nLLDD\n6 3 3 1\nRLRRRL\n5 5 3 3\nRUURD\n7 5 3 4\nRRDLUUU\n</pre></td>\n    <td><pre>0\n4\n3\n0\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the robot only moves up and right. In the end, it\noccupies the position $(2, 2)$ but never visits $(0, 0)$. So the\nanswer is $0$.\n\nIn the second test case, each time executing the script the robot visits the\norigin twice. And since $k=2$, it visits the origin $2 \\cdot 2 = 4$\ntimes overall.\n\n![](CDN_BASE_URL/ea799abf84f8a212d5a0d782be4d5e9c)\n\nIn the third test case, the visualization is shown as below:\n\n![](CDN_BASE_URL/c6a5be14982b3d57a5103783598d4683)"
    },
    {
        "problem_id": "1993F2",
        "url": "https://codeforces.com/problemset/problem/1993/F2",
        "title": "Dyn-scripted Robot (Hard Version)",
        "rating": 2800,
        "tags": [
            "chinese remainder theorem",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. The only difference is that in this\nversion $k \\le 10^{12}$. You can make hacks only if both versions of the\nproblem are solved.\n\nGiven a $w \\times h$ rectangle on the $Oxy$ plane, with points $(0,\n0)$ at the bottom-left and $(w, h)$ at the top-right of the rectangle.\n\nYou also have a robot initially at point $(0, 0)$ and a script $s$ of\n$n$ characters. Each character is either L, R, U, or D, which tells the\nrobot to move left, right, up, or down respectively.\n\nThe robot can only move inside the rectangle; otherwise, it will change the\nscript $s$ as follows:\n\n  * If it tries to move outside a vertical border, it changes all L characters to R's (and vice versa, all R's to L's). \n  * If it tries to move outside a horizontal border, it changes all U characters to D's (and vice versa, all D's to U's). \n\nThen, it will execute the changed script starting from the character which it\ncouldn't execute.\n\n![](CDN_BASE_URL/ff5ae9758c965c2d8398c936e9581dab) An example of the robot's\nmovement process, $s = \\texttt{\"ULULURD\"}$\n\nThe script $s$ will be executed for $k$ times continuously. All\nchanges to the string $s$ will be retained even when it is repeated.\nDuring this process, how many times will the robot move to the point $(0,\n0)$ in total? Note that the initial position does NOT count.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains four integers $n$, $k$,\n$w$, and $h$ ($1 \\le n, w, h \\le 10^6$; $1 \\le k \\le\n10^{12}$).\n\nThe second line contains a single string $s$ of size $n$ ($s_i \\in\n\\\\{\\texttt{L}, \\texttt{R}, \\texttt{U}, \\texttt{D}\\\\}$) \u2014 the script to be\nexecuted.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, print a single integer \u2014 the number of times the robot\nreaches $(0, 0)$ when executing script $s$ for $k$ times\ncontinuously.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2 4 2 2\nUR\n4 2 1 1\nLLDD\n6 3 3 1\nRLRRRL\n5 6 3 3\nRUURD\n7 5 3 4\nRRDLUUU\n7 123456789999 3 2\nULULURD\n</pre></td>\n    <td><pre>1\n4\n3\n1\n1\n41152263332\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the robot only moves up and right for the first two\nexecutions. After that, it occupies the position $(2, 2)$. For the next\ntwo executions, it moves down and left and finishes at $(0, 0)$. So the\nanswer is $1$.\n\nIn the second test case, each time executing the script the robot visits the\norigin twice. And since $k=2$, it visits the origin $2 \\cdot 2 = 4$\ntimes overall.\n\n![](CDN_BASE_URL/ea799abf84f8a212d5a0d782be4d5e9c)\n\nIn the third test case, the visualization is shown as below:\n\n![](CDN_BASE_URL/c6a5be14982b3d57a5103783598d4683)"
    },
    {
        "problem_id": "1994A",
        "url": "https://codeforces.com/problemset/problem/1994/A",
        "title": "Diverse Game",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Petr, watching Sergey's stream, came up with a matrix $a$, consisting of\n$n$ rows and $m$ columns (the number in the $i$-th row and\n$j$-th column is denoted as $a_{i, j}$), which contains all integers\nfrom $1$ to $n \\cdot m$. But he didn't like the arrangement of the\nnumbers, and now he wants to come up with a new matrix $b$, consisting of\n$n$ rows and $m$ columns, which will also contain all integers from\n$1$ to $n \\cdot m$, such that for any $1 \\leq i \\leq n, 1 \\leq j\n\\leq m$ it holds that $a_{i, j} \\ne b_{i, j}$.\n\nYou are given the matrix $a$, construct any matrix $b$ that meets\nPetr's requirements, or determine that it is impossible.\n\nHurry up! Otherwise, he will donate all his money to the stream in search of\nan answer to his question.",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$t$ ($1 \\leq t \\leq 10^3$) \u2014 the number of test cases. Then follows\nthe description of the test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\leq n, m \\leq 10$) \u2014 the number of rows and columns of matrix\n$a$.\n\nThe next $n$ lines contain $m$ integers each, describing matrix\n$a$. The $i$-th of these lines contains the elements of matrix\n$a_{i, 1}, a_{i, 2}, \\ldots, a_{i, m}$.\n\nIt is guaranteed that all numbers in matrix $a$ are distinct and $1 \\leq\na_{i, j} \\leq n \\cdot m$.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not\nexceed $5 \\cdot 10^4$.",
        "output": "For each test case, output $n \\cdot m$ integers \u2014 any suitable matrix\n$b$, or $-1$ if such a matrix does not exist.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1 1\n1\n2 1\n2\n1\n1 5\n2 4 5 3 1\n2 4\n1 2 3 4\n5 6 7 8\n3 3\n4 2 1\n9 8 3\n6 7 5\n</pre></td>\n    <td><pre>-1\n1 \n2 \n4 5 3 1 2 \n6 7 8 5 \n2 3 4 1 \n8 3 9 \n7 5 6 \n2 1 4 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there is only one element in the matrix, so matrix\n$b$ is the only matrix and it does not fit.\n\nIn the second test case $a_{1, 1} = 2 \\neq 1 = b_{1, 1}$, $a_{2, 1} = 1\n\\neq 2 = b_{2, 1}$."
    },
    {
        "problem_id": "1994B",
        "url": "https://codeforces.com/problemset/problem/1994/B",
        "title": "Fun Game",
        "rating": 1100,
        "tags": [
            "bitmasks",
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Vova really loves the\n[XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) operation (denoted\nas $\\oplus$). Recently, when he was going to sleep, he came up with a fun\ngame.\n\nAt the beginning of the game, Vova chooses two binary sequences $s$ and\n$t$ of length $n$ and gives them to Vanya. A binary sequence is a\nsequence consisting only of the numbers $0$ and $1$. Vanya can choose\nintegers $l, r$ such that $1 \\leq l \\leq r \\leq n$, and for all $l\n\\leq i \\leq r$ simultaneously replace $s_i$ with $s_i \\oplus s_{i - l\n+ 1}$, where $s_i$ is the $i$-th element of the sequence $s$.\n\nIn order for the game to be interesting, there must be a possibility to win.\nVanya wins if, with an unlimited number of actions, he can obtain the sequence\n$t$ from the sequence $s$. Determine if the game will be interesting\nfor the sequences $s$ and $t$.",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$q$ ($1 \\le q \\le 10^{4}$) \u2014 the number of test cases. Then follows\nthe description of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq\nn \\leq 2 \\cdot 10^5$) \u2014 the length of the sequences $s$ and $t$.\n\nThe second line of each test case contains a binary sequence $s$ of length\n$n$.\n\nThe third line of each test case contains a binary sequence $t$ of length\n$n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output \"Yes\" if the game will be interesting, otherwise\noutput \"No\".\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1\n0\n1\n7\n0110100\n0110100\n9\n100101010\n101111110\n4\n0011\n1011\n4\n0100\n0001\n8\n10110111\n01100000\n</pre></td>\n    <td><pre>NO\nYES\nYES\nNO\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Vanya will not be able to change the sequence $s$\nwith the only possible action of choosing $l = r = 1$.\n\nIn the second test case, the sequences $s$ and $t$ are already equal.\n\nIn the third test case, Vanya can act as follows:\n\n  1. Choose $l = 3$ and $r = 5$, then $s$ will become $\\mathtt{101101010}$.\n  2. Choose $l = 5$ and $r = 6$, then $s$ will become $\\mathtt{101111010}$.\n  3. Choose $l = 7$ and $r = 7$, then $s$ will become $\\mathtt{101111110}$."
    },
    {
        "problem_id": "1994C",
        "url": "https://codeforces.com/problemset/problem/1994/C",
        "title": "Hungry Games",
        "rating": 1600,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Yaroslav is playing a computer game, and at one of the levels, he encountered\n$n$ mushrooms arranged in a row. Each mushroom has its own level of\ntoxicity; the $i$-th mushroom from the beginning has a toxicity level of\n$a_i$. Yaroslav can choose two integers $1 \\le l \\le r \\le n$, and\nthen his character will take turns from left to right to eat mushrooms from\nthis subsegment one by one, i.e., the mushrooms with numbers $l, l+1, l+2,\n\\ldots, r$.\n\nThe character has a toxicity level $g$, initially equal to $0$. The\ncomputer game is defined by the number $x$ \u2014 the maximum toxicity level at\nany given time. When eating a mushroom with toxicity level $k$, the\nfollowing happens:\n\n  1. The toxicity level of the character is increased by $k$. \n  2. If $g \\leq x$, the process continues; otherwise, $g$ becomes zero and the process continues. \n\nYaroslav became interested in how many ways there are to choose the values of\n$l$ and $r$ such that the final value of $g$ is not zero. Help\nYaroslav find this number!",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10^{4}$) \u2014 the number of test cases. Then follows\nthe description of the test cases.\n\nThe first line of each test case contains two integers $n$, $x$ ($1\n\\leq n \\leq 2 \\cdot 10^5, 1 \\le x \\le 10^9$) \u2014 the number of mushrooms and\nthe maximum toxicity level.\n\nThe second line of each test case contains $n$ numbers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single number \u2014 the number of subsegments such\nthat the final value of $g$ will not be zero.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n4 2\n1 1 1 1\n3 2\n1 2 3\n1 6\n10\n6 3\n1 2 1 4 3 8\n5 999999999\n999999999 999999998 1000000000 1000000000 500000000\n</pre></td>\n    <td><pre>8\n2\n0\n10\n7\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the subsegments $(1, 1)$, $(1, 2)$, $(1,\n4)$, $(2, 2)$, $(2, 3)$, $(3, 3)$, $(3, 4)$ and $(4, 4)$\nare suitable.\n\nIn the second test case, non-zero $g$ will remain only on the subsegments\n$(1, 1)$ and $(2, 2)$.\n\nIn the third test case, on the only possible subsegment, $g$ will be zero."
    },
    {
        "problem_id": "1994D",
        "url": "https://codeforces.com/problemset/problem/1994/D",
        "title": "Funny Game",
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "dsu",
            "graphs",
            "greedy",
            "math",
            "number theory",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Vanya has a graph with $n$ vertices (numbered from $1$ to $n$) and\nan array $a$ of $n$ integers; initially, there are no edges in the\ngraph. Vanya got bored, and to have fun, he decided to perform $n - 1$\noperations.\n\nOperation number $x$ (operations are numbered in order starting from\n$1$) is as follows:\n\n  * Choose $2$ different numbers $1 \\leq u,v \\leq n$, such that $|a_u - a_v|$ is divisible by $x$. \n  * Add an undirected edge between vertices $u$ and $v$ to the graph. \n\nHelp Vanya get a connected$^{\\text{\u2217}}$ graph using the $n - 1$\noperations, or determine that it is impossible.\n\n$^{\\text{\u2217}}$A graph is called connected if it is possible to reach any\nvertex from any other by moving along the edges.",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10^{3}$) \u2014 the number of test cases. Then follows\nthe description of the test cases.\n\nThe first line of each test case contains the number $n$ ($1 \\leq n \\leq\n2000$) \u2014 the number of vertices in the graph.\n\nThe second line of each test case contains $n$ numbers $a_1, a_2, \\cdots\na_n$ ($1 \\leq a_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2000$.",
        "output": "For each test case, if there is no solution, then output \"No\" (without\nquotes).\n\nOtherwise, output \"Yes\" (without quotes), and then output $n - 1$ lines,\nwhere in the $i$-th line, output the numbers $u$ and $v$ that need\nto be chosen for operation $i$.\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n2\n1 4\n4\n99 7 1 13\n5\n10 2 31 44 73\n5\n87 6 81 44 32\n5\n62 35 33 79 16\n5\n6 51 31 69 42\n5\n52 63 25 21 5\n12\n33 40 3 11 31 43 37 8 50 5 12 22\n</pre></td>\n    <td><pre>YES\n2 1\nYES\n4 1\n2 1\n3 2\nYES\n5 1\n4 1\n3 1\n2 1\nYES\n4 1\n3 1\n2 1\n5 4\nYES\n3 1\n5 1\n2 1\n4 2\nYES\n4 1\n5 1\n2 1\n3 2\nYES\n2 1\n5 2\n3 1\n4 3\nYES\n9 1\n12 9\n11 1\n10 1\n6 1\n7 6\n2 1\n8 2\n5 2\n3 1\n4 1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Let's consider the second test case.\n\n  * First operation $(x = 1)$: we can connect vertices $4$ and $1$, since $|a_4 - a_1| = |13 - 99| = |-86| = 86$, and $86$ is divisible by $1$. \n\n![](CDN_BASE_URL/d5bda17d671017452a9b15fcc295e674)\n\n  * Second operation $(x = 2)$: we can connect vertices $2$ and $1$, since $|a_2 - a_1| = |7 - 99| = |-92| = 92$, and $92$ is divisible by $2$. \n\n![](CDN_BASE_URL/1d81152e9c8982ea939cd018e6ad6100)\n\n  * Third operation $(x = 3)$: we can connect vertices $3$ and $2$, since $|a_3 - a_2| = |1 - 7| = |-6| = 6$, and $6$ is divisible by $3$. \n\n![](CDN_BASE_URL/d06bb2c9610af86cb6976c8cf8869c7a) From the picture, it can be\nseen that a connected graph is obtained."
    },
    {
        "problem_id": "1994E",
        "url": "https://codeforces.com/problemset/problem/1994/E",
        "title": "Wooden Game",
        "rating": 2000,
        "tags": [
            "bitmasks",
            "greedy",
            "math",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a forest of $k$ rooted trees$^{\\text{\u2217}}$. Lumberjack\nTimofey wants to cut down the entire forest by applying the following\noperation:\n\n  * Select a subtree$^{\\text{\u2020}}$ of any vertex of one of the trees and remove it from the tree. \n\nTimofey loves bitwise operations, so he wants the [bitwise\nOR](https://en.wikipedia.org/wiki/Bitwise_operation#OR) of the sizes of the\nsubtrees he removed to be maximum. Help him and find the maximum result he can\nobtain.\n\n$^{\\text{\u2217}}$ A tree is a connected graph without cycles, loops, or\nmultiple edges. In a rooted tree, a selected vertex is called a root. A forest\nis a collection of one or more trees.\n\n$^{\\text{\u2020}}$ The subtree of a vertex $v$ is the set of vertices for\nwhich $v$ lies on the shortest path from this vertex to the root,\nincluding $v$ itself.",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. Then follows\nthe description of the test cases.\n\nThe first line of each test case contains a single integer $k$ ($1 \\leq\nk \\leq 10^6$) \u2014 the number of trees in the forest.\n\nThis is followed by a description of each of the $k$ trees:\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^6$) \u2014\nthe size of the tree. The vertices of the tree are numbered with integers from\n$1$ to $n$. The root of the tree is vertex number $1$.\n\nThe second line contains $n - 1$ integers $p_2, p_3, \\ldots p_n$ ($1\n\\leq p_i < i$), where $p_i$ \u2014 the parent of vertex $i$.\n\nIt is guaranteed that the sum of $k$ and $n$ for all sets of input\ndata does not exceed $10^6$.",
        "output": "For each test case, output a single integer \u2014 the maximum result that can be\nobtained.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1\n1\n\n\n2\n4\n1 2 2\n6\n1 1 3 1 3\n1\n10\n1 2 2 1 1 5 7 6 4\n</pre></td>\n    <td><pre>1\n7\n10\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the second test case, the trees look like this:\n\n![](CDN_BASE_URL/149fbfb0b4a0bcf29a8a6b8b997b79b2)\n\nThe first operation removes the entire second tree.\n\n![](CDN_BASE_URL/3a1651525e7c5087a7d88d51824c16d6)\n\nThe second operation removes vertex $4$ from the first tree.\n\n![](CDN_BASE_URL/c5e219384aa686ba75274781503be59f)\n\nThe third operation removes the first tree. The result is $6|1|3 = 7$\n($|$ denotes bitwise OR).\n\nIn the third test case, the entire tree needs to be removed."
    },
    {
        "problem_id": "1994F",
        "url": "https://codeforces.com/problemset/problem/1994/F",
        "title": "Stardew Valley",
        "rating": 2500,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Pelican Town represents $n$ houses connected by $m$ bidirectional\nroads. Some roads have NPCs standing on them. Farmer Buba needs to walk on\neach road with an NPC and talk to them.\n\nHelp the farmer find a route satisfying the following properties:\n\n  * The route starts at some house, follows the roads, and ends at the same house. \n  * The route does not follow any road more than once (in both directions together). \n  * The route follows each road with an NPC exactly once. \n\nNote that the route can follow roads without NPCs, and you do not need to\nminimize the length of the route.\n\nIt is guaranteed that you can reach any house from any other by walking on the\nroads with NPCs only.",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$t$ ($1 \\le t \\le 10^{4}$) \u2014 the number of test cases. Then follows\nthe description of the test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($2 \\leq n \\leq 5 \\cdot 10^5, 1 \\leq m \\leq 5 \\cdot 10^5$) \u2014 the number of\nhouses and roads in Pelican Town respectively.\n\nIn each of the next $m$ lines, three integers $u$, $v$, and\n$c$ ($1 \\leq u, v \\leq n, c = 0/1$) are given \u2014 the ends of the road\nand whether an NPC is on this road. If $c = 1$, then the road has an NPC.\nIf $c = 0$, then the road has no NPC.\n\nThe graph may contain multiple edges and loops, and if there are multiple\nedges with NPCs standing on them, the route must follow each of these roads.\n\nIt is guaranteed that you can reach any house from any other by walking on the\nroads with NPCs only.\n\nIt is guaranteed that the sum of $n$ and $m$ for all test cases does\nnot exceed $5 \\cdot 10^5$.",
        "output": "For each test case, if there is no solution, then output \"No\" (without\nquotes).\n\nOtherwise, output \"Yes\" (without quotes), and then output $k$ \u2014 the number\nof roads in the route. In the next line, output $k + 1$ numbers \u2014 the\nhouses of the route in the order of traversal. Note that the first house\nshould match the last one, as the route is cyclic.\n\nIf there are multiple answers, you can print any of them.\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3 2\n1 2 1\n2 3 1\n3 3\n1 2 1\n1 3 1\n2 3 0\n5 9\n1 2 0\n5 2 1\n5 4 1\n5 1 1\n2 3 1\n5 2 1\n4 1 0\n4 3 0\n5 2 0\n</pre></td>\n    <td><pre>NO\nYES\n3\n1 2 3 1 \nYES\n7\n1 2 5 4 3 2 5 1 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Note that in the third test case, there are multiple edges $(5, 2)$. You\nmust walk on two of them."
    },
    {
        "problem_id": "1994G",
        "url": "https://codeforces.com/problemset/problem/1994/G",
        "title": "Minecraft",
        "rating": 2600,
        "tags": [
            "bitmasks",
            "brute force",
            "dp",
            "graphs",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "After winning another Bed Wars game, Masha and Olya wanted to relax and\ndecided to play a new game. Masha gives Olya an array $a$ of length\n$n$ and a number $s$. Now Olya's task is to find a non-negative number\n$x$ such that $\\displaystyle\\sum_{i=1}^{n} a_i \\oplus x = s$. But she\nis very tired after a tight round, so please help her with this.\n\nBut this task seemed too simple to them, so they decided to make the numbers\nlarger (up to $2^k$) and provide you with their binary representation.",
        "input": "Each test consists of several test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then\nfollows the description of the test cases.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\le n, k, n \\cdot k \\le 2 \\cdot 10^6$) \u2014 the length of the array\n$a$ and the length of the binary representation of all numbers.\n\nThe second line contains a string of length $k$, consisting of zeros and\nones \u2014 the binary representation of the number $s$, starting from the most\nsignificant bits.\n\nThe next $n$ lines also contain strings of length $k$, consisting of\nzeros and ones, the $i$-th of these strings contains the binary\nrepresentation of the number $a_i$, starting from the most significant\nbits.\n\nIt is guaranteed that the sum of the values $n \\cdot k$ for all test cases\ndoes not exceed $2 \\cdot 10^6$.",
        "output": "For each test case, output a string of length $k$ on a separate line,\nconsisting of zeros or ones \u2014 the binary representation of any suitable number\n$x$ ($x \\ge 0$), starting from the most significant bits, or $-1$\nif such $x$ does not exist.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n4 5\n01011\n01110\n00110\n01100\n01111\n2 8\n00101001\n10111111\n10011110\n5 4\n0101\n0010\n0000\n0000\n0010\n0011\n6 5\n00011\n10110\n11001\n01010\n11100\n10011\n10000\n</pre></td>\n    <td><pre>01110\n10011010\n0010\n-1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $s = 11, a = [14, 6, 12, 15]$, if $x = 14$,\nthen $\\displaystyle\\sum_{i=1}^{n} a_i \\oplus x = (14 \\oplus 14) + (6 \\oplus\n14) + (12 \\oplus 14) + (15 \\oplus 14) = 0 + 8 + 2 + 1 = 11 = s$.\n\nIn the second test case, $s = 41, a = [191, 158]$, if $x = 154$, then\n$\\displaystyle\\sum_{i=1}^{n} a_i \\oplus x = (191 \\oplus 154) + (158 \\oplus\n154) = 37 + 4 = 41 = s$."
    },
    {
        "problem_id": "1994H",
        "url": "https://codeforces.com/problemset/problem/1994/H",
        "title": "Fortnite",
        "rating": 3500,
        "tags": [
            "combinatorics",
            "constructive algorithms",
            "games",
            "greedy",
            "hashing",
            "interactive",
            "math",
            "number theory",
            "strings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem!\n\nTimofey is writing a competition called Capture the Flag (or CTF for short).\nHe has one task left, which involves hacking a security system. The entire\nsystem is based on polynomial hashes$^{\\text{\u2217}}$.\n\nTimofey can input a string consisting of lowercase Latin letters into the\nsystem, and the system will return its polynomial hash. To hack the system,\nTimofey needs to find the polynomial hash parameters ($p$ and $m$)\nthat the system uses.\n\nTimofey doesn't have much time left, so he will only be able to make $3$\nqueries. Help him solve the task.\n\n$^{\\text{\u2217}}$ The polynomial hash of a string $s$, consisting of\nlowercase Latin letters of length $n$, based on $p$ and modulo $m$\nis $(\\mathrm{ord}(s_1) \\cdot p ^ 0 + \\mathrm{ord}(s_2) \\cdot p ^ 1 +\n\\mathrm{ord}(s_3) \\cdot p ^ 2 + \\ldots + \\mathrm{ord}(s_n) \\cdot p ^ {n - 1})\n\\bmod m$. Where $s_i$ denotes the $i$-th character of the string\n$s$, $\\mathrm{ord}(\\mathrm{chr})$ denotes the ordinal number of the\ncharacter $\\mathrm{chr}$ in the English alphabet, and $x \\bmod m$ is\nthe remainder of $x$ when divided by $m$.",
        "input": "Each test consists of multiple test cases. The first line contains an integer\n$t$ ($1 \\leq t \\leq 10^3$) \u2014 the number of test cases.\n\nIt is guaranteed that the $p$ and $m$ used by the system satisfy the\nconditions: $26 < p \\leq 50$ and $p + 1 < m \\leq 2 \\cdot 10^9$.",
        "output": "",
        "interaction": "To make a query to the system, output ? $s$, where $s$ is a string of\nno more than $50$ characters in length, the hash of which you want to\nknow. In response to this query, you will receive the polynomial hash of the\nstring $s$.\n\nTo output the answer, output ! $p$ $m$, where $p$ is the base of\nthe hash, and $m$ is the modulus. After that, immediately proceed to the\nnext test case.\n\nYou have to make not more than $3$ queries ?, otherwise you will get\nverdict Wrong Answer.\n\nAfter outputting a query, do not forget to output a newline and flush the\noutput buffer. Otherwise, you will receive the verdict Idleness limit\nexceeded. To flush the buffer, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see the documentation for other languages.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n\n32\n\n28</pre></td>\n    <td><pre>? aa\n\n? yb\n\n! 31 59</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Answer for the first query is $(ord(a) \\cdot 31^0 + ord(a) \\cdot 31^1) \\mod\n59 = (1 + 1 \\cdot 31) \\mod 59 = 32$.\n\nAnswer for the second query is $(ord(y) \\cdot 31^0 + ord(b) \\cdot 31^1) \\mod\n59 = (25 + 2 \\cdot 31) \\mod 59 = 28$."
    },
    {
        "problem_id": "1995A",
        "url": "https://codeforces.com/problemset/problem/1995/A",
        "title": "Diagonals",
        "rating": 800,
        "tags": [
            "brute force",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Vitaly503 is given a checkered board with a side of $n$ and $k$ chips.\nHe realized that all these $k$ chips need to be placed on the cells of the\nboard (no more than one chip can be placed on a single cell).\n\nLet's denote the cell in the $i$-th row and $j$-th column as $(i\n,j)$. A diagonal is the set of cells for which the value $i + j$ is the\nsame. For example, cells $(3, 1)$, $(2, 2)$, and $(1, 3)$ lie on\nthe same diagonal, but $(1, 2)$ and $(2, 3)$ do not. A diagonal is\ncalled occupied if it contains at least one chip.\n\nDetermine what is the minimum possible number of occupied diagonals among all\nplacements of $k$ chips.",
        "input": "Each test consists of several sets of input data. The first line contains a\nsingle integer $t$ ($1 \\le t \\le 500$) \u2014 the number of sets of input\ndata. Then follow the descriptions of the sets of input data.\n\nThe only line of each set of input data contains two integers $n$, $k$\n($1 \\le n \\le 100, 0 \\le k \\le n^2$) \u2014 the side of the checkered board and\nthe number of available chips, respectively.",
        "output": "For each set of input data, output a single integer \u2014 the minimum number of\noccupied diagonals with at least one chip that he can get after placing all\n$k$ chips.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1 0\n2 2\n2 3\n2 4\n10 50\n100 239\n3 9\n</pre></td>\n    <td><pre>0\n1\n2\n3\n6\n3\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are no chips, so 0 diagonals will be occupied.\nIn the second test case, both chips can be placed on diagonal $(2, 1), (1,\n2)$, so the answer is 1. In the third test case, 3 chips can't be placed on\none diagonal, but placing them on $(1, 2), (2, 1), (1, 1)$ makes 2\ndiagonals occupied. In the 7th test case, chips will occupy all 5 diagonals in\nany valid placing."
    },
    {
        "problem_id": "1995B1",
        "url": "https://codeforces.com/problemset/problem/1995/B1",
        "title": "Bouquet (Easy Version)",
        "rating": 1100,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "sortings",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 512,
        "description": "This is the easy version of the problem. The only difference is that in this\nversion, the flowers are specified by enumeration.\n\nA girl is preparing for her birthday and wants to buy the most beautiful\nbouquet. There are a total of $n$ flowers in the store, each of which is\ncharacterized by the number of petals, and a flower with $k$ petals costs\n$k$ coins. The girl has decided that the difference in the number of\npetals between any two flowers she will use in her bouquet should not exceed\none. At the same time, the girl wants to assemble a bouquet with the maximum\npossible number of petals. Unfortunately, she only has $m$ coins, and she\ncannot spend more. What is the maximum total number of petals she can assemble\nin the bouquet?",
        "input": "Each test consists of several test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10\\,000$) \u2014 the number of test cases. This\nis followed by descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$, $m$ ($1\n\\le n \\le 2 \\cdot 10^5, 1 \\le m \\le 10^{18}$) \u2014 the number of flowers in the\nstore and the number of coins the girl possesses, respectively. The second\nline of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$\n($1 \\le a_i \\le 10^9$), where $a_i$ is the number of petals of the\n$i$-th flower in the store.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot {10}^5$.",
        "output": "For each test case, output a single integer \u2014 the maximum possible number of\npetals in the bouquet that the girl can assemble while meeting all the\nconditions listed above.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n5 10\n1 1 2 2 3\n8 20\n4 2 7 5 6 1 1 1\n8 100000\n239 30 610 122 24 40 8 2\n11 13\n2 4 11 1 1 2 3 5 4 3 2\n8 1033\n206 206 206 207 207 207 207 1000\n</pre></td>\n    <td><pre>7\n13\n610\n13\n1033\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can assemble a bouquet with $(1, 1, 2, 2), (2,\n2, 3), (1, 1), (2, 2)$. The maximum over all valid bouquets not greater than\n$10$ is $7$ for $(2, 2, 3)$. In the third test case, you can\nassemble a bouquet with only one flower of any type, so the answer is\n$610$. In the fourth test case, you can assemble a bouquet with $(4, 4,\n5)$, which gives you $13$ petals, and it is the maximum amount of petals\nthat the girl can buy."
    },
    {
        "problem_id": "1995B2",
        "url": "https://codeforces.com/problemset/problem/1995/B2",
        "title": "Bouquet (Hard Version)",
        "rating": 1700,
        "tags": [
            "binary search",
            "data structures",
            "greedy",
            "math",
            "sortings",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. The only difference is that in this\nversion, instead of listing the number of petals for each flower, the number\nof petals and the quantity of flowers in the store is set for all types of\nflowers.\n\nA girl is preparing for her birthday and wants to buy the most beautiful\nbouquet. There are a total of $n$ different types of flowers in the store,\neach of which is characterized by the number of petals and the quantity of\nthis type of flower. A flower with $k$ petals costs $k$ coins. The\ngirl has decided that the difference in the number of petals between any two\nflowers she will use to decorate her cake should not exceed one. At the same\ntime, the girl wants to assemble a bouquet with the maximum possible number of\npetals. Unfortunately, she only has $m$ coins, and she cannot spend more.\nWhat is the maximum total number of petals she can assemble in the bouquet?",
        "input": "Each test consists of several test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10\\,000$) \u2014 the number of test cases. This\nis followed by descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$, $m$ ($1\n\\le n \\le 2 \\cdot 10^5, 1 \\le m \\le 10^{18}$) \u2014 the number of types of\nflowers in the store and the number of coins the girl possesses, respectively.\nThe second line of each test case contains $n$ different integers $a_1,\na_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the number\nof petals of the $i$-th flower type in the store (for different indexes\n$i \\neq j$, it must be $a_i \\neq a_j$). The third line of each test\ncase contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\le c_i \\le\n10^9$), where $c_i$ is the quantity of the $i$-th flower type in the\nstore.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot {10}^5$.",
        "output": "For each test case, print one integer \u2014 the maximum possible number of petals\nin a bouquet that a girl can collect, observing all the conditions listed\nabove.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n3 10\n1 2 3\n2 2 1\n3 1033\n206 207 1000\n3 4 1\n6 20\n4 2 7 5 6 1\n1 2 1 3 1 7\n8 100000\n239 30 610 122 24 40 8 2\n12 13123 112 1456 124 100 123 10982\n6 13\n2 4 11 1 3 5\n2 2 1 2 2 1\n8 10330\n206 210 200 201 198 199 222 1000\n9 10 11 12 13 14 15 16\n2 10000000000\n11 12\n87312315 753297050\n</pre></td>\n    <td><pre>7\n1033\n19\n99990\n13\n10000\n9999999999\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, some valid bouquets are $(1, 1, 2, 2), (2, 2, 3),\n(1, 1), (2, 2)$. The maximum over all valid bouquets not greater than\n$10$ is $7$ for $(2, 2, 3)$. In the second test case, you can\nassemble a valid bouquet with $(206, 206, 207, 207, 207)$ with a sum of\n$1033$, which is the maximum number of petals the girl can buy. In the\nthird test case, you can assemble a valid bouquet with $(5, 5, 5, 4)$ with\na sum of $19$. It can be seen that no valid bouquet can have $20$\npetals."
    },
    {
        "problem_id": "1995C",
        "url": "https://codeforces.com/problemset/problem/1995/C",
        "title": "Squaring",
        "rating": 1800,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "implementation",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "ikrpprpp found an array $a$ consisting of integers. He likes justice, so\nhe wants to make $a$ fair \u2014 that is, make it non-decreasing. To do that,\nhe can perform an act of justice on an index $1 \\le i \\le n$ of the array,\nwhich will replace $a_i$ with $a_i ^ 2$ (the element at position\n$i$ with its square). For example, if $a = [2,4,3,3,5,3]$ and ikrpprpp\nchooses to perform an act of justice on $i = 4$, $a$ becomes\n$[2,4,3,9,5,3]$.\n\nWhat is the minimum number of acts of justice needed to make the array non-\ndecreasing?",
        "input": "First line contains an integer $t$ ($1 \\le t \\le 1000$) \u2014 the number\nof test cases. It is followed by the description of test cases.\n\nFor each test case, the first line contains an integer $n$ \u2014 size of the\narray $a$. The second line contains $n$ ($1 \\le n \\le 2 \\cdot 10\n^5$) integers $a_1, a_2,\\ldots, a_n$ ($1 \\le a_i \\le 10 ^ 6$).\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot {10}^5$.",
        "output": "For each testcase, print an integer \u2014 minimum number of acts of justice\nrequired to make the array $a$ non-decreasing. If it is impossible to do\nthat, print $-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n3\n1 2 3\n2\n3 2\n3\n3 1 5\n4\n1 1 2 3\n3\n4 3 2\n9\n16 2 4 2 256 2 4 2 8\n11\n10010 10009 10008 10007 10006 10005 10004 10003 10002 10001 10000\n</pre></td>\n    <td><pre>0\n1\n-1\n0\n3\n15\n55\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there's no need to perform acts of justice. The array\nis fair on its own!\n\nIn the third test case, it can be proven that the array cannot become non-\ndecreasing.\n\nIn the fifth test case, ikrpprppp can perform an act of justice on index 3,\nthen an act of justice on index 2, and finally yet another act of justice on\nindex 3. After that, $a$ will become $[4, 9, 16]$."
    },
    {
        "problem_id": "1995D",
        "url": "https://codeforces.com/problemset/problem/1995/D",
        "title": "Cases",
        "rating": 2300,
        "tags": [
            "bitmasks",
            "brute force",
            "dp",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You're a linguist studying a mysterious ancient language. You know that\n\n  1. Its words consist only of the first $c$ letters of the Latin alphabet. \n  2. Each word has a case which can be unambiguously determined by its last letter (different letters correspond to different cases). For example, words \"ABACABA\" and \"ABA\" (if they exist) have the same case in this language because they both have the same ending 'A', whereas \"ALICE\" and \"BOB\" have different cases. If the language does not have a case corresponding to some letter, it means that the word cannot end with this letter. \n  3. The length of each word is $k$ or less. \n\nYou have a single text written in this language. Unfortunately, as the\nlanguage is really ancient, spaces between words are missing and all letters\nare uppercase. You wonder what is the minimum number of cases the language can\nhave. Can you find this out?",
        "input": "Each test consists of several test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10\\,000$) \u2014 the number of test cases. It is\nfollowed by descriptions of the test cases.\n\nThe first line of each test case contains three integers $n$, $c$,\n$k$ ($1 \\le k \\le n \\le 2^{18}$, $1 \\le c \\le 18$) \u2014 the length of\nthe text, the number of letters in the language, and the maximum length of the\nword.\n\nThe second line contains a string of $n$ characters \u2014 the text itself.\nEach character is one of the first $c$ uppercase letters of the Latin\nalphabet.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2^{18}$ and the sum of $2^c$ over all test cases does not exceed\n$2^{18}$.",
        "output": "For each test case, output a single line consisting of a single integer \u2014 the\nminimum number of cases in the language.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n5 5 1\nABCDE\n3 1 2\nAAA\n3 2 2\nAAB\n10 2 2\nABABABABAB\n4 4 4\nDCBA\n1 17 1\nQ\n9 3 2\nABCABCABC\n</pre></td>\n    <td><pre>5\n1\n2\n1\n1\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there must be five cases in the language (for each of\nthe letters 'A', 'B', 'C', 'D', and 'E' there must be a case that has a\ncorresponding ending).\n\nIn the fourth test case, one case with ending 'B' is sufficient."
    },
    {
        "problem_id": "1995E1",
        "url": "https://codeforces.com/problemset/problem/1995/E1",
        "title": "Let Me Teach You a Lesson (Easy Version)",
        "rating": 2700,
        "tags": [
            "2-sat",
            "data structures",
            "dp",
            "matrices",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of a problem. The only difference between an easy and\na hard version is the constraints on $t$ and $n$. You can make hacks\nonly if both versions of the problem are solved.\n\nArthur is giving a lesson to his famous $2 n$ knights. Like any other\nstudents, they're sitting at the desks in pairs, but out of habit in a circle.\nThe knight $2 i - 1$ is sitting at the desk with the knight $2 i$.\n\nEach knight has intelligence, which can be measured by an integer. Let's\ndenote the intelligence of the $i$-th knight as $a_i$. Arthur wants\nthe maximal difference in total intelligence over all pairs of desks to be as\nsmall as possible. More formally, he wants to minimize $\\max\\limits_{1 \\le i\n\\le n} (a_{2 i - 1} + a_{2 i}) - \\min\\limits_{1 \\le i \\le n} (a_{2 i - 1} +\na_{2 i})$.\n\nHowever, the Code of Chivalry only allows swapping the opposite knights in the\ncircle, i.e., Arthur can simultaneously perform $a_i := a_{i + n}$,\n$a_{i + n} := a_i$ for any $1 \\le i \\le n$. Arthur can make any number\nof such swaps. What is the best result he can achieve?",
        "input": "Each test consists of several test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. It is\nfollowed by descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2000$) \u2014 the number of desks.\n\nThe second line consists of $2n$ integers $a_1, a_2, \\ldots, a_{2 n}$\n($1 \\le a_i \\le 10^9$) \u2014 the intelligence values of the knights.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2000$.",
        "output": "For each test case, output a single line containing one integer \u2014 the minimal\ndifference Arthur can achieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n6 6 4 4\n1\n10 17\n3\n1 10 1 10 1 10\n3\n3 3 4 5 5 4\n5\n1 2 3 4 5 6 7 8 9 10\n</pre></td>\n    <td><pre>0\n0\n0\n2\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Arthur can swap the second and the fourth knights.\nThen the total intelligence at both desks will be $10$.\n\nIn the third test case, Arthur can make $0$ operations, which will result\nin the total intelligence of $11$ at each of the desks.\n\nIn the fourth test case, Arthur can swap knights with indices $2$ and\n$5$ and achieve the difference of $2$. It can be proven that he cannot\nimprove his result any further."
    },
    {
        "problem_id": "1995E2",
        "url": "https://codeforces.com/problemset/problem/1995/E2",
        "title": "Let Me Teach You a Lesson (Hard Version)",
        "rating": 2900,
        "tags": [
            "data structures",
            "dp",
            "matrices",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of a problem. The only difference between an easy and\na hard version is the constraints on $t$ and $n$. You can make hacks\nonly if both versions of the problem are solved.\n\nArthur is giving a lesson to his famous $2 n$ knights. Like any other\nstudents, they're sitting at the desks in pairs, but out of habit in a circle.\nThe knight $2 i - 1$ is sitting at the desk with the knight $2 i$.\n\nEach knight has intelligence, which can be measured by an integer. Let's\ndenote the intelligence of the $i$-th knight as $a_i$. Arthur wants\nthe maximal difference in total intelligence over all pairs of desks to be as\nsmall as possible. More formally, he wants to minimize $\\max\\limits_{1 \\le i\n\\le n} (a_{2 i - 1} + a_{2 i}) - \\min\\limits_{1 \\le i \\le n} (a_{2 i - 1} +\na_{2 i})$.\n\nHowever, the Code of Chivalry only allows swapping the opposite knights in the\ncircle, i.e., Arthur can simultaneously perform $a_i := a_{i + n}$,\n$a_{i + n} := a_i$ for any $1 \\le i \\le n$. Arthur can make any number\nof such swaps. What is the best result he can achieve?",
        "input": "Each test consists of several test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10\\,000$) \u2014 the number of test cases. It is\nfollowed by descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 100\\,000$) \u2014 the number of desks.\n\nThe second line consists of $2n$ integers $a_1, a_2, \\ldots, a_{2 n}$\n($1 \\le a_i \\le 10^9$) \u2014 the intelligence values of the knights.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$100\\,000$.",
        "output": "For each test case, output a single line containing one integer \u2014 the minimal\ndifference Arthur can achieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n6 6 4 4\n1\n10 17\n3\n1 10 1 10 1 10\n3\n3 3 4 5 5 4\n5\n1 2 3 4 5 6 7 8 9 10\n</pre></td>\n    <td><pre>0\n0\n0\n2\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Arthur can swap the second and the fourth knights.\nThen the total intelligence at both desks will be $10$.\n\nIn the third test case, Arthur can make $0$ operations, which will result\nin the total intelligence of $11$ at each of the desks.\n\nIn the fourth test case, Arthur can swap knights with indices $2$ and\n$5$ and achieve the difference of $2$. It can be proven that he cannot\nimprove his result any further."
    },
    {
        "problem_id": "1996A",
        "url": "https://codeforces.com/problemset/problem/1996/A",
        "title": "Legs",
        "rating": 800,
        "tags": [
            "binary search",
            "math",
            "ternary search"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "It's another beautiful day on Farmer John's farm.\n\nAfter Farmer John arrived at his farm, he counted $n$ legs. It is known\nonly chickens and cows live on the farm, and a chicken has $2$ legs while\na cow has $4$.\n\nWhat is the minimum number of animals Farmer John can have on his farm\nassuming he counted the legs of all animals?",
        "input": "The first line contains single integer $t$ ($1 \\leq t \\leq 10^3$) \u2014\nthe number of test cases.\n\nEach test case contains an integer $n$ ($2 \\leq n \\leq 2 \\cdot 10^3$,\n$n$ is even).",
        "output": "For each test case, output an integer, the minimum number of animals Farmer\nJohn can have on his farm.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2\n6\n8\n</pre></td>\n    <td><pre>1\n2\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1996B",
        "url": "https://codeforces.com/problemset/problem/1996/B",
        "title": "Scale",
        "rating": 800,
        "tags": [
            "greedy",
            "implementation"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Tina has a square grid with $n$ rows and $n$ columns. Each cell in the\ngrid is either $0$ or $1$.\n\nTina wants to reduce the grid by a factor of $k$ ($k$ is a divisor of\n$n$). To do this, Tina splits the grid into $k \\times k$\nnonoverlapping blocks of cells such that every cell belongs to exactly one\nblock.\n\nTina then replaces each block of cells with a single cell equal to the value\nof the cells in the block. It is guaranteed that every cell in the same block\nhas the same value.\n\nFor example, the following demonstration shows a grid being reduced by factor\nof $3$.\n\nOriginal grid $0$| $0$| $0$| $1$| $1$| $1$  \n---|---|---|---|---|---  \n$0$| $0$| $0$| $1$| $1$| $1$  \n$0$| $0$| $0$| $1$| $1$| $1$  \n$1$| $1$| $1$| $0$| $0$| $0$  \n$1$| $1$| $1$| $0$| $0$| $0$  \n$1$| $1$| $1$| $0$| $0$| $0$  \nReduced grid $0$| $1$  \n---|---  \n$1$| $0$  \n  \nHelp Tina reduce the grid by a factor of $k$.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 100$) \u2013 the number of test\ncases.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\leq n \\leq 1000$, $1 \\le k \\le n$, $k$ is a divisor of\n$n$) \u2014 the number of rows and columns of the grid, and the factor that\nTina wants to reduce the grid by.\n\nEach of the following $n$ lines contain $n$ characters describing the\ncells of the grid. Each character is either $0$ or $1$. It is\nguaranteed every $k$ by $k$ block has the same value.\n\nIt is guaranteed the sum of $n$ over all test cases does not exceed\n$1000$.",
        "output": "For each test case, output the grid reduced by a factor of $k$ on a new\nline.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n4 4\n0000\n0000\n0000\n0000\n6 3\n000111\n000111\n000111\n111000\n111000\n111000\n6 2\n001100\n001100\n111111\n111111\n110000\n110000\n8 1\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n</pre></td>\n    <td><pre>0\n01\n10\n010\n111\n100\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1996C",
        "url": "https://codeforces.com/problemset/problem/1996/C",
        "title": "Sort",
        "rating": 1200,
        "tags": [
            "dp",
            "greedy",
            "sortings",
            "strings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 5000,
        "memory_limit_mb": 256,
        "description": "You are given two strings $a$ and $b$ of length $n$. Then, you are\n(forced against your will) to answer $q$ queries.\n\nFor each query, you are given a range bounded by $l$ and $r$. In one\noperation, you can choose an integer $i$ ($l \\leq i \\leq r$) and set\n$a_i = x$ where $x$ is any character you desire. Output the minimum\nnumber of operations you must perform such that $\\texttt{sorted(a[l..r])} =\n\\texttt{sorted(b[l..r])}$. The operations you perform on one query does not\naffect other queries.\n\nFor an arbitrary string $c$, $\\texttt{sorted(c[l..r])}$ denotes the\nsubstring consisting of characters $c_l, c_{l+1}, ... , c_r$ sorted in\nlexicographical order.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 1000$) \u2013 the number of\ntest cases.\n\nThe first line of each test case contains two integers $n$ and $q$\n($1 \\leq n, q \\leq 2 \\cdot 10^5$) \u2013 the length of both strings and the\nnumber of queries.\n\nThe following line contains $a$ of length $n$. It is guaranteed\n$a$ only contains lowercase latin letters.\n\nThe following line contains $b$ of length $n$. It is guaranteed\n$b$ only contains lowercase latin letters.\n\nThe following $q$ lines contain two integers $l$ and $r$ ($1\n\\leq l \\leq r \\leq n$) \u2013 the range of the query.\n\nIt is guaranteed the sum of $n$ and $q$ over all test cases does not\nexceed $2 \\cdot 10^5$.",
        "output": "For each query, output an integer, the minimum number of operations you need\nto perform in a new line.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5 3\nabcde\nedcba\n1 5\n1 4\n3 3\n4 2\nzzde\nazbe\n1 3\n1 4\n6 3\nuwuwuw\nwuwuwu\n2 4\n1 3\n1 6\n</pre></td>\n    <td><pre>0\n1\n0\n2\n2\n1\n1\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first query, $\\texttt{sorted(a[1..5])} =$ abcde and\n$\\texttt{sorted(b[1..5])} =$ abcde, so no operations are necessary.\n\nFor the second query, you need to set $a_1 = $ e. Then,\n$\\texttt{sorted(a[1..4])} = \\texttt{sorted(b[1..4])} = $ bcde."
    },
    {
        "problem_id": "1996D",
        "url": "https://codeforces.com/problemset/problem/1996/D",
        "title": "Fun",
        "rating": 1500,
        "tags": [
            "binary search",
            "brute force",
            "combinatorics",
            "math",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Counting is Fun!\n\n\u2014 satyam343\n\nGiven two integers $n$ and $x$, find the number of triplets\n($a,b,c$) of positive integers such that $ab + ac + bc \\le n$ and $a\n+ b + c \\le x$.\n\nNote that order matters (e.g. ($1, 1, 2$) and ($1, 2, 1$) are treated\nas different) and $a$, $b$, $c$ must be strictly greater than\n$0$.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$)  \u2014\nthe number of test cases.\n\nEach test case contains two integers $n$ and $x$ ($1 \\leq n,x \\leq\n10^6$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$ and that the sum of $x$ over all test cases does not exceed\n$10^6$.",
        "output": "Output a single integer \u2014 the number of triplets ($a,b,c$) of positive\nintegers such that $ab + ac + bc \\le n$ and $a + b + c \\le x$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n7 4\n10 5\n7 1000\n900000 400000\n</pre></td>\n    <td><pre>4\n10\n7\n1768016938\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the triplets are ($1, 1, 1$), ($1, 1, 2$),\n($1, 2, 1$), and ($2, 1, 1$).\n\nIn the second test case, the triplets are ($1, 1, 1$), ($1, 1, 2$),\n($1, 1, 3$), ($1, 2, 1$), ($1, 2, 2$), ($1, 3, 1$), ($2, 1,\n1$), ($2, 1, 2$), ($2, 2, 1$), and ($3, 1, 1$)."
    },
    {
        "problem_id": "1996E",
        "url": "https://codeforces.com/problemset/problem/1996/E",
        "title": "Decode",
        "rating": 1600,
        "tags": [
            "combinatorics",
            "data structures",
            "implementation",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "In a desperate attempt to obtain your waifu favorite character, you have\nhacked into the source code of the game. After days of struggling, you finally\nfind the binary string that encodes the gacha system of the game. In order to\ndecode it, you must first solve the following problem.\n\nYou are given a binary string $s$ of length $n$. For each pair of\nintegers $(l, r)$ $(1 \\leq l \\leq r \\leq n)$, count the number of\npairs $(x, y)$ $(l \\leq x \\leq y \\leq r)$ such that the amount of\n$\\mathtt{0}$ equals the amount of $\\mathtt{1}$ in the substring\n$s_xs_{x+1}...s_y$.\n\nOutput the sum of counts over all possible $(l, r)$ modulo $10^9+7$.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 1000$) \u2014 the number of\ntest cases.\n\nEach test case contains a binary string $s$ ($1 \\leq |s| \\leq 2 \\cdot\n10^5$). It is guaranteed $s$ only contains characters $\\mathtt{0}$\nand $\\mathtt{1}$.\n\nIt is guaranteed the sum of $|s|$ over all test cases does not exceed $2\n\\cdot 10^5$.",
        "output": "For each test case, output an integer, the answer modulo $10^9+7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n0000\n01010101\n1100111001\n11000000111\n</pre></td>\n    <td><pre>0\n130\n147\n70\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1996F",
        "url": "https://codeforces.com/problemset/problem/1996/F",
        "title": "Bomb",
        "rating": 1900,
        "tags": [
            "binary search",
            "greedy",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Sparkle gives you two arrays $a$ and $b$ of length $n$. Initially,\nyour score is $0$. In one operation, you can choose an integer $i$ and\nadd $a_i$ to your score. Then, you must set $a_i$ = $\\max(0, a_i -\nb_i)$.\n\nYou only have time to perform $k$ operations before Sparkle sets off a\nnuclear bomb! What is the maximum score you can acquire after $k$\noperations?",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 1000$) \u2014 the number of\ntest cases.\n\nThe first line of each test case contains $n$ and $k$ ($1 \\leq n\n\\leq 2 \\cdot 10^5, 1 \\leq k \\leq 10^9$) \u2014 the length of the arrays and the\nnumber of operations you can perform.\n\nThe following line contains $n$ integers $a_1, a_2, ... a_n$ ($1\n\\leq a_i \\leq 10^9$).\n\nThe following line contains $n$ integers $b_1, b_2, ... b_n$ ($1\n\\leq b_i \\leq 10^9$).\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output an integer, the maximum score you can acquire after\n$k$ operations.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 4\n5 6 7\n2 3 4\n5 9\n32 52 68 64 14\n18 14 53 24 8\n5 1000\n1 2 3 4 5\n5 4 3 2 1\n1 1000000\n1000000\n1\n10 6\n3 3 5 10 6 8 6 8 7 7\n6 1 7 4 1 1 8 9 3 1\n</pre></td>\n    <td><pre>21\n349\n27\n500000500000\n47\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1996G",
        "url": "https://codeforces.com/problemset/problem/1996/G",
        "title": "Penacony",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "graphs",
            "greedy",
            "hashing"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "On Penacony, The Land of the Dreams, there exists $n$ houses and $n$\nroads. There exists a road between house $i$ and $i+1$ for all $1\n\\leq i \\leq n-1$ and a road between house $n$ and house $1$. All\nroads are bidirectional. However, due to the crisis on Penacony, the\noverseeing family has gone into debt and may not be able to maintain all\nroads.\n\nThere are $m$ pairs of friendships between the residents of Penacony. If\nthe resident living in house $a$ is friends with the resident living in\nhouse $b$, there must be a path between houses $a$ and $b$ through\nmaintained roads.\n\nWhat is the minimum number of roads that must be maintained?",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$) \u2013 the number of\ntest cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($3 \\leq n \\leq 2 \\cdot 10^5, 1 \\leq m \\leq 2 \\cdot 10^5$) \u2013 the number of\nhouses and the number of friendships.\n\nThe next $m$ lines contain two integers $a$ and $b$ ($1 \\leq a <\nb \\leq n$) \u2013 the resident in house $a$ is friends with the resident in\nhouse $b$. It is guaranteed all ($a, b$) are distinct.\n\nIt is guaranteed the sum of $n$ and $m$ over all test cases does not\nexceed $2 \\cdot 10^5$.",
        "output": "For each test case, output an integer, the minimum number of roads that must\nbe maintained.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n8 3\n1 8\n2 7\n4 5\n13 4\n1 13\n2 12\n3 11\n4 10\n10 2\n2 3\n3 4\n10 4\n3 8\n5 10\n2 10\n4 10\n4 1\n1 3\n5 2\n3 5\n1 4\n5 2\n2 5\n1 3\n</pre></td>\n    <td><pre>4\n7\n2\n7\n2\n3\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, the following roads must be maintained:\n\n  * $8 \\leftarrow \\rightarrow 1$ \n  * $7 \\leftarrow \\rightarrow 8$ \n  * $1 \\leftarrow \\rightarrow 2$ \n  * $4 \\leftarrow \\rightarrow 5$"
    },
    {
        "problem_id": "1997A",
        "url": "https://codeforces.com/problemset/problem/1997/A",
        "title": "Strong Password",
        "rating": 800,
        "tags": [
            "brute force",
            "implementation",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Monocarp's current password on Codeforces is a string $s$, consisting of\nlowercase Latin letters. Monocarp thinks that his current password is too\nweak, so he wants to insert exactly one lowercase Latin letter into the\npassword to make it stronger. Monocarp can choose any letter and insert it\nanywhere, even before the first character or after the last character.\n\nMonocarp thinks that the password's strength is proportional to the time it\ntakes him to type the password. The time it takes to type the password is\ncalculated as follows:\n\n  * the time to type the first character is $2$ seconds; \n  * for each character other than the first, the time it takes to type it is $1$ second if it is the same as the previous character, or $2$ seconds otherwise. \n\nFor example, the time it takes to type the password abacaba is $14$; the\ntime it takes to type the password a is $2$; the time it takes to type the\npassword aaabacc is $11$.\n\nYou have to help Monocarp \u2014 insert a lowercase Latin letter into his password\nso that the resulting password takes the maximum possible amount of time to\ntype.",
        "input": "The first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the\nnumber of test cases.\n\nEach test case consists of one line containing the string $s$ ($1 \\le\n|s| \\le 10$), consisting of lowercase Latin letters.",
        "output": "For each test case, print one line containing the new password \u2014 a string\nwhich can be obtained from $s$ by inserting one lowercase Latin letter.\nThe string you print should have the maximum possible required time to type\nit. If there are multiple answers, print any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\na\naaa\nabb\npassword\n</pre></td>\n    <td><pre>wa\naada\nabcb\npastsword\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1997B",
        "url": "https://codeforces.com/problemset/problem/1997/B",
        "title": "Make Three Regions",
        "rating": 1100,
        "tags": [
            "constructive algorithms",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "There is a grid, consisting of $2$ rows and $n$ columns. Each cell of\nthe grid is either free or blocked.\n\nA free cell $y$ is reachable from a free cell $x$ if at least one of\nthese conditions holds:\n\n  * $x$ and $y$ share a side; \n  * there exists a free cell $z$ such that $z$ is reachable from $x$ and $y$ is reachable from $z$. \n\nA connected region is a set of free cells of the grid such that all cells in\nit are reachable from one another, but adding any other free cell to the set\nviolates this rule.\n\nFor example, consider the following layout, where white cells are free, and\ndark grey cells are blocked:\n\n![](CDN_BASE_URL/35b42e4e3c64eee3071df3d7b48861e8)\n\nThere are $3$ regions in it, denoted with red, green and blue color\nrespectively:\n\n![](CDN_BASE_URL/b2528153b76de41b1afcd49c1578a191)\n\nThe given grid contains at most $1$ connected region. Your task is to\ncalculate the number of free cells meeting the following constraint:\n\n  * if this cell is blocked, the number of connected regions becomes exactly $3$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of columns.\n\nThe $i$-th of the next two lines contains a description of the $i$-th\nrow of the grid \u2014 the string $s_i$, consisting of $n$ characters. Each\ncharacter is either . (denoting a free cell) or x (denoting a blocked cell).\n\nAdditional constraint on the input:\n\n  * the given grid contains at most $1$ connected region; \n  * the sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.",
        "output": "For each test case, print a single integer \u2014 the number of cells such that the\nnumber of connected regions becomes $3$ if this cell is blocked.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n8\n.......x\n.x.xx...\n2\n..\n..\n3\nxxx\nxxx\n9\n..x.x.x.x\nx.......x\n</pre></td>\n    <td><pre>1\n0\n0\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, if the cell $(1, 3)$ is blocked, the number of\nconnected regions becomes $3$ (as shown in the picture from the\nstatement)."
    },
    {
        "problem_id": "1997C",
        "url": "https://codeforces.com/problemset/problem/1997/C",
        "title": "Even Positions",
        "rating": 1100,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Monocarp had a regular bracket sequence $s$ of length $n$ ($n$ is\neven). He even came up with his own way to calculate its cost.\n\nHe knows that in a regular bracket sequence (RBS), each opening bracket is\npaired up with the corresponding closing bracket. So he decided to calculate\nthe cost of RBS as the sum of distances between pairs of corresponding bracket\npairs.\n\nFor example, let's look at RBS (())(). It has three pairs of brackets:\n\n  * (__)__: the distance between brackets at position $1$ and at $4$ is $4 - 1 = 3$; \n  * _()___: the distance is $3 - 2 = 1$; \n  * ____(): the distance is $6 - 5 = 1$. \n\nSo the cost of (())() is $3 + 1 + 1 = 5$.\n\nUnfortunately, due to data corruption, Monocarp lost all characters on odd\npositions $s_1, s_3, \\dots, s_{n-1}$. Only characters on even positions\n($s_2, s_4, \\dots, s_{n}$) remain. For example, (())() turned to _(_)_).\n\nMonocarp wants to restore his RBS by placing brackets on the odd positions.\nBut since the restored RBS may not be unique, he wants to choose one with\nminimum cost. It's too hard to do for Monocarp alone, so can you help him?\n\nReminder: A regular bracket sequence is a string consisting of only brackets,\nsuch that this sequence, when inserted 1-s and +-s, gives a valid mathematical\nexpression. For example, (), (()) or (()())() are RBS, while ), ()( or ())(()\nare not.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 5000$) \u2014\nthe number of test cases. Next $t$ cases follow.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$; $n$ is even) \u2014 the length of string $s$.\n\nThe second line of each test case contains a string $s$ of length $n$,\nwhere all characters on the odd positions are '_' and all characters on the\neven positions are either '(' or ')'.\n\nAdditional constraints:\n\n  * $s$ can be restored to at least one regular bracket sequence; \n  * the total sum of $n$ over all test cases doesn't exceed $2 \\cdot 10^5$.",
        "output": "For each test case, print one integer \u2014 the minimum cost of the regular\nbracket sequence that can be obtained from $s$ by replacing '_'-s with\nbrackets.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n6\n_(_)_)\n2\n_)\n8\n_)_)_)_)\n8\n_(_)_(_)\n</pre></td>\n    <td><pre>5\n1\n4\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it's optimal to make $s$ equal to (())(). The cost\nof $s$ will be equal to $3 + 1 + 1 = 5$.\n\nIn the second test case, the only option is to make $s$ equal to () with\ncost $1$.\n\nIn the third test case, the only possible RBS is ()()()() with cost $1 + 1 +\n1 + 1 = 4$.\n\nIn the fourth test case, it's optimal to make $s$ equal to (())(()) with\ncost $3 + 1 + 3 + 1 = 8$."
    },
    {
        "problem_id": "1997D",
        "url": "https://codeforces.com/problemset/problem/1997/D",
        "title": "Maximize the Root",
        "rating": 1500,
        "tags": [
            "binary search",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "You are given a rooted tree, consisting of $n$ vertices. The vertices in\nthe tree are numbered from $1$ to $n$, and the root is the vertex\n$1$. The value $a_i$ is written at the $i$-th vertex.\n\nYou can perform the following operation any number of times (possibly zero):\nchoose a vertex $v$ which has at least one child; increase $a_v$ by\n$1$; and decrease $a_u$ by $1$ for all vertices $u$ that are\nin the subtree of $v$ (except $v$ itself). However, after each\noperation, the values on all vertices should be non-negative.\n\nYour task is to calculate the maximum possible value written at the root using\nthe aforementioned operation.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le\na_i \\le 10^9$) \u2014 the initial values written at vertices.\n\nThe third line contains $n-1$ integers $p_2, p_3, \\dots, p_n$ ($1\n\\le p_i \\le n$), where $p_i$ is the parent of the $i$-th vertex in\nthe tree. Vertex $1$ is the root.\n\nAdditional constraint on the input: the sum of $n$ over all test cases\ndoesn't exceed $2 \\cdot 10^5$.",
        "output": "For each test case, print a single integer \u2014 the maximum possible value\nwritten at the root using the aforementioned operation.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4\n0 1 0 2\n1 1 3\n2\n3 0\n1\n5\n2 5 3 9 6\n3 1 5 2\n</pre></td>\n    <td><pre>1\n3\n6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the following sequence of operations is possible:\n\n  * perform the operation on $v=3$, then the values on the vertices will be $[0, 1, 1, 1]$; \n  * perform the operation on $v=1$, then the values on the vertices will be $[1, 0, 0, 0]$."
    },
    {
        "problem_id": "1997E",
        "url": "https://codeforces.com/problemset/problem/1997/E",
        "title": "Level Up",
        "rating": 2200,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "divide and conquer",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "Monocarp is playing a computer game. He starts the game being level $1$.\nHe is about to fight $n$ monsters, in order from $1$ to $n$. The\nlevel of the $i$-th monster is $a_i$.\n\nFor each monster in the given order, Monocarp's encounter goes as follows:\n\n  * if Monocarp's level is strictly higher than the monster's level, the monster flees (runs away); \n  * otherwise, Monocarp fights the monster. \n\nAfter every $k$-th fight with a monster (fleeing monsters do not count),\nMonocarp's level increases by $1$. So, his level becomes $2$ after\n$k$ monsters he fights, $3$ after $2k$ monsters, $4$ after\n$3k$ monsters, and so on.\n\nYou need to process $q$ queries of the following form:\n\n  * $i~x$: will Monocarp fight the $i$-th monster (or will this monster flee) if the parameter $k$ is equal to $x$?",
        "input": "The first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2\n\\cdot 10^5$) \u2014 the number of monsters and the number of queries.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le\na_i \\le 2 \\cdot 10^5$) \u2014 the levels of the monsters.\n\nIn the $j$-th of the following $q$ lines, two integers $i$ and\n$x$ ($1 \\le i, x \\le n$) \u2014 the index of the monster and the number of\nfights required for a level up in the $j$-th query.",
        "output": "For each query, output \"YES\", if Monocarp will fight the $i$-th monster in\nthis query, and \"NO\", if the $i$-th monster flees.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4 16\n2 1 2 1\n1 1\n2 1\n3 1\n4 1\n1 2\n2 2\n3 2\n4 2\n1 3\n2 3\n3 3\n4 3\n1 4\n2 4\n3 4\n4 4\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7 15\n1 1 2 1 1 1 1\n5 3\n2 2\n2 2\n1 6\n5 1\n5 5\n7 7\n3 5\n7 4\n4 3\n2 5\n1 2\n5 6\n4 1\n6 1\n</pre></td>\n    <td><pre>NO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1997F",
        "url": "https://codeforces.com/problemset/problem/1997/F",
        "title": "Chips on a Line",
        "rating": 2700,
        "tags": [
            "brute force",
            "combinatorics",
            "dp",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 512,
        "description": "You have $n$ chips, and you are going to place all of them in one of\n$x$ points, numbered from $1$ to $x$. There can be multiple chips\nin each point.\n\nAfter placing the chips, you can perform the following four operations (in any\norder, any number of times):\n\n  * choose a chip in point $i \\ge 3$, remove it and place two chips: one in $i-1$, one in $i-2$; \n  * choose two chips in adjacent points $i$ and $i+1$, remove them and place a new chip in $i+2$; \n  * choose a chip in point $1$ and move it to $2$; \n  * choose a chip in point $2$ and move it to $1$. \n\nNote that the coordinates of the chips you place during the operations cannot\nbe less than $1$, but can be greater than $x$.\n\nDenote the cost of chip placement as the minimum number of chips which can be\npresent on the line after you perform these operations, starting from the\nplacement you've chosen.\n\nFor example, the cost of placing two chips in points $3$ and one chip in\npoint $5$ is $2$, because you can reduce the number of chips to\n$2$ as follows:\n\n  * choose a chip in point $3$, remove it, place a chip in $1$ and another chip in $2$; \n  * choose the chips in points $2$ and $3$, remove them and place a chip in $4$; \n  * choose the chips in points $4$ and $5$, remove them and place a chip in $6$. \n\nYou are given three integers $n$, $x$ and $m$. Calculate the\nnumber of placements of exactly $n$ chips in points from $1$ to\n$x$ having cost equal to $m$, and print it modulo $998244353$. Two\nplacements are considered different if the number of chips in some point\ndiffers between these placements.",
        "input": "The only line contains three integers $n$, $x$ and $m$ ($1 \\le m\n\\le n \\le 1000$; $2 \\le x \\le 10$).",
        "output": "Print one integer \u2014 the number of placements with cost equal to $m$, taken\nmodulo $998244353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2 3 1\n</pre></td>\n    <td><pre>5\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>42 10 5\n</pre></td>\n    <td><pre>902673363\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1000 10 8\n</pre></td>\n    <td><pre>187821763\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, there are five ways to place $2$ chips in points\nfrom $1$ to $3$ so that the cost is $1$:\n\n  * $(1, 1)$; \n  * $(1, 2)$; \n  * $(1, 3)$; \n  * $(2, 2)$; \n  * $(2, 3)$."
    },
    {
        "problem_id": "1998A",
        "url": "https://codeforces.com/problemset/problem/1998/A",
        "title": "Find K Distinct Points with Fixed Center",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "I couldn't think of a good title for this problem, so I decided to learn from\nLeetCode.\n\n\u2014 Sun Tzu, The Art of War\n\nYou are given three integers $x_c$, $y_c$, and $k$ ($-100 \\leq\nx_c, y_c \\leq 100$, $1 \\leq k \\leq 1000$).\n\nYou need to find $k$ distinct points ($x_1, y_1$), ($x_2, y_2$),\n$\\ldots$, ($x_k, y_k$), having integer coordinates, on the 2D\ncoordinate plane such that:\n\n  * their center$^{\\text{\u2217}}$ is ($x_c, y_c$) \n  * $-10^9 \\leq x_i, y_i \\leq 10^9$ for all $i$ from $1$ to $k$ \n\nIt can be proven that at least one set of $k$ distinct points always\nexists that satisfies these conditions.\n\n$^{\\text{\u2217}}$The center of $k$ points ($x_1, y_1$), ($x_2,\ny_2$), $\\ldots$, ($x_k, y_k$) is $\\left( \\frac{x_1 + x_2 + \\ldots\n+ x_k}{k}, \\frac{y_1 + y_2 + \\ldots + y_k}{k} \\right)$.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 100$) \u2014 the number of test\ncases.\n\nEach test case contains three integers $x_c$, $y_c$, and $k$\n($-100 \\leq x_c, y_c \\leq 100$, $1 \\leq k \\leq 1000$) \u2014 the\ncoordinates of the center and the number of distinct points you must output.\n\nIt is guaranteed that the sum of $k$ over all test cases does not exceed\n$1000$.",
        "output": "For each test case, output $k$ lines, the $i$-th line containing two\nspace separated integers, $x_i$ and $y_i$, ($-10^9 \\leq x_i, y_i\n\\leq 10^9$) \u2014 denoting the position of the $i$-th point.\n\nIf there are multiple answers, print any of them. It can be shown that a\nsolution always exists under the given constraints.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n10 10 1\n0 0 3\n-5 -8 8\n4 -5 3\n</pre></td>\n    <td><pre>10 10\n-1 -1\n5 -1\n-4 2\n-6 -7\n-5 -7\n-4 -7\n-4 -8\n-4 -9\n-5 -9\n-6 -9\n-6 -8\n1000 -1000\n-996 995\n8 -10</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, $\\left( \\frac{10}{1}, \\frac{10}{1} \\right) = (10,\n10)$.\n\nFor the second test case, $\\left( \\frac{-1 + 5 - 4}{3}, \\frac{-1 -1 + 2}{3}\n\\right) = (0, 0)$."
    },
    {
        "problem_id": "1998B",
        "url": "https://codeforces.com/problemset/problem/1998/B",
        "title": "Minimize Equal Sum Subarrays",
        "rating": 1000,
        "tags": [
            "constructive algorithms",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 256,
        "description": "It is known that [Farmer John likes\nPermutations](https://usaco.org/index.php?page=viewproblem2&cpid=1421), but I\nlike them too!\n\n\u2014 Sun Tzu, The Art of Constructing Permutations\n\nYou are given a permutation$^{\\text{\u2217}}$ $p$ of length $n$.\n\nFind a permutation $q$ of length $n$ that minimizes the number of\npairs ($i, j$) ($1 \\leq i \\leq j \\leq n$) such that $p_i + p_{i+1} +\n\\ldots + p_j = q_i + q_{i+1} + \\ldots + q_j$.\n\n$^{\\text{\u2217}}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of\ntest cases.\n\nThe first line of each test case contains $n$ ($1 \\leq n \\leq 2 \\cdot\n10^5$).\n\nThe following line contains $n$ space-separated integers $p_1, p_2,\n\\ldots, p_n$ ($1 \\leq p_i \\leq n$) \u2014 denoting the permutation $p$ of\nlength $n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output one line containing any permutation of length\n$n$ (the permutation $q$) such that $q$ minimizes the number of\npairs.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2\n1 2\n5\n1 2 3 4 5\n7\n4 7 5 1 2 6 3\n</pre></td>\n    <td><pre>2 1\n3 5 4 2 1\n6 2 1 4 7 3 5</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test, there exists only one pair ($i, j$) ($1 \\leq i \\leq\nj \\leq n$) such that $p_i + p_{i+1} + \\ldots + p_j = q_i + q_{i+1} +\n\\ldots + q_j$, which is ($1, 2$). It can be proven that no such $q$\nexists for which there are no pairs."
    },
    {
        "problem_id": "1998C",
        "url": "https://codeforces.com/problemset/problem/1998/C",
        "title": "Perform Operations to Maximize Score",
        "rating": 1900,
        "tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "I see satyam343. I'm shaking. Please more median problems this time. I love\nthose. Please satyam343 we believe in you.\n\n\u2014 satyam343's biggest fan\n\nYou are given an array $a$ of length $n$ and an integer $k$. You\nare also given a binary array $b$ of length $n$.\n\nYou can perform the following operation at most $k$ times:\n\n  * Select an index $i$ ($1 \\leq i \\leq n$) such that $b_i = 1$. Set $a_i = a_i + 1$ (i.e., increase $a_i$ by $1$). \n\nYour score is defined to be $\\max\\limits_{i = 1}^{n} \\left( a_i +\n\\operatorname{median}(c_i) \\right)$, where $c_i$ denotes the array of\nlength $n-1$ that you get by deleting $a_i$ from $a$. In other\nwords, your score is the maximum value of $a_i +\n\\operatorname{median}(c_i)$ over all $i$ from $1$ to $n$.\n\nFind the maximum score that you can achieve if you perform the operations\noptimally.\n\nFor an arbitrary array $p$, $\\operatorname{median}(p)$ is defined as\nthe $\\left\\lfloor \\frac{|p|+1}{2} \\right\\rfloor$-th smallest element of\n$p$. For example, $\\operatorname{median} \\left( [3,2,1,3] \\right) = 2$\nand $\\operatorname{median} \\left( [6,2,4,5,1] \\right) = 4$.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nEach test case begins with two integers $n$ and $k$ ($2 \\leq n \\leq\n2 \\cdot 10^5$, $0 \\leq k \\leq 10^9$) \u2014 the length of the $a$ and the\nnumber of operations you can perform.\n\nThe following line contains $n$ space separated integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 denoting the array $a$.\n\nThe following line contains $n$ space separated integers $b_1, b_2,\n\\ldots, b_n$ ($b_i$ is $0$ or $1$) \u2014 denoting the array $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output the maximum value of score you can get on a new\nline.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n2 10\n3 3\n1 1\n3 10\n3 3 3\n0 0 0\n4 4\n2 1 5 1\n0 1 0 1\n5 4\n7 5 2 5 4\n0 0 1 0 1\n5 1\n5 15 15 2 11\n1 0 0 1 1\n5 2\n10 11 4 10 15\n1 1 0 1 0\n4 4\n1 1 2 5\n1 1 0 0\n2 1000000000\n1000000000 1000000000\n1 1\n</pre></td>\n    <td><pre>16\n6\n8\n13\n21\n26\n8\n3000000000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, it is optimal to perform $5$ operations on both\nelements so $a = [8,8]$. So, the maximum score we can achieve is $\\max(8\n+ \\operatorname{median}[8], 8 + \\operatorname{median}[8]) = 16$, as $c_1 =\n[a_2] = [8]$. It can be proven that you cannot get a better score.\n\nFor the second test case, you are not able to perform operations on any\nelements, so $a$ remains $[3,3,3]$. So, the maximum score we can\nachieve is $3 + \\operatorname{median}[3, 3] = 6$, as $c_1 = [a_2, a_3] =\n[3, 3]$. It can be proven that you cannot get a better score."
    },
    {
        "problem_id": "1998D",
        "url": "https://codeforces.com/problemset/problem/1998/D",
        "title": "Determine Winning Islands in Race",
        "rating": 2100,
        "tags": [
            "data structures",
            "dp",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "MOOOOOOOOOOOOOOOOO\n\n\u2014 Bessie the Cow, The Art of Racing on Islands\n\nTwo of Farmer John's cows, Bessie and Elsie, are planning to race on $n$\nislands. There are $n - 1$ main bridges, connecting island $i$ to\nisland $i + 1$ for all $1 \\leq i \\leq n - 1$. Additionally, there are\n$m$ alternative bridges. Elsie can use both main and alternative bridges,\nwhile Bessie can only use main bridges. All bridges are one way and can only\nbe used to travel from an island with a lower index to an island with a higher\nindex.\n\nInitially, Elsie starts on island $1$, and Bessie starts on island\n$s$. The cows alternate turns, with Bessie making the first turn. Suppose\nthe cow is on island $i$. During a cow's turn, if there are any bridges\nconnecting island $i$ to island $j$, then the cow can move to island\n$j$. Then, island $i$ collapses, and all bridges connecting to island\n$i$ also collapse. Also, note the following:\n\n  * If there are no bridges connecting island $i$ to another island, then island $i$ collapses, and this cow is eliminated from the race. \n  * If the other cow is also on island $i$, then after this cow moves to another island, the island collapses, and the other cow is eliminated from the race. \n  * After an island or bridge collapses, no cows may use them. \n  * If a cow is eliminated, their turn is skipped for the rest of the race. \n\nThe race ends once either cow reaches island $n$. It can be shown that\nregardless of the cows' strategies, at least one cow reaches island $n$.\nBessie wins if and only if she reaches island $n$ first.\n\nFor each $1 \\leq s \\leq n - 1$, determine whether Bessie wins if she\nstarts the race on island $s$. Assume both cows follow optimal strategies\nto ensure their own respective victories.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$) \u2013 the number of\ntest cases.\n\nThe first line of each test case contains $n$ and $m$ ($2 \\leq n\n\\leq 2 \\cdot 10^5$, $0 \\leq m \\leq 2 \\cdot 10^5$) \u2013 the number of\nislands and the number of alternative bridges.\n\nThe next $m$ lines of each test case contain $u$ and $v$ ($1\n\\leq u < v \\leq n$) \u2013 the islands that the alternative bridge connects. It\nis guaranteed all alternative bridges are distinct, and they do not coincide\nwith the main bridges.\n\nIt is guaranteed that neither the sum of $n$ nor the sum of $m$ over\nall test cases exceeds $2 \\cdot 10^5$.",
        "output": "For each test case, output a binary string of length $n - 1$ on a new\nline. The $i$'th character is $1$ if it is possible for Bessie to win\nif she starts on island $i$. Otherwise, it is $0$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n6 0\n6 1\n2 6\n6 1\n1 5\n10 4\n1 3\n1 6\n2 7\n3 8\n15 3\n2 8\n4 9\n8 15\n</pre></td>\n    <td><pre>11111\n11011\n10011\n100001111\n11000111000111\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are no alternative bridges for Elsie to overtake\nBessie and reach island $n$ first, so Bessie will win on all islands\nbecause she always moves first.\n\nIn the second case, Bessie will lose if she starts on island $3$ because:\n\n  * Bessie's Turn: Take a main bridge from island $3$ to island $4$. \n  * Elsie's Turn: Take a main bridge from island $1$ to island $2$. \n  * Bessie's Turn: Take a main bridge from island $4$ to island $5$. \n  * Elsie's Turn: Take an alternative bridge from island $2$ to island $6$. Elsie reaches island $n$ first."
    },
    {
        "problem_id": "1998E1",
        "url": "https://codeforces.com/problemset/problem/1998/E1",
        "title": "Eliminating Balls With Merging (Easy Version)",
        "rating": 2200,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "divide and conquer",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "Drink water.\n\n\u2014 Sun Tzu, The Art of Becoming a Healthy Programmer\n\nThis is the easy version of the problem. The only difference is that $x=n$\nin this version. You must solve both versions to be able to hack.\n\nYou are given two integers $n$ and $x$ ($x=n$). There are $n$\nballs lined up in a row, numbered from $1$ to $n$ from left to right.\nInitially, there is a value $a_i$ written on the $i$-th ball.\n\nFor each integer $i$ from $1$ to $n$, we define a function\n$f(i)$ as follows:\n\n  * Suppose you have a set $S = \\\\{1, 2, \\ldots, i\\\\}$.\n\n  * In each operation, you have to select an integer $l$ ($1 \\leq l < i$) from $S$ such that $l$ is not the largest element of $S$. Suppose $r$ is the smallest element in $S$ which is greater than $l$.\n\n    * If $a_l > a_r$, you set $a_l = a_l + a_r$ and remove $r$ from $S$. \n    * If $a_l < a_r$, you set $a_r = a_l + a_r$ and remove $l$ from $S$. \n    * If $a_l = a_r$, you choose either the integer $l$ or $r$ to remove from $S$: \n      * If you choose to remove $l$ from $S$, you set $a_r = a_l + a_r$ and remove $l$ from $S$. \n      * If you choose to remove $r$ from $S$, you set $a_l = a_l + a_r$ and remove $r$ from $S$. \n\n  * $f(i)$ denotes the number of integers $j$ ($1 \\le j \\le i$) such that it is possible to obtain $S = \\\\{j\\\\}$ after performing the above operations exactly $i - 1$ times. \n\nFor each integer $i$ from $x$ to $n$, you need to find $f(i)$.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of\ntest cases.\n\nThe first line of each test case contains two integers $n$ and $x$\n($1 \\leq n \\leq 2 \\cdot 10^5; x = n$) \u2014 the number of balls and the\nsmallest index $i$ for which you need to find $f(i)$.\n\nThe second line of each test case contains $a_1, a_2, \\ldots, a_n$ ($1\n\\leq a_i \\leq 10^9$) \u2014 the initial number written on each ball.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $n-x+1$ space separated integers on a new line,\nwhere the $j$-th integer should represent $f(x+j-1)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5 5\n1 2 3 2 1\n7 7\n4 5 1 2 1 4 5\n11 11\n1 2 3 1 1 9 3 2 4 1 3\n</pre></td>\n    <td><pre>3\n4\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you are required to calculate $f(5)$. It can be\nshown that after $4$ operations, $S$ can contain $2$, $3$, or\n$4$. The following shows the operations required to make $S =\n\\\\{4\\\\}$.\n\n  * Initially, $S = \\\\{1, 2, 3, 4, 5\\\\}$ and $a = [1, 2, 3, 2, 1]$. \n  * Choose $l = 1$. Naturally, $r = 2$. Since $a_1 < a_2$, we set $a_2 = 1 + 2$ and remove $1$ from $S$. Now, $S = \\\\{2, 3, 4, 5\\\\}$ and $a = [1, 3, 3, 2, 1]$. \n  * Choose $l = 4$. Naturally, $r = 5$. Since $a_4 > a_5$, we set $a_4 = 2 + 1$ and remove $5$ from $S$. Now, $S = \\\\{2, 3, 4\\\\}$ and $a = [1, 3, 3, 3, 1]$. \n  * Choose $l = 3$. Naturally, $r = 4$. Since $a_3 = a_4$, we have a choice whether to remove $3$ or $4$. Since we want to preserve $4$, let's remove $3$. So, set $a_4 = 3 + 3$ and remove $3$ from $S$. Now, $S = \\\\{2, 4\\\\}$ and $a = [1, 3, 3, 6, 1]$. \n  * Choose $l = 2$. Naturally, $r = 4$. Since $a_2 < a_4$, we set $a_4 = 3 + 6$ and remove $2$ from $S$. Finally, $S = \\\\{4\\\\}$ and $a = [1, 3, 3, 9, 1]$. \n\nIn the second test case, you are required to calculate $f(7)$. It can be\nshown that after $6$ operations, $S$ can contain $2$, $4$,\n$6$, or $7$."
    },
    {
        "problem_id": "1998E2",
        "url": "https://codeforces.com/problemset/problem/1998/E2",
        "title": "Eliminating Balls With Merging (Hard Version)",
        "rating": 2500,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "divide and conquer",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "Drink water.\n\n\u2014 Sun Tzu, The Art of Becoming a Healthy Programmer\n\nThis is the hard version of the problem. The only difference is that $x=1$\nin this version. You must solve both versions to be able to hack.\n\nYou are given two integers $n$ and $x$ ($x=1$). There are $n$\nballs lined up in a row, numbered from $1$ to $n$ from left to right.\nInitially, there is a value $a_i$ written on the $i$-th ball.\n\nFor each integer $i$ from $1$ to $n$, we define a function\n$f(i)$ as follows:\n\n  * Suppose you have a set $S = \\\\{1, 2, \\ldots, i\\\\}$.\n\n  * In each operation, you have to select an integer $l$ ($1 \\leq l < i$) from $S$ such that $l$ is not the largest element of $S$. Suppose $r$ is the smallest element in $S$ which is greater than $l$.\n\n    * If $a_l > a_r$, you set $a_l = a_l + a_r$ and remove $r$ from $S$. \n    * If $a_l < a_r$, you set $a_r = a_l + a_r$ and remove $l$ from $S$. \n    * If $a_l = a_r$, you choose either the integer $l$ or $r$ to remove from $S$: \n      * If you choose to remove $l$ from $S$, you set $a_r = a_l + a_r$ and remove $l$ from $S$. \n      * If you choose to remove $r$ from $S$, you set $a_l = a_l + a_r$ and remove $r$ from $S$. \n\n  * $f(i)$ denotes the number of integers $j$ ($1 \\le j \\le i$) such that it is possible to obtain $S = \\\\{j\\\\}$ after performing the above operations exactly $i - 1$ times. \n\nFor each integer $i$ from $x$ to $n$, you need to find $f(i)$.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of\ntest cases.\n\nThe first line of each test case contains two integers $n$ and $x$\n($1 \\leq n \\leq 2 \\cdot 10^5; x = 1$) \u2014 the number of balls and the\nsmallest index $i$ for which you need to find $f(i)$.\n\nThe second line of each test case contains $a_1, a_2, \\ldots, a_n$ ($1\n\\leq a_i \\leq 10^9$) \u2014 the initial number written on each ball.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $n-x+1$ space separated integers on a new line,\nwhere the $j$-th integer should represent $f(x+j-1)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5 1\n1 2 3 2 1\n7 1\n4 5 1 2 1 4 5\n11 1\n1 2 3 1 1 9 3 2 4 1 3\n</pre></td>\n    <td><pre>1 1 2 2 3\n1 1 1 1 1 3 4\n1 1 2 2 2 1 1 1 3 3 4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, below are the possible values of $j$ for each\n$f(i)$ from $1$ to $n$.\n\n  * For $f(1)$, the only possible value of $j$ is $1$. \n  * For $f(2)$, the only possible value of $j$ is $2$. \n  * For $f(3)$, the possible values of $j$ are $2$ and $3$. \n  * For $f(4)$, the possible values of $j$ are $2$ and $3$. \n  * For $f(5)$, the possible values of $j$ are $2$, $3$, and $4$."
    },
    {
        "problem_id": "1999A",
        "url": "https://codeforces.com/problemset/problem/1999/A",
        "title": "A+B Again?",
        "rating": 800,
        "tags": [
            "implementation",
            "math"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Given a two-digit positive integer $n$, find the sum of its digits.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 90$) \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains a single two-digit positive integer\n$n$ ($10 \\leq n \\leq 99$).",
        "output": "For each test case, output a single integer \u2014 the sum of the digits of\n$n$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n77\n21\n40\n34\n19\n84\n10\n99\n</pre></td>\n    <td><pre>14\n3\n4\n7\n10\n12\n1\n18\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1999B",
        "url": "https://codeforces.com/problemset/problem/1999/B",
        "title": "Card Game",
        "rating": 1000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Suneet and Slavic play a card game. The rules of the game are as follows:\n\n  * Each card has an integer value between $1$ and $10$. \n  * Each player receives $2$ cards which are face-down (so a player doesn't know their cards). \n  * The game is turn-based and consists exactly of two turns. In a round, both players pick a random unflipped card and flip it. The player who flipped a card with a strictly greater number wins the round. In case of equality, no one wins the round. \n  * A player wins a game if he wins the most number of rounds (i.e. strictly greater than the other player). In case of equality, no one wins the game. \n\nSince Suneet and Slavic aren't best friends, you need to calculate the number\nof ways the game could happen that Suneet would end up as the winner.\n\nFor a better understanding, please check the notes section.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe first and only line of each test case contains $4$ integers $a_1$,\n$a_2$, $b_1$, $b_2$ ($1 \\leq a_1, a_2, b_1, b_2 \\leq 10$)\nwhere $a_1$ and $a_2$ represent the cards Suneet has, and $b_1$\nand $b_2$ represent the cards Slavic has, respectively.",
        "output": "For each test case, output a single integer \u2014 the number of games Suneet would\nwin considering all possible games.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 8 2 6\n1 1 1 1\n10 10 2 2\n1 1 10 10\n3 8 7 2\n</pre></td>\n    <td><pre>2\n0\n4\n0\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Consider the first test case when Slavic starts with the cards that have the\nvalues $2$ and $6$, and Suneet starts with cards that have the values\n$3$ and $8$. The game could happen in $4$ different ways:\n\n  * Suneet flips $3$ and Slavic flips $2$. Suneet wins the first round. Then, Suneet flips $8$ and Slavic flips $6$. Suneet wins the second round as well. Since Suneet won $2$ rounds, he wins the game.\n\n  * Suneet flips $3$ and Slavic flips $6$. Slavic wins the first round. Then, Suneet flips $8$ and Slavic flips $2$. Suneet wins the second round. Nobody wins since both players won an equal amount of rounds.\n\n  * Suneet flips $8$ and Slavic flips $6$. Suneet wins the first round. Then, Suneet flips $3$ and Slavic flips $2$. Suneet wins the second round as well. Since Suneet won $2$ rounds, he wins the game.\n\n  * Suneet flips $8$ and Slavic flips $2$. Suneet wins the first round. Then, Suneet flips $3$ and Slavic flips $6$. Slavic wins the round. Nobody wins since both players won an equal amount of rounds."
    },
    {
        "problem_id": "1999C",
        "url": "https://codeforces.com/problemset/problem/1999/C",
        "title": "Showering",
        "rating": 800,
        "tags": [
            "greedy",
            "implementation"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "As a computer science student, Alex faces a hard challenge \u2014 showering. He\ntries to shower daily, but despite his best efforts there are always\nchallenges. He takes $s$ minutes to shower and a day only has $m$\nminutes!\n\nHe already has $n$ tasks planned for the day. Task $i$ is represented\nas an interval $(l_i$, $r_i)$, which means that Alex is busy and can\nnot take a shower in that time interval (at any point in time strictly between\n$l_i$ and $r_i$). No two tasks overlap.\n\nGiven all $n$ time intervals, will Alex be able to shower that day? In\nother words, will Alex have a free time interval of length at least $s$?\n\n![](CDN_BASE_URL/5d5195053b99e5c6936ccefadc239679)\n\nIn the first test case, Alex can shower for the first $3$ minutes of the\nday and not miss any of the tasks.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains three integers $n$, $s$, and\n$m$ ($1 \\leq n \\leq 2 \\cdot 10^5$; $1 \\leq s, m \\leq 10^9$) \u2014 the\nnumber of time intervals Alex already has planned, the amount of time Alex\ntakes to take a shower, and the amount of minutes a day has.\n\nThen $n$ lines follow, the $i$-th of which contains two integers\n$l_i$ and $r_i$ ($0 \\leq l_i < r_i \\leq m$) \u2014 the time interval of\nthe $i$-th task. No two tasks overlap.\n\nAdditional constraint on the input: $l_i > r_{i-1}$ for every $i > 1$.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.",
        "output": "For each test case output \"YES\" (without quotes) if Alex can take a shower for\nthat given test case, and \"NO\" (also without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\",\nand \"Yes\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3 3 10\n3 5\n6 8\n9 10\n3 3 10\n1 2\n3 5\n6 7\n3 3 10\n1 2\n3 5\n6 8\n3 4 10\n1 2\n6 7\n8 9\n</pre></td>\n    <td><pre>YES\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1999D",
        "url": "https://codeforces.com/problemset/problem/1999/D",
        "title": "Slavic's Exam",
        "rating": 1100,
        "tags": [
            "greedy",
            "implementation",
            "strings"
        ],
        "div": "Div. 4",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Slavic has a very tough exam and needs your help in order to pass it. Here is\nthe question he is struggling with:\n\nThere exists a string $s$, which consists of lowercase English letters and\npossibly zero or more \"?\".\n\nSlavic is asked to change each \"?\" to a lowercase English letter such that\nstring $t$ becomes a subsequence (not necessarily continuous) of the\nstring $s$.\n\nOutput any such string, or say that it is impossible in case no string that\nrespects the conditions exists.",
        "input": "The first line contains a single integer $T$ ($1 \\leq T \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single string $s$ ($1 \\leq\n|s| \\leq 2 \\cdot 10^5$, and $s$ consists only of lowercase English\nletters and \"?\"-s)  \u2013 the original string you have.\n\nThe second line of each test case contains a single string $t$ ($1 \\leq\n|t| \\leq |s|$, and $t$ consists only of lowercase English letters)  \u2013\nthe string that should be a subsequence of string $s$.\n\nThe sum of $|s|$ over all test cases doesn't exceed $2 \\cdot 10^5$,\nwhere $|x|$ denotes the length of the string $x$.",
        "output": "For each test case, if no such string exists as described in the statement,\noutput \"NO\" (without quotes).\n\nOtherwise, output \"YES\" (without quotes). Then, output one line \u2014 the string\nthat respects all conditions.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\",\nand \"Yes\" will be recognized as a positive response).\n\nIf multiple answers are possible, you can output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n?????\nxbx\nab??e\nabcde\nayy?x\na\nab??e\ndac\npaiu\nmom\n</pre></td>\n    <td><pre>YES\nxabax\nYES\nabcde\nYES\nayyyx\nNO\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "1999E",
        "url": "https://codeforces.com/problemset/problem/1999/E",
        "title": "Triple Operations",
        "rating": 1300,
        "tags": [
            "dp",
            "implementation",
            "math"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "On the board Ivy wrote down all integers from $l$ to $r$, inclusive.\n\nIn an operation, she does the following:\n\n  * pick two numbers $x$ and $y$ on the board, erase them, and in their place write the numbers $3x$ and $\\lfloor \\frac{y}{3} \\rfloor$. (Here $\\lfloor \\bullet \\rfloor$ denotes rounding down to the nearest integer).\n\nWhat is the minimum number of operations Ivy needs to make all numbers on the\nboard equal $0$? We have a proof that this is always possible.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains two integers $l$ and $r$\n($1 \\leq l < r \\leq 2 \\cdot 10^5$).",
        "output": "For each test case, output a single integer \u2014 the minimum number of operations\nneeded to make all numbers on the board equal $0$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 3\n2 4\n199999 200000\n19 84\n</pre></td>\n    <td><pre>5\n6\n36\n263\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we can perform $5$ operations as follows: $$\n1,2,3 \\xrightarrow[x=1,\\,y=2]{} 3,0,3 \\xrightarrow[x=0,\\,y=3]{} 1,0,3\n\\xrightarrow[x=0,\\,y=3]{} 1,0,1 \\xrightarrow[x=0,\\,y=1]{} 0,0,1\n\\xrightarrow[x=0,\\,y=1]{} 0,0,0 .$$"
    },
    {
        "problem_id": "1999F",
        "url": "https://codeforces.com/problemset/problem/1999/F",
        "title": "Expected Median",
        "rating": 1500,
        "tags": [
            "combinatorics",
            "math"
        ],
        "div": "Div. 4",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Arul has a binary array$^{\\text{\u2217}}$ $a$ of length $n$.\n\nHe will take all subsequences$^{\\text{\u2020}}$ of length $k$ ($k$ is\nodd) of this array and find their median.$^{\\text{\u2021}}$\n\nWhat is the sum of all these values?\n\nAs this sum can be very large, output it modulo $10^9 + 7$. In other\nwords, print the remainder of this sum when divided by $10^9 + 7$.\n\n$^{\\text{\u2217}}$A binary array is an array consisting only of zeros and ones.\n\n$^{\\text{\u2020}}$An array $b$ is a subsequence of an array $a$ if\n$b$ can be obtained from $a$ by the deletion of several (possibly,\nzero or all) elements. Subsequences don't have to be contiguous.\n\n$^{\\text{\u2021}}$The median of an array of odd length $k$ is the\n$\\frac{k+1}{2}$-th element when sorted.",
        "input": "The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\leq k \\leq n \\leq 2 \\cdot 10^5$, $k$ is odd) \u2014 the length of the\narray and the length of the subsequence, respectively.\n\nThe second line of each test case contains $n$ integers $a_i$ ($0\n\\leq a_i \\leq 1$) \u2014 the elements of the array.\n\nIt is guaranteed that sum of $n$ over all test cases does not exceed $2\n\\cdot 10^5$.",
        "output": "For each test case, print the sum modulo $10^9 + 7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n4 3\n1 0 0 1\n5 1\n1 1 1 1 1\n5 5\n0 1 0 1 0\n6 3\n1 0 1 0 1 1\n4 3\n1 0 1 1\n5 3\n1 0 1 1 0\n2 1\n0 0\n34 17\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n</pre></td>\n    <td><pre>2\n5\n0\n16\n4\n7\n0\n333606206\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are four subsequences of $[1,0,0,1]$ with\nlength $k=3$:\n\n  * $[1,0,0]$: median $= 0$. \n  * $[1,0,1]$: median $= 1$. \n  * $[1,0,1]$: median $= 1$. \n  * $[0,0,1]$: median $= 0$. \n\nThe sum of the results is $0+1+1+0=2$.\n\nIn the second test case, all subsequences of length $1$ have median\n$1$, so the answer is $5$."
    },
    {
        "problem_id": "1999G1",
        "url": "https://codeforces.com/problemset/problem/1999/G1",
        "title": "Ruler (easy version)",
        "rating": 1500,
        "tags": [
            "binary search",
            "interactive"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. The only difference between the two\nversions is that in this version, you can make at most $\\mathbf{10}$\nqueries.\n\nThis is an interactive problem. If you are unsure how interactive problems\nwork, then it is recommended to read [the guide for\nparticipants](https://codeforces.com/blog/entry/45307).\n\nWe have a secret ruler that is missing one number $x$ ($2 \\leq x \\leq\n999$). When you measure an object of length $y$, the ruler reports the\nfollowing values:\n\n  * If $y < x$, the ruler (correctly) measures the object as having length $y$. \n  * If $y \\geq x$, the ruler incorrectly measures the object as having length $y+1$. \n\n![](CDN_BASE_URL/f2ba8b56cc626dab02991bcad6d908b8)\n\nThe ruler above is missing the number $4$, so it correctly measures the\nfirst segment as length $3$ but incorrectly measures the second segment as\nlength $6$ even though it is actually $5$.\n\nYou need to find the value of $x$. To do that, you can make queries of the\nfollowing form:\n\n  * $\\texttt{?}~a~b$ \u2014 in response, we will measure the side lengths of an $a \\times b$ rectangle with our ruler and multiply the results, reporting the measured area of the rectangle back to you. For example, if $x=4$ and you query a $3 \\times 5$ rectangle, we will measure its side lengths as $3 \\times 6$ and report $18$ back to you. \n\nFind the value of $x$. You can ask at most $\\mathbf{10}$ queries.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\leq t \\leq 1000$) \u2014 the number of test cases.",
        "output": "",
        "interaction": "There is no initial input for each test case. You should begin the interaction\nby asking a query.\n\nTo make a query, output a single line of the form $\\texttt{?}~a~b$ ($1\n\\leq a, b \\leq 1000$). In response, you will be told the measured area of\nthe rectangle, according to our secret ruler.\n\nWhen you are ready to print the answer, output a single line of the form\n$\\texttt{!}~x$ ($2 \\leq x \\leq 999$). After that, proceed to process\nthe next test case or terminate the program if it was the last test case.\nPrinting the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the answer is known before the\nparticipant asks the queries and doesn't depend on the queries asked by the\nparticipant.\n\nIf your program makes more than $10$ queries for one set of input data,\nmakes an invalid query, or prints the wrong value of $x$, then the\nresponse to the query will be $-1$. After receiving such a response, your\nprogram should immediately terminate to receive the verdict Wrong Answer.\nOtherwise, you can get an arbitrary verdict because your solution will\ncontinue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the\noutput. Otherwise, you may get Idleness limit exceeded verdict. To do this,\nuse:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see the documentation for other languages. \n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq\n1000$) \u2014 the number of test cases.\n\nThe only line of each test case should contain a single integer $x$ ($2\n\\leq x \\leq 999$) \u2014 the missing number on the ruler.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n\n18\n\n25\n\n\n9999</pre></td>\n    <td><pre>? 3 5\n\n? 4 4\n\n! 4\n? 99 100\n\n! 100</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test, the interaction proceeds as follows.\n\nSolution| Jury| Explanation  \n---|---|---  \n| $\\texttt{2}$| There are 2 test cases.  \n$\\texttt{? 3 5}$| $\\texttt{18}$| Secretly, the jury picked $x=4$.\nThe solution requests the $3 \\times 5$ rectangle, and the jury responds\nwith $3 \\times 6 = 18$, as described in the statement.  \n$\\texttt{? 4 4}$| $\\texttt{25}$| The solution requests the $4 \\times\n4$ rectangle, which the jury measures as $5 \\times 5$ and responds with\n$25$.  \n$\\texttt{! 4}$| | The solution has somehow determined that $x=4$, and outputs it. Since the output is correct, the jury continues to the next test case.  \n$\\texttt{? 99 100}$| $\\texttt{1}$| Secretly, the jury picked\n$x=100$. The solution requests the $99 \\times 100$ rectangle, which\nthe jury measures as $99 \\times 101$ and responds with $9999$.  \n$\\texttt{! 100}$| | The solution has somehow determined that $x=100$, and outputs it. Since the output is correct and there are no more test cases, the jury and the solution exit.  \n  \nNote that the line breaks in the example input and output are for the sake of\nclarity, and do not occur in the real interaction."
    },
    {
        "problem_id": "1999G2",
        "url": "https://codeforces.com/problemset/problem/1999/G2",
        "title": "Ruler (hard version)",
        "rating": 1700,
        "tags": [
            "binary search",
            "interactive",
            "ternary search"
        ],
        "div": "Div. 4",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. The only difference between the two\nversions is that in this version, you can make at most $\\mathbf{7}$\nqueries.\n\nThis is an interactive problem. If you are unsure how interactive problems\nwork, then it is recommended to read [the guide for\nparticipants](https://codeforces.com/blog/entry/45307).\n\nWe have a secret ruler that is missing one number $x$ ($2 \\leq x \\leq\n999$). When you measure an object of length $y$, the ruler reports the\nfollowing values:\n\n  * If $y < x$, the ruler (correctly) measures the object as having length $y$. \n  * If $y \\geq x$, the ruler incorrectly measures the object as having length $y+1$. \n\n![](CDN_BASE_URL/f2ba8b56cc626dab02991bcad6d908b8)\n\nThe ruler above is missing the number $4$, so it correctly measures the\nfirst segment as length $3$ but incorrectly measures the second segment as\nlength $6$ even though it is actually $5$.\n\nYou need to find the value of $x$. To do that, you can make queries of the\nfollowing form:\n\n  * $\\texttt{?}~a~b$ \u2014 in response, we will measure the side lengths of an $a \\times b$ rectangle with our ruler and multiply the results, reporting the measured area of the rectangle back to you. For example, if $x=4$ and you query a $3 \\times 5$ rectangle, we will measure its side lengths as $3 \\times 6$ and report $18$ back to you. \n\nFind the value of $x$. You can ask at most $\\mathbf{7}$ queries.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\leq t \\leq 1000$) \u2014 the number of test cases.",
        "output": "",
        "interaction": "There is no initial input for each test case. You should begin the interaction\nby asking a query.\n\nTo make a query, output a single line of the form $\\texttt{?}~a~b$ ($1\n\\leq a, b \\leq 1000$). In response, you will be told the measured area of\nthe rectangle, according to our secret ruler.\n\nWhen you are ready to print the answer, output a single line of the form\n$\\texttt{!}~x$ ($2 \\leq x \\leq 999$). After that, proceed to process\nthe next test case or terminate the program if it was the last test case.\nPrinting the answer does not count as a query.\n\nThe interactor is not adaptive, meaning that the answer is known before the\nparticipant asks the queries and doesn't depend on the queries asked by the\nparticipant.\n\nIf your program makes more than $7$ queries for one set of input data,\nmakes an invalid query, or prints the wrong value of $x$, then the\nresponse to the query will be $-1$. After receiving such a response, your\nprogram should immediately terminate to receive the verdict Wrong Answer.\nOtherwise, you can get an arbitrary verdict because your solution will\ncontinue to read from a closed stream.\n\nAfter printing a query do not forget to output the end of line and flush the\noutput. Otherwise, you may get Idleness limit exceeded verdict. To do this,\nuse:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see the documentation for other languages. \n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq\n1000$) \u2014 the number of test cases.\n\nThe only line of each test case should contain a single integer $x$ ($2\n\\leq x \\leq 999$) \u2014 the missing number on the ruler.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n\n18\n\n25\n\n\n9999</pre></td>\n    <td><pre>? 3 5\n\n? 4 4\n\n! 4\n? 99 100\n\n! 100</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test, the interaction proceeds as follows.\n\nSolution| Jury| Explanation  \n---|---|---  \n| $\\texttt{2}$| There are 2 test cases.  \n$\\texttt{? 3 5}$| $\\texttt{18}$| Secretly, the jury picked $x=4$.\nThe solution requests the $3 \\times 5$ rectangle, and the jury responds\nwith $3 \\times 6 = 18$, as described in the statement.  \n$\\texttt{? 4 4}$| $\\texttt{25}$| The solution requests the $4 \\times\n4$ rectangle, which the jury measures as $5 \\times 5$ and responds with\n$25$.  \n$\\texttt{! 4}$| | The solution has somehow determined that $x=4$, and outputs it. Since the output is correct, the jury continues to the next test case.  \n$\\texttt{? 99 100}$| $\\texttt{1}$| Secretly, the jury picked\n$x=100$. The solution requests the $99 \\times 100$ rectangle, which\nthe jury measures as $99 \\times 101$ and responds with $9999$.  \n$\\texttt{! 100}$| | The solution has somehow determined that $x=100$, and outputs it. Since the output is correct and there are no more test cases, the jury and the solution exit.  \n  \nNote that the line breaks in the example input and output are for the sake of\nclarity, and do not occur in the real interaction."
    },
    {
        "problem_id": "2000A",
        "url": "https://codeforces.com/problemset/problem/2000/A",
        "title": "Primary Task",
        "rating": 800,
        "tags": [
            "implementation",
            "math",
            "strings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Dmitry wrote down $t$ integers on the board, and that is good. He is sure\nthat he lost an important integer $n$ among them, and that is bad.\n\nThe integer $n$ had the form $\\text{10^x}$ ($x \\ge 2$), where the\nsymbol '$\\text{^}$' denotes exponentiation.. Something went wrong, and\nDmitry missed the symbol '$\\text{^}$' when writing the important integer.\nFor example, instead of the integer $10^5$, he would have written\n$105$, and instead of $10^{19}$, he would have written $1019$.\n\nDmitry wants to understand which of the integers on the board could have been\nthe important integer and which could not.",
        "input": "The first line of the input contains one integer $t$ ($1 \\le t \\le\n10^4$) \u2014 the number of integers on the board.\n\nThe next $t$ lines each contain an integer $a$ ($1 \\le a \\le\n10000$) \u2014 the next integer from the board.",
        "output": "For each integer on the board, output \"YES\" if it could have been the\nimportant integer and \"NO\" otherwise.\n\nYou may output each letter in any case (lowercase or uppercase). For example,\nthe strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive\nanswer.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n100\n1010\n101\n105\n2033\n1019\n1002\n</pre></td>\n    <td><pre>NO\nYES\nNO\nYES\nNO\nYES\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2000B",
        "url": "https://codeforces.com/problemset/problem/2000/B",
        "title": "Seating in a Bus",
        "rating": 800,
        "tags": [
            "two pointers"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "In Berland, a bus consists of a row of $n$ seats numbered from $1$ to\n$n$. Passengers are advised to always board the bus following these rules:\n\n  * If there are no occupied seats in the bus, a passenger can sit in any free seat;\n  * Otherwise, a passenger should sit in any free seat that has at least one occupied neighboring seat. In other words, a passenger can sit in a seat with index $i$ ($1 \\le i \\le n$) only if at least one of the seats with indices $i-1$ or $i+1$ is occupied. \n\nToday, $n$ passengers boarded the bus. The array $a$ chronologically\nrecords the seat numbers they occupied. That is, $a_1$ contains the seat\nnumber where the first passenger sat, $a_2$ \u2014 the seat number where the\nsecond passenger sat, and so on.\n\nYou know the contents of the array $a$. Determine whether all passengers\nfollowed the recommendations.\n\nFor example, if $n = 5$, and $a$ = [$5, 4, 2, 1, 3$], then the\nrecommendations were not followed, as the $3$-rd passenger sat in seat\nnumber $2$, while the neighboring seats with numbers $1$ and $3$\nwere free.",
        "input": "The first line of input contains a single integer $t$ ($1 \\le t \\le\n10^4$) \u2014 the number of test cases.\n\nThe following describes the input test cases.\n\nThe first line of each test case contains exactly one integer $n$ ($1\n\\le n \\le 2 \\cdot 10^5$) \u2014 the number of seats in the bus and the number of\npassengers who boarded the bus.\n\nThe second line of each test case contains $n$ distinct integers $a_i$\n($1 \\le a_i \\le n$) \u2014 the seats that the passengers occupied in\nchronological order.\n\nIt is guaranteed that the sum of $n$ values across all test cases does not\nexceed $2 \\cdot 10^5$, and that no passenger sits in an already occupied\nseat.",
        "output": "For each test case, output on a separate line:\n\n  * \"YES\", if all passengers followed the recommendations; \n  * \"NO\" otherwise. \n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5\n5 4 2 1 3\n3\n2 3 1\n4\n2 3 1 4\n5\n1 2 3 5 4\n</pre></td>\n    <td><pre>NO\nYES\nYES\nNO</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The first test case is explained in the problem statement."
    },
    {
        "problem_id": "2000C",
        "url": "https://codeforces.com/problemset/problem/2000/C",
        "title": "Numeric String Template",
        "rating": 1000,
        "tags": [
            "data structures",
            "strings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Kristina has an array $a$, called a template, consisting of $n$\nintegers. She also has $m$ strings, each consisting only of lowercase\nLatin letters. The strings are numbered from $1$ to $m$. She wants to\ncheck which strings match the template.\n\nA string $s$ is considered to match the template if all of the following\nconditions are simultaneously satisfied:\n\n  * The length of the string $s$ is equal to the number of elements in the array $a$.\n  * The same numbers from $a$ correspond to the same symbols from $s$. So, if $a_i = a_j$, then $s_i = s_j$ for ($1 \\le i, j \\le n$).\n  * The same symbols from $s$ correspond to the same numbers from $a$. So, if $s_i = s_j$, then $a_i = a_j$ for ($1 \\le i, j \\le n$).\n\nIn other words, there must be a one-to-one correspondence between the\ncharacters of the string and the elements of the array.\n\nFor example, if $a$ = [$3, 5, 2, 1, 3$], then the string \"abfda\"\nmatches the template, while the string \"afbfa\" does not, since the character\n\"f\" corresponds to both numbers $1$ and $5$.",
        "input": "The first line of input contains a single integer $t$ ($1 \\le t \\le\n10^4$) \u2014 the number of test cases.\n\nThe following descriptions are for the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of each test case contains exactly $n$ integers $a_i$\n($-10^9 \\le a_i \\le 10^9$) \u2014 the elements of the array $a$.\n\nThe third line of each test case contains a single integer $m$ ($1 \\le m\n\\le 2 \\cdot 10^5$) \u2014 the number of strings to check for template matching.\n\nFollowing are $m$ strings, each containing a non-empty string $s_j$\n($1 \\le |s_j| \\le 2 \\cdot 10^5$), consisting of lowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2 \\cdot 10^5$, and that the sum of the lengths of all strings does not\nexceed $2 \\cdot 10^5$.",
        "output": "For each test case, output $m$ lines. On the $i$-th line ($1 \\le i\n\\le m$) output:\n\n  * \"YES\", if the string with index $i$ matches the template; \n  * \"NO\" otherwise. \n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5\n3 5 2 1 3\n2\nabfda\nafbfa\n2\n1 2\n3\nab\nabc\naa\n4\n5 -3 5 -3\n4\naaaa\nbcbc\naba\ncbcb\n</pre></td>\n    <td><pre>YES\nNO\nYES\nNO\nNO\nNO\nYES\nNO\nYES</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The first test case is explained in the problem statement."
    },
    {
        "problem_id": "2000D",
        "url": "https://codeforces.com/problemset/problem/2000/D",
        "title": "Right Left Wrong",
        "rating": 1200,
        "tags": [
            "greedy",
            "implementation",
            "two pointers"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Vlad found a strip of $n$ cells, numbered from left to right from $1$\nto $n$. In the $i$-th cell, there is a positive integer $a_i$ and\na letter $s_i$, where all $s_i$ are either 'L' or 'R'.\n\nVlad invites you to try to score the maximum possible points by performing any\n(possibly zero) number of operations.\n\nIn one operation, you can choose two indices $l$ and $r$ ($1 \\le l <\nr \\le n$) such that $s_l$ = 'L' and $s_r$ = 'R' and do the\nfollowing:\n\n  * add $a_l + a_{l + 1} + \\dots + a_{r - 1} + a_r$ points to the current score; \n  * replace $s_i$ with '.' for all $l \\le i \\le r$, meaning you can no longer choose these indices. \n\nFor example, consider the following strip:\n\n$3$| $5$| $1$| $4$| $3$| $2$  \n---|---|---|---|---|---  \nL| R| L| L| L| R  \n  \nYou can first choose $l = 1$, $r = 2$ and add $3 + 5 = 8$ to your\nscore.\n\n$3$| $5$| $1$| $4$| $3$| $2$  \n---|---|---|---|---|---  \n.| .| L| L| L| R  \n  \nThen choose $l = 3$, $r = 6$ and add $1 + 4 + 3 + 2 = 10$ to your\nscore.\n\n$3$| $5$| $1$| $4$| $3$| $2$  \n---|---|---|---|---|---  \n.| .| .| .| .| .  \n  \nAs a result, it is impossible to perform another operation, and the final\nscore is $18$.\n\nWhat is the maximum score that can be achieved?",
        "input": "The first line contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains one integer $n$ ($2 \\le n \\le\n2 \\cdot 10^5$) \u2014 the length of the strip.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\dots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 the numbers written on the strip.\n\nThe third line of each test case contains a string $s$ of $n$\ncharacters 'L' and 'R'.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases\ndoes not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output one integer \u2014 the maximum possible number of points\nthat can be scored.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n6\n3 5 1 4 3 2\nLRLLLR\n2\n2 8\nLR\n2\n3 9\nRL\n5\n1 2 3 4 5\nLRLRR\n</pre></td>\n    <td><pre>18\n10\n0\n22\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2000E",
        "url": "https://codeforces.com/problemset/problem/2000/E",
        "title": "Photoshoot for Gorillas",
        "rating": 1400,
        "tags": [
            "combinatorics",
            "data structures",
            "greedy",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You really love gorillas, so you decided to organize a photoshoot for them.\nGorillas live in the jungle. The jungle is represented as a grid of $n$\nrows and $m$ columns. $w$ gorillas agreed to participate in the\nphotoshoot, and the gorilla with index $i$ ($1 \\le i \\le w$) has a\nheight of $a_i$. You want to place all the gorillas in the cells of the\ngrid such that there is no more than one gorilla in each cell.\n\nThe spectacle of the arrangement is equal to the sum of the spectacles of all\nsub-squares of the grid with a side length of $k$.\n\nThe spectacle of a sub-square is equal to the sum of the heights of the\ngorillas in it.\n\nFrom all suitable arrangements, choose the arrangement with the maximum\nspectacle.",
        "input": "The first line contains an integer $t$ ($1 \\le t \\le 10^3$) \u2014 the\nnumber of test cases.\n\nThe descriptions of the test cases follow.\n\nThe first line contains integers $n$, $m$, $k$ ($1 \\le n, m \\le\n2 \\cdot 10^5$, $1 \\le n \\cdot m \\le 2 \\cdot 10^5$, $1 \\le k \\le\n\\min(n, m)$) \u2014 the dimensions of the grid and the side length of the square.\n\nThe second line contains an integer $w$ ($1 \\le w \\le n \\cdot m$) \u2014\nthe number of gorillas.\n\nThe third line contains $w$ integers $a_1, a_2, \\ldots, a_w$ ($1 \\le\na_i \\le 10^9$) \u2014 the heights of the gorillas.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does\nnot exceed $2 \\cdot 10^5$. The same guarantee applies to $w$.",
        "output": "For each test case, output a single integer \u2014 the maximum spectacle of a\nsuitable arrangement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 4 2\n9\n1 1 1 1 1 1 1 1 1\n2 1 1\n2\n5 7\n20 15 7\n9\n4 1 4 5 6 1 1000000000 898 777\n1984 1 1\n4\n5 4 1499 2004\n9 5 5\n6\n6 7 14 16 16 6\n</pre></td>\n    <td><pre>21\n12\n49000083104\n3512\n319\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case of the first input set, the spectacle of the following\nsub-squares is summed:\n\n![](CDN_BASE_URL/8e995cd395fd9d2272c862709df70705) Yellow color corresponds to\nthe sub-squares, green \u2014 to the rest of the grid squares.\n\nThe picture shows the optimal arrangement of the gorillas. The spectacle of\nthe arrangement is $4 + 4 + 3 + 3 + 4 + 3 = 21$."
    },
    {
        "problem_id": "2000F",
        "url": "https://codeforces.com/problemset/problem/2000/F",
        "title": "Color Rows and Columns",
        "rating": 1900,
        "tags": [
            "dp",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "You have $n$ rectangles, the $i$-th of which has a width of $a_i$\nand a height of $b_i$.\n\nYou can perform the following operation an unlimited number of times: choose a\nrectangle and a cell in it, and then color it.\n\nEach time you completely color any row or column, you earn $1$ point. Your\ntask is to score at least $k$ points with as few operations as possible.\n\nSuppose you have a rectangle with a width of $6$ and a height of $3$.\nYou can score $4$ points by coloring all the cells in any $4$ columns,\nthus performing $12$ operations.",
        "input": "The first line contains an integer $t$ ($1 \\le t \\le 100$) \u2014 the\nnumber of test cases. The following are the descriptions of the test cases.\n\nThe first line of each test case description contains two integers $n$ and\n$k$ ($1 \\le n \\le 1000, 1 \\le k \\le 100$) \u2014 the number of rectangles\nin the case and the required number of points.\n\nThe next $n$ lines contain the descriptions of the rectangles. The\n$i$-th line contains two integers $a_i$ and $b_i$ ($1 \\le a_i,\nb_i \\le 100$) \u2014 the width and height of the $i$-th rectangle.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases\ndoes not exceed $1000$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of operations\nrequired to score at least $k$ points. If it is impossible to score at\nleast $k$ points, output -1.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1 4\n6 3\n1 5\n4 4\n5 10\n1 1\n1 1\n1 1\n1 1\n1 1\n2 100\n1 2\n5 6\n3 11\n2 2\n3 3\n4 4\n3 25\n9 2\n4 3\n8 10\n4 18\n5 4\n8 5\n8 3\n6 2\n</pre></td>\n    <td><pre>12\n14\n5\n-1\n17\n80\n35\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2000G",
        "url": "https://codeforces.com/problemset/problem/2000/G",
        "title": "Call During the Journey",
        "rating": 2100,
        "tags": [
            "binary search",
            "brute force",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "div": "Div. 3",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "You live in a city consisting of $n$ intersections and $m$ streets\nconnecting some pairs of intersections. You can travel in either direction on\neach street. No two streets connect the same pair of intersections, and no\nstreet connects an intersection to itself. You can reach any intersection from\nany other, possibly passing through some other intersections.\n\nEvery minute, you can board a bus at intersection $u_i$ and travel for\n$l_{i1}$ minutes to intersection $v_i$. Conversely, you can travel\nfrom intersection $v_i$ to intersection $u_i$ in $l_{i1}$ minutes.\nYou can only board and exit the bus at intersections. You can only board the\nbus at an intersection if you are currently there.\n\nYou can also walk along each street, which takes $l_{i2} > l_{i1}$\nminutes.\n\nYou can make stops at intersections.\n\nYou live at intersection number $1$. Today you woke up at time $0$,\nand you have an important event scheduled at intersection number $n$,\nwhich you must reach no later than time $t_0$. You also have a phone call\nplanned that will last from $t_1$ to $t_2$ minutes ($t_1 < t_2 <\nt_0$).\n\nDuring the phone call, you cannot ride the bus, but you can walk along any\nstreets, make stops, or stay at home. You can exit the bus at minute $t_1$\nand board the bus again at minute $t_2$.\n\nSince you want to get enough sleep, you became curious \u2014 how late can you\nleave home to have time to talk on the phone and still not be late for the\nevent?",
        "input": "The first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases. The following are the descriptions of the test cases.\n\nThe first line of each test case contains two integers $n$, $m$ ($2\n\\le n \\le 10^5, 1 \\le m \\le 10^5$) \u2014 the number of intersections and streets\nin the city.\n\nThe second line of each test case contains three integers $t_0$,\n$t_1$, $t_2$ ($1 \\le t_1 < t_2 < t_0 \\le 10^9$) \u2014 the start time\nof the event, the start time of the phone call, and its end time,\nrespectively.\n\nThe next $m$ lines of each test case contain descriptions of the streets.\n\nThe $i$-th line contains four integers $u_i$, $v_i$, $l_{i1}$,\n$l_{i2}$ ($1 \\le u_i, v_i \\le n$, $u_i \\neq v_i$, $1 \\le l_{i1}\n< l_{i2} \\le 10^9$) \u2014 the numbers of the intersections connected by the\n$i$-th street, as well as the travel time along the street by bus and on\nfoot. It is guaranteed that no two streets connect the same pair of\nintersections and that it is possible to reach any intersection from any\nother.\n\nIt is guaranteed that the sum of the values of $n$ across all test cases\ndoes not exceed $10^5$. It is also guaranteed that the sum of the values\nof $m$ across all test cases does not exceed $10^5$.",
        "output": "For each test case, output a single integer \u2014 the latest time you can leave\nhome to have time to talk on the phone and not be late for the event. If you\ncannot reach the event on time, output -1.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n5 5\n100 20 80\n1 5 30 100\n1 2 20 50\n2 3 20 50\n3 4 20 50\n4 5 20 50\n2 1\n100 50 60\n1 2 55 110\n4 4\n100 40 60\n1 2 30 100\n2 4 30 100\n1 3 20 50\n3 4 20 50\n3 3\n100 80 90\n1 2 1 10\n2 3 10 50\n1 3 20 21\n3 2\n58 55 57\n2 1 1 3\n2 3 3 4\n2 1\n12 9 10\n2 1 6 10\n5 5\n8 5 6\n2 1 1 8\n2 3 4 8\n4 2 2 4\n5 3 3 4\n4 5 2 6\n</pre></td>\n    <td><pre>0\n-1\n60\n80\n53\n3\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2000H",
        "url": "https://codeforces.com/problemset/problem/2000/H",
        "title": "Ksyusha and the Loaded Set",
        "rating": 2200,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "implementation"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "Ksyusha decided to start a game development company. To stand out among\ncompetitors and achieve success, she decided to write her own game engine. The\nengine must support a set initially consisting of $n$ distinct integers\n$a_1, a_2, \\ldots, a_n$.\n\nThe set will undergo $m$ operations sequentially. The operations can be of\nthe following types:\n\n  * Insert element $x$ into the set; \n  * Remove element $x$ from the set; \n  * Report the $k$-load of the set. \n\nThe $k$-load of the set is defined as the minimum positive integer $d$\nsuch that the integers $d, d + 1, \\ldots, d + (k - 1)$ do not appear in\nthis set. For example, the $3$-load of the set $\\\\{3, 4, 6, 11\\\\}$ is\n$7$, since the integers $7, 8, 9$ are absent from the set, and no\nsmaller value fits.\n\nKsyusha is busy with management tasks, so you will have to write the engine.\nImplement efficient support for the described operations.",
        "input": "The first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases.\n\nThe following lines describe the test cases.\n\nThe first line contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014\nthe initial size of the set.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\le a_1 < a_2 < \\ldots < a_n \\le 2 \\cdot 10^6$) \u2014 the initial state of the\nset.\n\nThe third line contains an integer $m$ ($1 \\le m \\le 2 \\cdot 10^5$) \u2014\nthe number of operations.\n\nThe next $m$ lines contain the operations. The operations are given in the\nfollowing format:\n\n  * + $x$ ($1 \\le x \\le 2 \\cdot 10^6$) \u2014 insert element $x$ into the set (it is guaranteed that $x$ is not in the set); \n  * - $x$ ($1 \\le x \\le 2 \\cdot 10^6$) \u2014 remove element $x$ from the set (it is guaranteed that $x$ is in the set); \n  * ? $k$ ($1 \\le k \\le 2 \\cdot 10^6$) \u2014 output the value of the $k$-load of the set. \n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2 \\cdot 10^5$, and the same holds for $m$.",
        "output": "For each test case, output the answers to the operations of type \"?\".",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5\n1 2 5 905 2000000\n15\n- 2\n? 2\n? 1\n- 1\n? 1\n+ 4\n+ 2\n? 2\n+ 6\n- 4\n+ 7\n? 2\n? 3\n? 4\n? 2000000\n5\n3 4 5 6 8\n9\n? 5\n- 5\n? 5\n+ 1\n? 2\n- 6\n- 8\n+ 6\n? 5\n5\n6 7 8 9 10\n10\n? 5\n- 6\n? 4\n- 10\n+ 5\n- 8\n+ 3\n+ 2\n- 3\n+ 10\n</pre></td>\n    <td><pre>2 2 1 6 3 8 8 2000001 \n9 9 9 7 \n1 1 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2001A",
        "url": "https://codeforces.com/problemset/problem/2001/A",
        "title": "Make All Equal",
        "rating": 800,
        "tags": [
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given a cyclic array $a_1, a_2, \\ldots, a_n$.\n\nYou can perform the following operation on $a$ at most $n - 1$ times:\n\n  * Let $m$ be the current size of $a$, you can choose any two adjacent elements where the previous one is no greater than the latter one (In particular, $a_m$ and $a_1$ are adjacent and $a_m$ is the previous one), and delete exactly one of them. In other words, choose an integer $i$ ($1 \\leq i \\leq m$) where $a_i \\leq a_{(i \\bmod m) + 1}$ holds, and delete exactly one of $a_i$ or $a_{(i \\bmod m) + 1}$ from $a$. \n\nYour goal is to find the minimum number of operations needed to make all\nelements in $a$ equal.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 100$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le n$) \u2014 the elements of array $a$.",
        "output": "For each test case, output a single line containing an integer: the minimum\nnumber of operations needed to make all elements in $a$ equal.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1\n1\n3\n1 2 3\n3\n1 2 2\n5\n5 4 3 2 1\n6\n1 1 2 2 3 3\n8\n8 7 6 3 8 7 6 3\n6\n1 1 4 5 1 4\n</pre></td>\n    <td><pre>0\n2\n1\n4\n4\n6\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there is only one element in $a$, so we can't do\nany operation.\n\nIn the second test case, we can perform the following operations to make all\nelements in $a$ equal:\n\n  * choose $i = 2$, delete $a_3$, then $a$ would become $[1, 2]$. \n  * choose $i = 1$, delete $a_1$, then $a$ would become $[2]$. \n\nIt can be proven that we can't make all elements in $a$ equal using fewer\nthan $2$ operations, so the answer is $2$."
    },
    {
        "problem_id": "2001B",
        "url": "https://codeforces.com/problemset/problem/2001/B",
        "title": "Generate Permutation",
        "rating": 800,
        "tags": [
            "constructive algorithms"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 256,
        "description": "There is an integer sequence $a$ of length $n$, where each element is\ninitially $-1$.\n\nMisuki has two typewriters where the first one writes letters from left to\nright, with a pointer initially pointing to $1$, and another writes\nletters from right to left with a pointer initially pointing to $n$.\n\nMisuki would choose one of the typewriters and use it to perform the following\noperations until $a$ becomes a permutation of $[1, 2, \\ldots, n]$\n\n  * write number: write the minimum positive integer that isn't present in the array $a$ to the element $a_i$, $i$ is the position where the pointer points at. Such operation can be performed only when $a_i = -1$. \n  * carriage return: return the pointer to its initial position (i.e. $1$ for the first typewriter, $n$ for the second) \n  * move pointer: move the pointer to the next position, let $i$ be the position the pointer points at before this operation, if Misuki is using the first typewriter, $i := i + 1$ would happen, and $i := i - 1$ otherwise. Such operation can be performed only if after the operation, $1 \\le i \\le n$ holds. \n\nYour task is to construct any permutation $p$ of length $n$, such that\nthe minimum number of carriage return operations needed to make $a = p$ is\nthe same no matter which typewriter Misuki is using.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 500$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a line of $n$ integers, representing the\npermutation $p$ of length $n$ such that the minimum number of carriage\nreturn operations needed to make $a = p$ is the same no matter which\ntypewriter Misuki is using, or $-1$ if it is impossible to do so.\n\nIf there are multiple valid permutations, you can output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1\n2\n3\n</pre></td>\n    <td><pre>1\n-1\n3 1 2</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, it's possible to make $a = p = [1]$ using $0$\ncarriage return operations.\n\nIn the second testcase, it is possible to make $a = p = [1, 2]$ with the\nminimal number of carriage returns as follows:\n\nIf Misuki is using the first typewriter:\n\n  * Write number: write $1$ to $a_1$, $a$ becomes $[1, -1]$ \n  * Move pointer: move the pointer to the next position. (i.e. $2$) \n  * Write number: write $2$ to $a_2$, $a$ becomes $[1, 2]$ \n\nIf Misuki is using the second typewriter:\n\n  * Move pointer: move the pointer to the next position. (i.e. $1$) \n  * Write number: write $1$ to $a_1$, $a$ becomes $[1, -1]$ \n  * Carriage return: return the pointer to $2$. \n  * Write number: write $2$ to $a_2$, $a$ becomes $[1, 2]$ \n\nIt can be proven that the minimum number of carriage returns needed to\ntransform $a$ into $p$ when using the first typewriter is $0$ and\nit is $1$ when using the second one, so this permutation is not valid.\n\nSimilarly, $p = [2, 1]$ is also not valid, so there is no solution for\n$n = 2$.\n\nIn the third testcase, it is possibile to make $a = p = [3, 1, 2]$ with\n$1$ carriage return with both the first and the second typewriter. It can\nbe proven that, for both typewriters, it is impossible to write $p$ with\n$0$ carriage returns.\n\nWith the first typewriter it is possible to:\n\n  * Move pointer: move the pointer to the next position. (i.e. $2$) \n  * Write number: write $1$ to $a_2$, $a$ becomes $[-1, 1, -1]$ \n  * Move pointer: move the pointer to the next position. (i.e. $3$) \n  * Write number: write $2$ to $a_3$, $a$ becomes $[-1, 1, 2]$ \n  * Carriage return: return the pointer to $1$. \n  * Write number: write $3$ to $a_1$, $a$ becomes $[3,1,2]$ \n\nWith the second typewriter it is possible to:\n\n  * Move pointer: move the pointer to the next position. (i.e. $2$) \n  * Write number: write $1$ to $a_2$, $a$ becomes $[-1, 1, -1]$ \n  * Carriage return: return the pointer to $3$. \n  * Write number: write $2$ to $a_3$, $a$ becomes $[-1, 1, 2]$ \n  * Move pointer: move the pointer to the next position. (i.e. $2$) \n  * Move pointer: move the pointer to the next position. (i.e. $1$) \n  * Write number: write $3$ to $a_1$, $a$ becomes $[3, 1, 2]$"
    },
    {
        "problem_id": "2001C",
        "url": "https://codeforces.com/problemset/problem/2001/C",
        "title": "Guess The Tree",
        "rating": 1500,
        "tags": [
            "binary search",
            "brute force",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "interactive",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem.\n\nMisuki has chosen a secret tree with $n$ nodes, indexed from $1$ to\n$n$, and asked you to guess it by using queries of the following type:\n\n  * \"? a b\" \u2014 Misuki will tell you which node $x$ minimizes $|d(a,x) - d(b,x)|$, where $d(x,y)$ is the distance between nodes $x$ and $y$. If more than one such node exists, Misuki will tell you the one which minimizes $d(a,x)$. \n\nFind out the structure of Misuki's secret tree using at most $15n$\nqueries!",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 200$) \u2014 the number of test cases.\n\nEach test case consists of a single line with an integer $n$ ($2 \\le n\n\\le 1000$), the number of nodes in the tree.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$1000$.",
        "output": "",
        "interaction": "The interaction begins by reading the integer $n$.\n\nThen you can make up to $15n$ queries.\n\nTo make a query, output a line in the format \"? a b\" (without quotes) ($1\n\\le a,b \\le n$). After each query, read an integer \u2014 the answer to your\nquery.\n\nTo report the answer, output a line in the format \"! $a_1$ $b_1$\n$a_2$ $b_2$ ... $a_{n-1}$ $b_{n-1}$\" (without quotes), meaning\nthat there is an edge between nodes $a_i$ and $b_i$, for each $1 \\le\ni \\le n-1$. You can print the edges in any order.\n\nAfter $15n$ queries have been made, the response to any other query will\nbe $-1$. Once you receive such a response, terminate the program to\nreceive the Wrong Answer verdict.\n\nAfter printing each line, do not forget to output the end of line and flush\nthe output buffer. Otherwise, you will receive the Idleness limit exceeded\nverdict. To flush, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see the documentation for other languages.\n\nHacks\n\nFor hacks, use the following format: The first line contains an integer\n$t$ ($1 \\le t \\le 200$) \u2014 the number of test cases.\n\nThe first line of each test contains an integer $n$ \u2014 the number of nodes\nin the hidden tree.\n\nThen $n-1$ lines follow. The $i$-th of them contains two integers\n$a_i$ and $b_i$ ($1 \\le a_i, b_i \\le n$), meaning that there is an\nedge between $a_i$ and $b_i$ in the hidden tree.\n\nThe sum of $n$ over all test cases must not exceed $1000$.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n4\n1\n1\n3</pre></td>\n    <td><pre>? 1 2\n\n? 1 3\n\n? 1 4\n\n! 1 2 1 3 3 4</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "A tree is an undirected acyclic connected graph. A tree with $n$ nodes\nwill always have $n-1$ edges.\n\nIn the example case, the answer to \"? 1 2\" is $1$. This means that there\nis an edge between nodes $1$ and $2$.\n\nThe answer to \"? 1 3\" is $1$. This means that there is an edge between\nnodes $1$ and $3$.\n\nThe answer to \"? 1 4\" is $3$. It can be proven that this can only happen\nif node $3$ is connected to both node $1$ and $4$.\n\nThe edges of the tree are hence $(1,2)$, $(1,3)$ and $(3,4)$."
    },
    {
        "problem_id": "2001D",
        "url": "https://codeforces.com/problemset/problem/2001/D",
        "title": "Longest Max Min Subsequence",
        "rating": 1900,
        "tags": [
            "brute force",
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given an integer sequence $a_1, a_2, \\ldots, a_n$. Let $S$ be\nthe set of all possible non-empty subsequences of $a$ without duplicate\nelements. Your goal is to find the longest sequence in $S$. If there are\nmultiple of them, find the one that minimizes lexicographical order after\nmultiplying terms at odd positions by $-1$.\n\nFor example, given $a = [3, 2, 3, 1]$, $S = \\\\{[1], [2], [3], [2, 1],\n[2, 3], [3, 1], [3, 2], [2, 3, 1], [3, 2, 1]\\\\}$. Then $[2, 3, 1]$ and\n$[3, 2, 1]$ would be the longest, and $[3, 2, 1]$ would be the answer\nsince $[-3, 2, -1]$ is lexicographically smaller than $[-2, 3, -1]$.\n\nA sequence $c$ is a subsequence of a sequence $d$ if $c$ can be\nobtained from $d$ by the deletion of several (possibly, zero or all)\nelements.\n\nA sequence $c$ is lexicographically smaller than a sequence $d$ if and\nonly if one of the following holds:\n\n  * $c$ is a prefix of $d$, but $c \\ne d$;\n  * in the first position where $c$ and $d$ differ, the sequence $c$ has a smaller element than the corresponding element in $d$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 5 \\cdot 10^4$). The description of the\ntest cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 3\n\\cdot 10^5$) \u2014 the length of $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le n$) \u2014 the sequence $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$3 \\cdot 10^5$.",
        "output": "For each test case, output the answer in the following format:\n\nOutput an integer $m$ in the first line \u2014 the length of $b$.\n\nThen output $m$ integers $b_1, b_2, \\ldots, b_m$ in the second line \u2014\nthe sequence $b$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n4\n3 2 1 3\n4\n1 1 1 1\n9\n3 2 1 3 2 1 3 2 1\n1\n1\n</pre></td>\n    <td><pre>3\n3 2 1\n1\n1\n3\n3 1 2\n1\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n2\n1 2\n10\n5 2 1 7 9 7 2 5 5 2\n2\n1 2\n10\n2 2 8 7 7 9 8 1 9 6\n9\n9 1 7 5 8 5 6 4 1\n3\n3 3 3\n6\n1 6 4 4 6 5\n6\n3 4 4 5 3 3\n10\n4 1 4 5 4 5 10 1 5 1\n7\n1 2 1 3 2 4 6\n</pre></td>\n    <td><pre>2\n1 2\n5\n5 1 9 7 2\n2\n1 2\n6\n2 7 9 8 1 6\n7\n9 1 7 5 8 6 4\n1\n3\n4\n1 4 6 5\n3\n4 5 3\n4\n5 4 10 1\n5\n2 1 3 4 6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, $S = \\\\{[1], [2], [3], [1, 3], [2, 1], [2, 3], [3, 1],\n[3, 2], [2, 1, 3], [3, 2, 1]\\\\}$. Among them, $[2, 1, 3]$ and $[3, 2,\n1]$ are the longest and $[-3, 2, -1]$ is lexicographical smaller than\n$[-2, 1, -3]$, so $[3, 2, 1]$ is the answer.\n\nIn the second example, $S = \\\\{[1]\\\\}$, so $[1]$ is the answer."
    },
    {
        "problem_id": "2001E1",
        "url": "https://codeforces.com/problemset/problem/2001/E1",
        "title": "Deterministic Heap (Easy Version)",
        "rating": 2400,
        "tags": [
            "combinatorics",
            "dp",
            "math",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "This is the easy version of the problem. The difference between the two\nversions is the definition of deterministic max-heap, time limit, and\nconstraints on $n$ and $t$. You can make hacks only if both versions\nof the problem are solved.\n\nConsider a perfect binary tree with size $2^n - 1$, with nodes numbered\nfrom $1$ to $2^n-1$ and rooted at $1$. For each vertex $v$\n($1 \\le v \\le 2^{n - 1} - 1$), vertex $2v$ is its left child and\nvertex $2v + 1$ is its right child. Each node $v$ also has a value\n$a_v$ assigned to it.\n\nDefine the operation $\\mathrm{pop}$ as follows:\n\n  1. initialize variable $v$ as $1$; \n  2. repeat the following process until vertex $v$ is a leaf (i.e. until $2^{n - 1} \\le v \\le 2^n - 1$); \n    1. among the children of $v$, choose the one with the larger value on it and denote such vertex as $x$; if the values on them are equal (i.e. $a_{2v} = a_{2v + 1}$), you can choose any of them; \n    2. assign $a_x$ to $a_v$ (i.e. $a_v := a_x$); \n    3. assign $x$ to $v$ (i.e. $v := x$); \n  3. assign $-1$ to $a_v$ (i.e. $a_v := -1$). \n\nThen we say the $\\mathrm{pop}$ operation is deterministic if there is a\nunique way to do such operation. In other words, $a_{2v} \\neq a_{2v + 1}$\nwould hold whenever choosing between them.\n\nA binary tree is called a max-heap if for every vertex $v$ ($1 \\le v \\le\n2^{n - 1} - 1$), both $a_v \\ge a_{2v}$ and $a_v \\ge a_{2v + 1}$\nhold.\n\nA max-heap is deterministic if the $\\mathrm{pop}$ operation is\ndeterministic to the heap when we do it for the first time.\n\nInitially, $a_v := 0$ for every vertex $v$ ($1 \\le v \\le 2^n -\n1$), and your goal is to count the number of different deterministic max-\nheaps produced by applying the following operation $\\mathrm{add}$ exactly\n$k$ times:\n\n  * Choose an integer $v$ ($1 \\le v \\le 2^n - 1$) and, for every vertex $x$ on the path between $1$ and $v$, add $1$ to $a_x$. \n\nTwo heaps are considered different if there is a node which has different\nvalues in the heaps.\n\nSince the answer might be large, print it modulo $p$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $n, k, p$ ($1\n\\le n, k \\le 500$, $10^8 \\le p \\le 10^9$, $p$ is a prime).\n\nIt is guaranteed that the sum of $n$ and the sum of $k$ over all test\ncases does not exceed $500$.",
        "output": "For each test case, output a single line containing an integer: the number of\ndifferent deterministic max-heaps produced by applying the aforementioned\noperation $\\mathrm{add}$ exactly $k$ times, modulo $p$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n1 13 998244353\n2 1 998244353\n3 2 998244853\n3 3 998244353\n3 4 100000037\n4 2 100000039\n4 3 100000037\n</pre></td>\n    <td><pre>1\n2\n12\n52\n124\n32\n304\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n500 500 100000007\n</pre></td>\n    <td><pre>76297230\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n87 63 100000037\n77 77 100000039\n100 200 998244353\n200 100 998244353\n32 59 998244853\n1 1 998244353\n</pre></td>\n    <td><pre>26831232\n94573603\n37147649\n847564946\n727060898\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first testcase, there is only one way to generate $a$, and such\nsequence is a deterministic max-heap, so the answer is $1$.\n\nFor the second testcase, if we choose $v = 1$ and do the operation, we\nwould have $a = [1, 0, 0]$, and since $a_2 = a_3$, we can choose\neither of them when doing the first $\\mathrm{pop}$ operation, so such heap\nis not a deterministic max-heap.\n\nAnd if we choose $v = 2$, we would have $a = [1, 1, 0]$, during the\nfirst $\\mathrm{pop}$, the following would happen:\n\n  * initialize $v$ as $1$ \n  * since $a_{2v} > a_{2v + 1}$, choose $2v$ as $x$, then $x = 2$ \n  * assign $a_x$ to $a_v$, then $a = [1, 1, 0]$ \n  * assign $x$ to $v$, then $v = 2$ \n  * since $v$ is a leaf, assign $-1$ to $a_v$, then $a = [1, -1, 0]$ \n\nSince the first $\\mathrm{pop}$ operation is deterministic, this is a\ndeterministic max-heap. Also, if we choose $v = 3$, $a$ would be a\ndeterministic max-heap, so the answer is $2$."
    },
    {
        "problem_id": "2001E2",
        "url": "https://codeforces.com/problemset/problem/2001/E2",
        "title": "Deterministic Heap (Hard Version)",
        "rating": 2900,
        "tags": [
            "combinatorics",
            "dp",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "This is the hard version of the problem. The difference between the two\nversions is the definition of deterministic max-heap, time limit, and\nconstraints on $n$ and $t$. You can make hacks only if both versions\nof the problem are solved.\n\nConsider a perfect binary tree with size $2^n - 1$, with nodes numbered\nfrom $1$ to $2^n-1$ and rooted at $1$. For each vertex $v$\n($1 \\le v \\le 2^{n - 1} - 1$), vertex $2v$ is its left child and\nvertex $2v + 1$ is its right child. Each node $v$ also has a value\n$a_v$ assigned to it.\n\nDefine the operation $\\mathrm{pop}$ as follows:\n\n  1. initialize variable $v$ as $1$; \n  2. repeat the following process until vertex $v$ is a leaf (i.e. until $2^{n - 1} \\le v \\le 2^n - 1$); \n    1. among the children of $v$, choose the one with the larger value on it and denote such vertex as $x$; if the values on them are equal (i.e. $a_{2v} = a_{2v + 1}$), you can choose any of them; \n    2. assign $a_x$ to $a_v$ (i.e. $a_v := a_x$); \n    3. assign $x$ to $v$ (i.e. $v := x$); \n  3. assign $-1$ to $a_v$ (i.e. $a_v := -1$). \n\nThen we say the $\\mathrm{pop}$ operation is deterministic if there is a\nunique way to do such operation. In other words, $a_{2v} \\neq a_{2v + 1}$\nwould hold whenever choosing between them.\n\nA binary tree is called a max-heap if for every vertex $v$ ($1 \\le v \\le\n2^{n - 1} - 1$), both $a_v \\ge a_{2v}$ and $a_v \\ge a_{2v + 1}$\nhold.\n\nA max-heap is deterministic if the $\\mathrm{pop}$ operation is\ndeterministic to the heap when we do it for the first and the second time.\n\nInitially, $a_v := 0$ for every vertex $v$ ($1 \\le v \\le 2^n -\n1$), and your goal is to count the number of different deterministic max-\nheaps produced by applying the following operation $\\mathrm{add}$ exactly\n$k$ times:\n\n  * Choose an integer $v$ ($1 \\le v \\le 2^n - 1$) and, for every vertex $x$ on the path between $1$ and $v$, add $1$ to $a_x$. \n\nTwo heaps are considered different if there is a node which has different\nvalues in the heaps.\n\nSince the answer might be large, print it modulo $p$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 50$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $n, k, p$ ($2\n\\le n \\le 100$, $1 \\le k \\le 500$, $10^8 \\le p \\le 10^9$, $p$ is\na prime).\n\nIt is guaranteed that the sum of $n$ does not exceed $100$ and the sum\nof $k$ over all test cases does not exceed $500$.",
        "output": "For each test case, output a single line containing an integer: the number of\ndifferent deterministic max-heaps produced by applying the aforementioned\noperation $\\mathrm{add}$ exactly $k$ times, modulo $p$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2 1 998244353\n3 2 998244853\n3 3 998244353\n3 4 100000037\n4 2 100000039\n4 3 100000037\n</pre></td>\n    <td><pre>2\n12\n40\n100\n32\n224\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n100 500 100000037\n</pre></td>\n    <td><pre>66681128\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n87 63 100000037\n13 437 100000039\n</pre></td>\n    <td><pre>83566569\n54517140\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first testcase, if we choose $v = 1$ and do the operation, we\nwould have $a = [1, 0, 0]$, and since $a_2 = a_3$, we can choose\neither of them when doing the first $\\mathrm{pop}$ operation, so such heap\nis not a deterministic max-heap.\n\nAnd if we choose $v = 2$, we would have $a = [1, 1, 0]$, during the\nfirst $\\mathrm{pop}$, the following would happen:\n\n  * initialize $v$ as $1$ \n  * since $a_{2v} > a_{2v + 1}$, choose $2v$ as $x$, then $x = 2$ \n  * assign $a_x$ to $a_v$, then $a = [1, 1, 0]$ \n  * assign $x$ to $v$, then $v = 2$ \n  * since $v$ is a leaf, assign $-1$ to $a_v$, then $a = [1, -1, 0]$ \n\nAnd during the second $\\mathrm{pop}$, the following would happen:\n\n  * initialize $v$ as $1$ \n  * since $a_{2v} < a_{2v + 1}$, choose $2v + 1$ as $x$, then $x = 3$ \n  * assign $a_x$ to $a_v$, then $a = [0, -1, 0]$ \n  * assign $x$ to $v$, then $v = 3$ \n  * since $v$ is a leaf, assign $-1$ to $a_v$, then $a = [0, -1, -1]$ \n\nSince both the first and the second $\\mathrm{pop}$ operation are\ndeterministic, this is a deterministic max-heap. Also, if we choose $v =\n3$, $a$ would be a deterministic max-heap, so the answer is $2$."
    },
    {
        "problem_id": "2002A",
        "url": "https://codeforces.com/problemset/problem/2002/A",
        "title": "Distanced Coloring",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You received an $n\\times m$ grid from a mysterious source. The source also\ngave you a magic positive integer constant $k$.\n\nThe source told you to color the grid with some colors, satisfying the\nfollowing condition:\n\n  * If $(x_1,y_1)$, $(x_2,y_2)$ are two distinct cells with the same color, then $\\max(|x_1-x_2|,|y_1-y_2|)\\ge k$. \n\nYou don't like using too many colors. Please find the minimum number of colors\nneeded to color the grid.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le1000$). The description of the test cases\nfollows.\n\nThe only line of each test case consists of three positive integers $n$,\n$m$, $k$ ($1\\le n,m,k\\le10^4$) \u2014 the dimensions of the grid and\nthe magic constant.",
        "output": "For each test case, print a single integer \u2014 the minimum number of colors\nneeded to color the grid.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n3 3 2\n5 1 10000\n7 3 4\n3 2 7\n8 9 6\n2 5 4\n</pre></td>\n    <td><pre>4\n5\n12\n6\n36\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one of the optimal constructions is:\n\n![](CDN_BASE_URL/a1b4551a26d9369b34abeb1ee2f829ed)\n\nIn the second test case, the color of all cells must be pairwise different, so\nthe answer is $5$."
    },
    {
        "problem_id": "2002B",
        "url": "https://codeforces.com/problemset/problem/2002/B",
        "title": "Removals Game",
        "rating": 1000,
        "tags": [
            "constructive algorithms",
            "games"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice got a permutation $a_1, a_2, \\ldots, a_n$ of $[1,2,\\ldots,n]$,\nand Bob got another permutation $b_1, b_2, \\ldots, b_n$ of\n$[1,2,\\ldots,n]$. They are going to play a game with these arrays.\n\nIn each turn, the following events happen in order:\n\n  * Alice chooses either the first or the last element of her array and removes it from the array; \n  * Bob chooses either the first or the last element of his array and removes it from the array. \n\nThe game continues for $n-1$ turns, after which both arrays will have\nexactly one remaining element: $x$ in the array $a$ and $y$ in the\narray $b$.\n\nIf $x=y$, Bob wins; otherwise, Alice wins. Find which player will win if\nboth players play optimally.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le\nn\\le 3\\cdot 10^5$).\n\nThe next line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\le\na_i\\le n$, all $a_i$ are distinct) \u2014 the permutation of Alice.\n\nThe next line contains $n$ integers $b_1,b_2,\\ldots,b_n$ ($1\\le\nb_i\\le n$, all $b_i$ are distinct) \u2014 the permutation of Bob.\n\nIt is guaranteed that the sum of all $n$ does not exceed $3\\cdot\n10^5$.",
        "output": "For each test case, print a single line with the name of the winner, assuming\nboth players play optimally. If Alice wins, print $\\texttt{Alice}$;\notherwise, print $\\texttt{Bob}$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n2\n1 2\n1 2\n3\n1 2 3\n2 3 1\n</pre></td>\n    <td><pre>Bob\nAlice\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Bob can win the game by deleting the same element as\nAlice did.\n\nIn the second test case, Alice can delete $3$ in the first turn, and then\nin the second turn, delete the element that is different from the one Bob\ndeleted in the first turn to win the game."
    },
    {
        "problem_id": "2002C",
        "url": "https://codeforces.com/problemset/problem/2002/C",
        "title": "Black Circles",
        "rating": 1200,
        "tags": [
            "brute force",
            "geometry",
            "greedy",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "There are $n$ circles on a two-dimensional plane. The $i$-th circle is\ncentered at $(x_i,y_i)$. Initially, all circles have a radius of $0$.\n\nThe circles' radii increase at a rate of $1$ unit per second.\n\nYou are currently at $(x_s,y_s)$; your goal is to reach $(x_t,y_t)$\nwithout touching the circumference of any circle (including the moment you\nreach $(x_t,y_t)$). You can move in any direction you want. However, your\nspeed is limited to $1$ unit per second.\n\nPlease determine whether this is possible.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le\nn\\le10^5$) \u2014 the number of circles.\n\nThe next $n$ lines each contain two integers $x_i$, $y_i$ ($1\\le\nx_i,y_i\\le10^9$) \u2014 the center of each circle.\n\nThe final line contains four integers $x_s$, $y_s$, $x_t$,\n$y_t$ ($1\\le x_s,y_s,x_t,y_t\\le10^9$) \u2014 the coordinates of the\nstarting point and the goal, respectively.\n\nIt is guaranteed that these $n+2$ points are distinct.\n\nIt is guaranteed that the sum of $n$ over all testcases does not exceed\n$10^5$.",
        "output": "For each test case, output $\\texttt{YES}$ if it is possible to reach the\ngoal without touching the circle boundaries, and output $\\texttt{NO}$\notherwise.\n\nYou can output $\\texttt{Yes}$ and $\\texttt{No}$ in any case (for\nexample, strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$,\nand $\\texttt{YES}$ will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n3\n2 5\n2 14\n10 13\n4 9 9 7\n3\n10 11\n6 9\n12 12\n14 13 4 8\n1\n5 7\n12 6 11 13\n2\n1000000000 2\n2 1000000000\n1 1 2 2\n1\n999999998 1000000000\n999999999 999999999 1 1\n1\n1000000000 1\n1 1000000000 1 1\n10\n989237121 2397081\n206669655 527238537\n522705783 380636165\n532545346 320061691\n207818728 199485303\n884520552 315781807\n992311437 802563521\n205138355 324818663\n223575704 395073023\n281560523 236279118\n216941610 572010615 323956540 794523071\n</pre></td>\n    <td><pre>YES\nNO\nYES\nYES\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, a feasible way of movement is as follows.\n\n![](CDN_BASE_URL/235d765e20897c623b3ac974eceac134)"
    },
    {
        "problem_id": "2002D1",
        "url": "https://codeforces.com/problemset/problem/2002/D1",
        "title": "DFS Checker (Easy Version)",
        "rating": 1900,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "graphs",
            "hashing",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "This is the easy version of the problem. In this version, the given tree is a\nperfect binary tree and the constraints on $n$ and $q$ are lower. You\ncan make hacks only if both versions of the problem are solved.\n\nYou are given a perfect binary tree$^\\dagger$ consisting of $n$\nvertices. The vertices are numbered from $1$ to $n$, and the root is\nthe vertex $1$. You are also given a permutation $p_1, p_2, \\ldots,\np_n$ of $[1,2,\\ldots,n]$.\n\nYou need to answer $q$ queries. For each query, you are given two integers\n$x$, $y$; you need to swap $p_x$ and $p_y$ and determine if\n$p_1, p_2, \\ldots, p_n$ is a valid DFS order$^\\ddagger$ of the given\ntree.\n\nPlease note that the swaps are persistent through queries.\n\n$^\\dagger$ A perfect binary tree is a tree with vertex $1$ as its\nroot, with size $n=2^k-1$ for a positive integer $k$, and where the\nparent of each vertex $i$ ($1<i\\le n$) is\n$\\left\\lfloor\\frac{i}{2}\\right\\rfloor$. Thus, all leaves of this tree are\nat a distance $k - 1$ from the root.\n\n$^\\ddagger$ A DFS order is found by calling the following\n$\\texttt{dfs}$ function on the given tree.\n\n    \n    \n    dfs_order = []\n    \n    function dfs(v):\n        append v to the back of dfs_order\n        pick an arbitrary permutation s of children of v\n        for child in s:\n            dfs(child)\n    dfs(1)\n    \n\nNote that the DFS order is not unique.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$, $q$\n($3\\le n\\le 65\\,535$, $2\\le q\\le 5 \\cdot 10^4$) \u2014 the number of\nvertices in the tree and the number of queries. It is guaranteed that\n$n=2^k-1$ for a positive integer $k$.\n\nThe next line contains $n-1$ integers $a_2,a_3,\\ldots,a_n$ ($1\\le\na_i<i$) \u2014 the parent of each vertex in the given tree. It is guaranteed that\n$a_i=\\left\\lfloor\\frac{i}{2}\\right\\rfloor$.\n\nThe next line contains $n$ integers $p_1,p_2,\\ldots,p_n$ ($1\\le\np_i\\le n$, all $p_i$ are distinct) \u2014 the initial permutation $p$.\n\nThe next $q$ lines each contain two integers $x$, $y$ ($1\\le\nx,y\\le n,x\\neq y$) \u2014 the positions of the elements to swap in the\npermutation.\n\nIt is guaranteed that the sum of all $n$ does not exceed $65\\,535$,\nand the sum of all $q$ does not exceed $5 \\cdot 10^4$.",
        "output": "For each test case, print $q$ lines corresponding to the $q$ queries.\nFor each query, output $\\texttt{YES}$ if there is a DFS order that exactly\nequals the current permutation, and output $\\texttt{NO}$ otherwise.\n\nYou can output $\\texttt{Yes}$ and $\\texttt{No}$ in any case (for\nexample, strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$\nand $\\texttt{YES}$ will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3 3\n1 1\n1 2 3\n2 3\n3 2\n1 3\n7 4\n1 1 2 2 3 3\n1 2 3 4 5 6 7\n3 5\n2 5\n3 7\n4 6\n</pre></td>\n    <td><pre>YES\nYES\nNO\nYES\nNO\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the permutation $p_1, p_2, \\ldots, p_n$ after each\nmodification is $[1,3,2],[1,2,3],[3,2,1]$, respectively. The first two\npermutations are valid DFS orders; the third is not a DFS order.\n\nIn the second test case, the permutation $p_1, p_2, \\ldots, p_n$ after\neach modification is\n$[1,2,5,4,3,6,7],[1,3,5,4,2,6,7],[1,3,7,4,2,6,5],[1,3,7,6,2,4,5]$,\nrespectively."
    },
    {
        "problem_id": "2002D2",
        "url": "https://codeforces.com/problemset/problem/2002/D2",
        "title": "DFS Checker (Hard Version)",
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "graphs",
            "hashing",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "This is the hard version of the problem. In this version, you are given a\ngeneric tree and the constraints on $n$ and $q$ are higher. You can\nmake hacks only if both versions of the problem are solved.\n\nYou are given a rooted tree consisting of $n$ vertices. The vertices are\nnumbered from $1$ to $n$, and the root is the vertex $1$. You are\nalso given a permutation $p_1, p_2, \\ldots, p_n$ of $[1,2,\\ldots,n]$.\n\nYou need to answer $q$ queries. For each query, you are given two integers\n$x$, $y$; you need to swap $p_x$ and $p_y$ and determine if\n$p_1, p_2, \\ldots, p_n$ is a valid DFS order$^\\dagger$ of the given\ntree.\n\nPlease note that the swaps are persistent through queries.\n\n$^\\dagger$ A DFS order is found by calling the following\n$\\texttt{dfs}$ function on the given tree.\n\n    \n    \n    dfs_order = []\n    \n    function dfs(v):\n        append v to the back of dfs_order\n        pick an arbitrary permutation s of children of v\n        for child in s:\n            dfs(child)\n    dfs(1)\n    \n\nNote that the DFS order is not unique.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$, $q$\n($2\\le n\\le 3\\cdot 10^5$, $2\\le q\\le 10^5$) \u2014 the number of vertices\nin the tree and the number of queries.\n\nThe next line contains $n-1$ integers $a_2,a_3,\\ldots,a_n$ ($1\\le\na_i<i$) \u2014 the parent of each vertex in the given tree.\n\nThe next line contains $n$ integers $p_1,p_2,\\ldots,p_n$ ($1\\le\np_i\\le n$, all $p_i$ are distinct) \u2014 the initial permutation $p$.\n\nThe next $q$ lines each contain two integers $x$, $y$ ($1\\le\nx,y\\le n,x\\neq y$) \u2014 the positions of the elements to swap in the\npermutation.\n\nIt is guaranteed that the sum of all $n$ does not exceed $3\\cdot\n10^5$, and the sum of all $q$ does not exceed $10^5$.",
        "output": "For each test case, print $q$ lines corresponding to the $q$ queries.\nFor each query, output $\\texttt{YES}$ if there is a DFS order that exactly\nequals the current permutation, and output $\\texttt{NO}$ otherwise.\n\nYou can output $\\texttt{Yes}$ and $\\texttt{No}$ in any case (for\nexample, strings $\\texttt{yEs}$, $\\texttt{yes}$, $\\texttt{Yes}$,\nand $\\texttt{YES}$ will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3 3\n1 1\n1 2 3\n2 3\n3 2\n1 3\n7 4\n1 1 2 2 3 3\n1 2 3 4 5 6 7\n3 5\n2 5\n3 7\n4 6\n5 4\n1 1 3 4\n2 3 4 5 1\n5 1\n4 5\n3 4\n2 3\n</pre></td>\n    <td><pre>YES\nYES\nNO\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the permutation $p_1, p_2, \\ldots, p_n$ after each\nmodification is $[1,3,2],[1,2,3],[3,2,1]$, respectively. The first two\npermutations are valid DFS orders; the third is not a DFS order.\n\nIn the second test case, the permutation $p_1, p_2, \\ldots, p_n$ after\neach modification is\n$[1,2,5,4,3,6,7],[1,3,5,4,2,6,7],[1,3,7,4,2,6,5],[1,3,7,6,2,4,5]$,\nrespectively."
    },
    {
        "problem_id": "2002E",
        "url": "https://codeforces.com/problemset/problem/2002/E",
        "title": "Cosmic Rays",
        "rating": 2300,
        "tags": [
            "brute force",
            "data structures",
            "dp"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Given an array of integers $s_1, s_2, \\ldots, s_l$, every second, cosmic\nrays will cause all $s_i$ such that $i=1$ or $s_i\\neq s_{i-1}$ to\nbe deleted simultaneously, and the remaining parts will be concatenated\ntogether in order to form the new array $s_1, s_2, \\ldots, s_{l'}$.\n\nDefine the strength of an array as the number of seconds it takes to become\nempty.\n\nYou are given an array of integers compressed in the form of $n$ pairs\nthat describe the array left to right. Each pair $(a_i,b_i)$ represents\n$a_i$ copies of $b_i$, i.e.\n$\\underbrace{b_i,b_i,\\cdots,b_i}_{a_i\\textrm{ times}}$.\n\nFor each $i=1,2,\\dots,n$, please find the strength of the sequence\ndescribed by the first $i$ pairs.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le\nn\\le3\\cdot10^5$) \u2014 the length of sequence $a$.\n\nThe next $n$ lines contain two integers each $a_i$, $b_i$ ($1\\le\na_i\\le10^9,0\\le b_i\\le n$) \u2014 the pairs which describe the sequence.\n\nIt is guaranteed that the sum of all $n$ does not exceed $3\\cdot10^5$.\n\nIt is guaranteed that for all $1\\le i<n$, $b_i\\neq b_{i+1}$ holds.",
        "output": "For each test case, print one line containing $n$ integers \u2014 the answer\nfor each prefix of pairs.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n4\n2 0\n1 1\n3 0\n5 1\n6\n4 6\n1 3\n4 6\n4 0\n7 6\n6 3\n7\n9 0\n7 1\n5 0\n7 1\n9 0\n1 1\n2 0\n10\n10 7\n4 9\n2 2\n7 9\n2 8\n8 5\n11 7\n15 5\n12 7\n4 0\n</pre></td>\n    <td><pre>2 2 4 5 \n4 4 7 7 10 10 \n9 9 9 9 9 9 10 \n10 10 10 10 10 10 12 15 15 15 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, for the prefix of length $4$, the changes will be\n$[0,0,1,0,0,0,1,1,1,1,1]\\rightarrow[0,0,0,1,1,1,1]\\rightarrow[0,0,1,1,1]\\rightarrow[0,1,1]\\rightarrow[1]\\rightarrow[]$,\nso the array becomes empty after $5$ seconds.\n\nIn the second test case, for the prefix of length $4$, the changes will be\n$[6,6,6,6,3,6,6,6,6,0,0,0,0]\\rightarrow[6,6,6,6,6,6,0,0,0]\\rightarrow[6,6,6,6,6,0,0]\\rightarrow[6,6,6,6,0]\\rightarrow[6,6,6]\\rightarrow[6,6]\\rightarrow[6]\\rightarrow[]$,\nso the array becomes empty after $7$ seconds."
    },
    {
        "problem_id": "2002F1",
        "url": "https://codeforces.com/problemset/problem/2002/F1",
        "title": "Court Blue (Easy Version)",
        "rating": 2600,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "math",
            "number theory"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "This is the easy version of the problem. In this version, $n=m$ and the\ntime limit is lower. You can make hacks only if both versions of the problem\nare solved.\n\nIn the court of the Blue King, Lelle and Flamm are having a performance match.\nThe match consists of several rounds. In each round, either Lelle or Flamm\nwins.\n\nLet $W_L$ and $W_F$ denote the number of wins of Lelle and Flamm,\nrespectively. The Blue King considers a match to be successful if and only if:\n\n  * after every round, $\\gcd(W_L,W_F)\\le 1$; \n  * at the end of the match, $W_L\\le n, W_F\\le m$. \n\nNote that $\\gcd(0,x)=\\gcd(x,0)=x$ for every non-negative integer $x$.\n\nLelle and Flamm can decide to stop the match whenever they want, and the final\nscore of the performance is $l \\cdot W_L + f \\cdot W_F$.\n\nPlease help Lelle and Flamm coordinate their wins and losses such that the\nperformance is successful, and the total score of the performance is\nmaximized.",
        "input": "The first line contains an integer $t$ ($1\\leq t \\leq 10^3$) \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains four integers $n$, $m$,\n$l$, $f$ ($2\\leq n\\leq m \\leq 2\\cdot 10^7$, $1\\leq l,f \\leq\n10^9$, $\\bf{n=m}$): $n$, $m$ gives the upper bound on the number\nof Lelle and Flamm's wins, $l$ and $f$ determine the final score of\nthe performance.\n\nUnusual additional constraint: it is guaranteed that, for each test, there are\nno pairs of test cases with the same pair of $n$, $m$.",
        "output": "For each test case, output a single integer \u2014 the maximum total score of a\nsuccessful performance.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n3 3 2 5\n4 4 1 4\n6 6 2 2\n7 7 2 3\n9 9 9 1\n2 2 1 4\n5 5 1 4\n8 8 6 7\n</pre></td>\n    <td><pre>19\n17\n18\n33\n86\n9\n24\n86\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n20000000 20000000 1341 331\n</pre></td>\n    <td><pre>33439999007\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n1984 1984 19 84\n9982 9982 44 35\n</pre></td>\n    <td><pre>204143\n788403\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, a possible performance is as follows:\n\n  * Flamm wins, $\\gcd(0,1)=1$. \n  * Lelle wins, $\\gcd(1,1)=1$. \n  * Flamm wins, $\\gcd(1,2)=1$. \n  * Flamm wins, $\\gcd(1,3)=1$. \n  * Lelle wins, $\\gcd(2,3)=1$. \n  * Lelle and Flamm agree to stop the match. \n\nThe final score is $2\\cdot2+3\\cdot5=19$.\n\nIn the third test case, a possible performance is as follows:\n\n  * Flamm wins, $\\gcd(0,1)=1$. \n  * Lelle wins, $\\gcd(1,1)=1$. \n  * Lelle wins, $\\gcd(2,1)=1$. \n  * Lelle wins, $\\gcd(3,1)=1$. \n  * Lelle wins, $\\gcd(4,1)=1$. \n  * Lelle wins, $\\gcd(5,1)=1$. \n  * Flamm wins, $\\gcd(5,2)=1$. \n  * Flamm wins, $\\gcd(5,3)=1$. \n  * Flamm wins, $\\gcd(5,4)=1$. \n  * Lelle and Flamm agree to stop the match. \n\nThe final score is $5\\cdot2+4\\cdot2=18$. Note that Lelle and Flamm can\nstop the match even if neither of them has $n$ wins."
    },
    {
        "problem_id": "2002F2",
        "url": "https://codeforces.com/problemset/problem/2002/F2",
        "title": "Court Blue (Hard Version)",
        "rating": 2800,
        "tags": [
            "brute force",
            "dp",
            "math",
            "number theory"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "This is the hard version of the problem. In this version, it is not guaranteed\nthat $n=m$, and the time limit is higher. You can make hacks only if both\nversions of the problem are solved.\n\nIn the court of the Blue King, Lelle and Flamm are having a performance match.\nThe match consists of several rounds. In each round, either Lelle or Flamm\nwins.\n\nLet $W_L$ and $W_F$ denote the number of wins of Lelle and Flamm,\nrespectively. The Blue King considers a match to be successful if and only if:\n\n  * after every round, $\\gcd(W_L,W_F)\\le 1$; \n  * at the end of the match, $W_L\\le n, W_F\\le m$. \n\nNote that $\\gcd(0,x)=\\gcd(x,0)=x$ for every non-negative integer $x$.\n\nLelle and Flamm can decide to stop the match whenever they want, and the final\nscore of the performance is $l \\cdot W_L + f \\cdot W_F$.\n\nPlease help Lelle and Flamm coordinate their wins and losses such that the\nperformance is successful, and the total score of the performance is\nmaximized.",
        "input": "The first line contains an integer $t$ ($1\\leq t \\leq 10^3$) \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains four integers $n$, $m$,\n$l$, $f$ ($2\\leq n\\leq m \\leq 2\\cdot 10^7$, $1\\leq l,f \\leq\n10^9$): $n$, $m$ give the upper bound on the number of Lelle and\nFlamm's wins, $l$ and $f$ determine the final score of the\nperformance.\n\nUnusual additional constraint: it is guaranteed that, for each test, there are\nno pairs of test cases with the same pair of $n$, $m$.",
        "output": "For each test case, output a single integer \u2014 the maximum total score of a\nsuccessful performance.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n3 4 2 5\n4 4 1 4\n6 6 2 2\n7 9 2 3\n8 9 9 1\n2 7 1 4\n5 9 1 4\n5 6 6 7\n</pre></td>\n    <td><pre>22\n17\n18\n37\n77\n30\n41\n59\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3082823 20000000 1341 331\n20000000 20000000 3 5\n</pre></td>\n    <td><pre>10754065643\n159999991\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n139 1293 193 412\n</pre></td>\n    <td><pre>559543\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, a possible performance is as follows:\n\n  * Flamm wins, $\\gcd(0,1)=1$. \n  * Lelle wins, $\\gcd(1,1)=1$. \n  * Flamm wins, $\\gcd(1,2)=1$. \n  * Flamm wins, $\\gcd(1,3)=1$. \n  * Flamm wins, $\\gcd(1,4)=1$. \n  * Lelle and Flamm agree to stop the match. \n\nThe final score is $1\\cdot2+4\\cdot5=22$."
    },
    {
        "problem_id": "2002G",
        "url": "https://codeforces.com/problemset/problem/2002/G",
        "title": "Lattice Optimizing",
        "rating": 3400,
        "tags": [
            "bitmasks",
            "brute force",
            "hashing",
            "meet-in-the-middle"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 7000,
        "memory_limit_mb": 1024,
        "description": "Consider a grid graph with $n$ rows and $n$ columns. Let the cell in\nrow $x$ and column $y$ be $(x,y)$. There exists a directed edge\nfrom $(x,y)$ to $(x+1,y)$, with non-negative integer value\n$d_{x,y}$, for all $1\\le x < n, 1\\le y \\le n$, and there also exists a\ndirected edge from $(x,y)$ to $(x,y+1)$, with non-negative integer\nvalue $r_{x,y}$, for all $1\\le x \\le n, 1\\le y < n$.\n\nInitially, you are at $(1,1)$, with an empty set $S$. You need to walk\nalong the edges and eventually reach $(n,n)$. Whenever you pass an edge,\nits value will be inserted into $S$. Please maximize the\nMEX$^{\\text{\u2217}}$ of $S$ when you reach $(n,n)$.\n\n$^{\\text{\u2217}}$The MEX (minimum excluded) of an array is the smallest non-\nnegative integer that does not belong to the array. For instance:\n\n  * The MEX of $[2,2,1]$ is $0$, because $0$ does not belong to the array. \n  * The MEX of $[3,1,0,1]$ is $2$, because $0$ and $1$ belong to the array, but $2$ does not. \n  * The MEX of $[0,3,1,2]$ is $4$, because $0, 1, 2$, and $3$ belong to the array, but $4$ does not.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le100$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le\nn\\le20$) \u2014 the number of rows and columns.\n\nEach of the next $n-1$ lines contains $n$ integers separated by single\nspaces \u2014 the matrix $d$ ($0\\le d_{x,y}\\le 2n-2$).\n\nEach of the next $n$ lines contains $n-1$ integers separated by single\nspaces \u2014 the matrix $r$ ($0\\le r_{x,y}\\le 2n-2$).\n\nIt is guaranteed that the sum of all $n^3$ does not exceed $8000$.",
        "output": "For each test case, print a single integer \u2014 the maximum MEX of $S$ when\nyou reach $(n,n)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3\n1 0 2\n0 1 3\n2 1\n0 3\n3 0\n3\n1 2 0\n0 1 2\n2 0\n1 2\n0 1\n</pre></td>\n    <td><pre>3\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n10\n16 7 3 15 9 17 1 15 9 0\n4 3 1 12 13 10 10 14 6 12\n3 1 3 9 5 16 0 12 7 12\n11 4 8 7 13 7 15 13 9 2\n2 3 9 9 4 12 17 7 10 15\n10 6 15 17 13 6 15 9 4 9\n13 3 3 14 1 2 10 10 12 16\n8 2 9 13 18 7 1 6 2 6\n15 12 2 6 0 0 13 3 7 17\n7 3 17 17 10 15 12 14 15\n4 3 3 17 3 13 11 16 6\n16 17 7 7 12 5 2 4 10\n18 9 9 3 5 9 1 16 7\n1 0 4 2 10 10 12 2 1\n4 14 15 16 15 5 8 4 18\n7 18 10 11 2 0 14 8 18\n2 17 6 0 9 6 13 5 11\n5 15 7 11 6 3 17 14 5\n1 3 16 16 13 1 0 13 11\n</pre></td>\n    <td><pre>14\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the grid graph and one of the optimal paths are as\nfollows:\n\n![](CDN_BASE_URL/70956fd41a5289db10b3b0bb41d0efae)\n\nIn the second test case, the grid graph and one of the optimal paths are as\nfollows:\n\n![](CDN_BASE_URL/c6a0ac2a80551ddd517e35658fa66438)"
    },
    {
        "problem_id": "2002H",
        "url": "https://codeforces.com/problemset/problem/2002/H",
        "title": "Counting 101",
        "rating": 3500,
        "tags": [
            "greedy"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 10100,
        "memory_limit_mb": 1010,
        "description": "It's been a long summer's day, with the constant chirping of cicadas and the\nheat which never seemed to end. Finally, it has drawn to a close. The showdown\nhas passed, the gates are open, and only a gentle breeze is left behind.\n\nYour predecessors had taken their final bow; it's your turn to take the stage.\n\nSorting through some notes that were left behind, you found a curious\nstatement named Problem 101:\n\n  * Given a positive integer sequence $a_1,a_2,\\ldots,a_n$, you can operate on it any number of times. In an operation, you choose three consecutive elements $a_i,a_{i+1},a_{i+2}$, and merge them into one element $\\max(a_i+1,a_{i+1},a_{i+2}+1)$. Please calculate the maximum number of operations you can do without creating an element greater than $m$. \n\nAfter some thought, you decided to propose the following problem, named\nCounting 101:\n\n  * Given $n$ and $m$. For each $k=0,1,\\ldots,\\left\\lfloor\\frac{n-1}{2}\\right\\rfloor$, please find the number of integer sequences $a_1,a_2,\\ldots,a_n$ with elements in $[1, m]$, such that when used as input for Problem 101, the answer is $k$. As the answer can be very large, please print it modulo $10^9+7$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1\\le t\\le10^3$). The description of the test cases\nfollows.\n\nThe only line of each test case contains two integers $n$, $m$\n($1\\le n\\le 130$, $1\\le m\\le 30$).",
        "output": "For each test case, output $\\left\\lfloor\\frac{n+1}{2}\\right\\rfloor$\nnumbers. The $i$-th number is the number of valid sequences such that when\nused as input for Problem 101, the answer is $i-1$, modulo $10^9+7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3 2\n10 10\n</pre></td>\n    <td><pre>6 2 \n1590121 23399118 382293180 213020758 379696760 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are $2^3=8$ candidate sequences. Among them,\nyou can operate on $[1,2,1]$ and $[1,1,1]$ once; you cannot operate on\nthe other $6$ sequences."
    },
    {
        "problem_id": "2003A",
        "url": "https://codeforces.com/problemset/problem/2003/A",
        "title": "Turtle and Good Strings",
        "rating": 800,
        "tags": [
            "greedy",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Turtle thinks a string $s$ is a good string if there exists a sequence of\nstrings $t_1, t_2, \\ldots, t_k$ ($k$ is an arbitrary integer) such\nthat:\n\n  * $k \\ge 2$. \n  * $s = t_1 + t_2 + \\ldots + t_k$, where $+$ represents the concatenation operation. For example, $\\texttt{abc} = \\texttt{a} + \\texttt{bc}$. \n  * For all $1 \\le i < j \\le k$, the first character of $t_i$ isn't equal to the last character of $t_j$. \n\nTurtle is given a string $s$ consisting of lowercase Latin letters. Please\ntell him whether the string $s$ is a good string!",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 100$) \u2014 the length of the string.\n\nThe second line of each test case contains a string $s$ of length $n$,\nconsisting of lowercase Latin letters.",
        "output": "For each test case, output \"YES\" if the string $s$ is a good string, and\n\"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\naa\n3\naba\n4\nabcb\n12\nabcabcabcabc\n</pre></td>\n    <td><pre>No\nnO\nYes\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the sequence of strings $\\texttt{a}, \\texttt{a}$\nsatisfies the condition $s = t_1 + t_2 + \\ldots + t_k$, but the first\ncharacter of $t_1$ is equal to the last character of $t_2$. It can be\nseen that there doesn't exist any sequence of strings which satisfies all of\nthe conditions, so the answer is \"NO\".\n\nIn the third test case, the sequence of strings $\\texttt{ab}, \\texttt{cb}$\nsatisfies all of the conditions.\n\nIn the fourth test case, the sequence of strings $\\texttt{abca},\n\\texttt{bcab}, \\texttt{cabc}$ satisfies all of the conditions."
    },
    {
        "problem_id": "2003B",
        "url": "https://codeforces.com/problemset/problem/2003/B",
        "title": "Turtle and Piggy Are Playing a Game 2",
        "rating": 800,
        "tags": [
            "games",
            "greedy",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Turtle and Piggy are playing a game on a sequence. They are given a sequence\n$a_1, a_2, \\ldots, a_n$, and Turtle goes first. Turtle and Piggy alternate\nin turns (so, Turtle does the first turn, Piggy does the second, Turtle does\nthe third, etc.).\n\nThe game goes as follows:\n\n  * Let the current length of the sequence be $m$. If $m = 1$, the game ends. \n  * If the game does not end and it's Turtle's turn, then Turtle must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $a_i$ to $\\max(a_i, a_{i + 1})$, and remove $a_{i + 1}$. \n  * If the game does not end and it's Piggy's turn, then Piggy must choose an integer $i$ such that $1 \\le i \\le m - 1$, set $a_i$ to $\\min(a_i, a_{i + 1})$, and remove $a_{i + 1}$. \n\nTurtle wants to maximize the value of $a_1$ in the end, while Piggy wants\nto minimize the value of $a_1$ in the end. Find the value of $a_1$ in\nthe end if both players play optimally.\n\nYou can refer to notes for further clarification.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 10^5$) \u2014 the length of the sequence.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 the elements of the sequence\n$a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single integer \u2014 the value of $a_1$ in the\nend if both players play optimally.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n1 2\n3\n1 1 2\n3\n1 2 3\n5\n3 1 2 2 3\n10\n10 2 5 2 7 9 2 5 10 7\n</pre></td>\n    <td><pre>2\n1\n2\n2\n7\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, initially $a = [1, 2]$. Turtle can only choose\n$i = 1$. Then he will set $a_1$ to $\\max(a_1, a_2) = 2$ and remove\n$a_2$. The sequence $a$ becomes $[2]$. Then the length of the\nsequence becomes $1$, and the game will end. The value of $a_1$ is\n$2$, so you should output $2$.\n\nIn the second test case, one of the possible game processes is as follows:\n\n  * Initially $a = [1, 1, 2]$. \n  * Turtle can choose $i = 2$. Then he will set $a_2$ to $\\max(a_2, a_3) = 2$ and remove $a_3$. The sequence $a$ will become $[1, 2]$. \n  * Piggy can choose $i = 1$. Then he will set $a_1$ to $\\min(a_1, a_2) = 1$ and remove $a_2$. The sequence $a$ will become $[1]$. \n  * The length of the sequence becomes $1$, so the game will end. The value of $a_1$ will be $1$ in the end. \n\nIn the fourth test case, one of the possible game processes is as follows:\n\n  * Initially $a = [3, 1, 2, 2, 3]$. \n  * Turtle can choose $i = 4$. Then he will set $a_4$ to $\\max(a_4, a_5) = 3$ and remove $a_5$. The sequence $a$ will become $[3, 1, 2, 3]$. \n  * Piggy can choose $i = 3$. Then he will set $a_3$ to $\\min(a_3, a_4) = 2$ and remove $a_4$. The sequence $a$ will become $[3, 1, 2]$. \n  * Turtle can choose $i = 2$. Then he will set $a_2$ to $\\max(a_2, a_3) = 2$ and remove $a_3$. The sequence $a$ will become $[3, 2]$. \n  * Piggy can choose $i = 1$. Then he will set $a_1$ to $\\min(a_1, a_2) = 2$ and remove $a_2$. The sequence $a$ will become $[2]$. \n  * The length of the sequence becomes $1$, so the game will end. The value of $a_1$ will be $2$ in the end."
    },
    {
        "problem_id": "2003C",
        "url": "https://codeforces.com/problemset/problem/2003/C",
        "title": "Turtle and Good Pairs",
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "greedy",
            "sortings",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Turtle gives you a string $s$, consisting of lowercase Latin letters.\n\nTurtle considers a pair of integers $(i, j)$ ($1 \\le i < j \\le n$) to\nbe a pleasant pair if and only if there exists an integer $k$ such that\n$i \\le k < j$ and both of the following two conditions hold:\n\n  * $s_k \\ne s_{k + 1}$; \n  * $s_k \\ne s_i$ or $s_{k + 1} \\ne s_j$. \n\nBesides, Turtle considers a pair of integers $(i, j)$ ($1 \\le i < j \\le\nn$) to be a good pair if and only if $s_i = s_j$ or $(i, j)$ is a\npleasant pair.\n\nTurtle wants to reorder the string $s$ so that the number of good pairs is\nmaximized. Please help him!",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the string.\n\nThe second line of each test case contains a string $s$ of length $n$,\nconsisting of lowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output the string $s$ after reordering so that the\nnumber of good pairs is maximized. If there are multiple answers, print any of\nthem.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3\nabc\n5\nedddf\n6\nturtle\n8\npppppppp\n10\ncodeforces\n</pre></td>\n    <td><pre>acb\nddedf\nurtlet\npppppppp\ncodeforces\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $(1, 3)$ is a good pair in the reordered string.\nIt can be seen that we can't reorder the string so that the number of good\npairs is greater than $1$. bac and cab can also be the answer.\n\nIn the second test case, $(1, 2)$, $(1, 4)$, $(1, 5)$, $(2,\n4)$, $(2, 5)$, $(3, 5)$ are good pairs in the reordered string.\nefddd can also be the answer."
    },
    {
        "problem_id": "2003D1",
        "url": "https://codeforces.com/problemset/problem/2003/D1",
        "title": "Turtle and a MEX Problem (Easy Version)",
        "rating": 1500,
        "tags": [
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "The two versions are different problems. In this version of the problem, you\ncan choose the same integer twice or more. You can make hacks only if both\nversions are solved.\n\nOne day, Turtle was playing with $n$ sequences. Let the length of the\n$i$-th sequence be $l_i$. Then the $i$-th sequence was $a_{i,\n1}, a_{i, 2}, \\ldots, a_{i, l_i}$.\n\nPiggy gave Turtle a problem to solve when Turtle was playing. The statement of\nthe problem was:\n\n  * There was a non-negative integer $x$ at first. Turtle would perform an arbitrary number (possibly zero) of operations on the integer. \n  * In each operation, Turtle could choose an integer $i$ such that $1 \\le i \\le n$, and set $x$ to $\\text{mex}^{\\dagger}(x, a_{i, 1}, a_{i, 2}, \\ldots, a_{i, l_i})$. \n  * Turtle was asked to find the answer, which was the maximum value of $x$ after performing an arbitrary number of operations. \n\nTurtle solved the above problem without difficulty. He defined $f(k)$ as\nthe answer to the above problem when the initial value of $x$ was $k$.\n\nThen Piggy gave Turtle a non-negative integer $m$ and asked Turtle to find\nthe value of $\\sum\\limits_{i = 0}^m f(i)$ (i.e., the value of $f(0) +\nf(1) + \\ldots + f(m)$). Unfortunately, he couldn't solve this problem.\nPlease help him!\n\n$^{\\dagger}\\text{mex}(c_1, c_2, \\ldots, c_k)$ is defined as the smallest\nnon-negative integer $x$ which does not occur in the sequence $c$. For\nexample, $\\text{mex}(2, 2, 0, 3)$ is $1$, $\\text{mex}(1, 2)$ is\n$0$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n, m$ ($1 \\le n\n\\le 2 \\cdot 10^5, 0 \\le m \\le 10^9$).\n\nEach of the following $n$ lines contains several integers. The first\ninteger $l_i$ ($1 \\le l_i \\le 2 \\cdot 10^5$) represents the length of\nthe $i$-th sequence, and the following $l_i$ integers $a_{i, 1},\na_{i, 2}, \\ldots, a_{i, l_i}$ ($0 \\le a_{i, j} \\le 10^9$) represent the\nelements of the $i$-th sequence.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$, and the sum of $\\sum l_i$ over all test cases does not\nexceed $2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the value of $\\sum\\limits_{i =\n0}^m f(i)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n3 4\n2 0 2\n3 2 3 3\n4 7 0 1 5\n3 4\n5 0 2 0 4 11\n1 1\n5 1 3 0 3 3\n2 50\n2 1 2\n2 1 2\n1 1\n7 1 2 4 1 4 9 5\n4 114514\n2 2 2\n5 7 3 6 0 3\n3 0 1 1\n5 0 9 2 1 5\n5 1919810\n1 2\n2 324003 0\n3 1416324 2 1460728\n4 1312631 2 0 1415195\n5 1223554 192248 2 1492515 725556\n</pre></td>\n    <td><pre>16\n20\n1281\n6\n6556785365\n1842836177961\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, when $x$ is initially $2$, Turtle can choose\n$i = 3$ and set $x$ to $\\text{mex}(x, a_{3, 1}, a_{3, 2}, a_{3, 3},\na_{3, 4}) = \\text{mex}(2, 7, 0, 1, 5) = 3$. It can be proved that Turtle\ncan't make the value of $x$ greater than $3$, so $f(2) = 3$.\n\nIt can be seen that $f(0) = 3$, $f(1) = 3$, $f(2) = 3$, $f(3) =\n3$, and $f(4) = 4$. So $f(0) + f(1) + f(2) + f(3) + f(4) = 3 + 3 + 3 +\n3 + 4 = 16$.\n\nIn the second test case, when $x$ is initially $1$, Turtle can choose\n$i = 3$ and set $x$ to $\\text{mex}(x, a_{3, 1}, a_{3, 2}, a_{3, 3},\na_{3, 4}, a_{3, 5}) = \\text{mex}(1, 1, 3, 0, 3, 3) = 2$, and choose $i =\n3$ and set $x$ to $\\text{mex}(x, a_{3, 1}, a_{3, 2}, a_{3, 3}, a_{3,\n4}, a_{3, 5}) = \\text{mex}(2, 1, 3, 0, 3, 3) = 4$. It can be proved that\nTurtle can't make the value of $x$ greater than $4$, so $f(1) =\n4$.\n\nIt can be seen that $f(0) = 4$, $f(1) = 4$, $f(2) = 4$, $f(3) =\n4$, and $f(4) = 4$. So $f(0) + f(1) + f(2) + f(3) + f(4) = 4 + 4 + 4 +\n4 + 4 = 20$.\n\nIn the fourth test case, it can be seen that $f(0) = 3$ and $f(1) =\n3$. So $f(0) + f(1) = 3 + 3 = 6$."
    },
    {
        "problem_id": "2003D2",
        "url": "https://codeforces.com/problemset/problem/2003/D2",
        "title": "Turtle and a MEX Problem (Hard Version)",
        "rating": 2100,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "The two versions are different problems. In this version of the problem, you\ncan't choose the same integer twice or more. You can make hacks only if both\nversions are solved.\n\nOne day, Turtle was playing with $n$ sequences. Let the length of the\n$i$-th sequence be $l_i$. Then the $i$-th sequence was $a_{i,\n1}, a_{i, 2}, \\ldots, a_{i, l_i}$.\n\nPiggy gave Turtle a problem to solve when Turtle was playing. The statement of\nthe problem was:\n\n  * There was a non-negative integer $x$ at first. Turtle would perform an arbitrary number (possibly zero) of operations on the integer. \n  * In each operation, Turtle could choose an integer $i$ such that $1 \\le i \\le n$ and $i$ wasn't chosen before, and set $x$ to $\\text{mex}^{\\dagger}(x, a_{i, 1}, a_{i, 2}, \\ldots, a_{i, l_i})$. \n  * Turtle was asked to find the answer, which was the maximum value of $x$ after performing an arbitrary number of operations. \n\nTurtle solved the above problem without difficulty. He defined $f(k)$ as\nthe answer to the above problem when the initial value of $x$ was $k$.\n\nThen Piggy gave Turtle a non-negative integer $m$ and asked Turtle to find\nthe value of $\\sum\\limits_{i = 0}^m f(i)$ (i.e., the value of $f(0) +\nf(1) + \\ldots + f(m)$). Unfortunately, he couldn't solve this problem.\nPlease help him!\n\n$^{\\dagger}\\text{mex}(c_1, c_2, \\ldots, c_k)$ is defined as the smallest\nnon-negative integer $x$ which does not occur in the sequence $c$. For\nexample, $\\text{mex}(2, 2, 0, 3)$ is $1$, $\\text{mex}(1, 2)$ is\n$0$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n, m$ ($1 \\le n\n\\le 2 \\cdot 10^5, 0 \\le m \\le 10^9$).\n\nEach of the following $n$ lines contains several integers. The first\ninteger $l_i$ ($1 \\le l_i \\le 2 \\cdot 10^5$) represents the length of\nthe $i$-th sequence, and the following $l_i$ integers $a_{i, 1},\na_{i, 2}, \\ldots, a_{i, l_i}$ ($0 \\le a_{i, j} \\le 10^9$) represent the\nelements of the $i$-th sequence.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$ and the sum of $\\sum l_i$ over all test cases does not\nexceed $2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the value of $\\sum\\limits_{i =\n0}^m f(i)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n3 4\n2 0 2\n3 2 3 3\n4 7 0 1 5\n3 4\n5 0 2 0 4 11\n1 1\n5 1 3 0 3 3\n2 50\n2 1 2\n2 1 2\n1 1\n7 1 2 4 1 4 9 5\n4 114514\n2 2 2\n5 7 3 6 0 3\n3 0 1 1\n5 0 9 2 1 5\n5 1919810\n1 2\n2 324003 0\n3 1416324 2 1460728\n4 1312631 2 0 1415195\n5 1223554 192248 2 1492515 725556\n</pre></td>\n    <td><pre>16\n18\n1281\n4\n6556785365\n1842836177961\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, when $x$ is initially $2$, Turtle can choose\n$i = 3$ and set $x$ to $\\text{mex}(x, a_{3, 1}, a_{3, 2}, a_{3, 3},\na_{3, 4}) = \\text{mex}(2, 7, 0, 1, 5) = 3$. It can be proved that Turtle\ncan't make the value of $x$ greater than $3$, so $f(2) = 3$.\n\nIt can be seen that $f(0) = 3$, $f(1) = 3$, $f(2) = 3$, $f(3) =\n3$, and $f(4) = 4$. So $f(0) + f(1) + f(2) + f(3) + f(4) = 3 + 3 + 3 +\n3 + 4 = 16$.\n\nIn the second test case, when $x$ is initially $1$, Turtle can choose\n$i = 1$ and set $x$ to $\\text{mex}(x, a_{1, 1}, a_{1, 2}, a_{1, 3},\na_{1, 4}, a_{1, 5}) = \\text{mex}(1, 0, 2, 0, 4, 11) = 3$. It can be proved\nthat Turtle can't make the value of $x$ greater than $3$, so $f(1) =\n3$.\n\nIt can be seen that $f(0) = 4$, $f(1) = 3$, $f(2) = 4$, $f(3) =\n3$, and $f(4) = 4$. So $f(0) + f(1) + f(2) + f(3) + f(4) = 4 + 3 + 4 +\n3 + 4 = 18$.\n\nIn the fourth test case, it can be seen that $f(0) = 3$ and $f(1) =\n1$. So $f(0) + f(1) = 3 + 1 = 4$."
    },
    {
        "problem_id": "2003E1",
        "url": "https://codeforces.com/problemset/problem/2003/E1",
        "title": "Turtle and Inversions (Easy Version)",
        "rating": 2600,
        "tags": [
            "brute force",
            "divide and conquer",
            "dp",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "This is an easy version of this problem. The differences between the versions\nare the constraint on $m$ and $r_i < l_{i + 1}$ holds for each $i$\nfrom $1$ to $m - 1$ in the easy version. You can make hacks only if\nboth versions of the problem are solved.\n\nTurtle gives you $m$ intervals $[l_1, r_1], [l_2, r_2], \\ldots, [l_m,\nr_m]$. He thinks that a permutation $p$ is interesting if there exists\nan integer $k_i$ for every interval ($l_i \\le k_i < r_i$), and if he\nlets $a_i = \\max\\limits_{j = l_i}^{k_i} p_j, b_i = \\min\\limits_{j = k_i +\n1}^{r_i} p_j$ for every integer $i$ from $1$ to $m$, the\nfollowing condition holds:\n\n$$\\max\\limits_{i = 1}^m a_i < \\min\\limits_{i = 1}^m b_i$$\n\nTurtle wants you to calculate the maximum number of inversions of all\ninteresting permutations of length $n$, or tell him if there is no\ninteresting permutation.\n\nAn inversion of a permutation $p$ is a pair of integers $(i, j)$ ($1\n\\le i < j \\le n$) such that $p_i > p_j$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n, m$ ($2 \\le n\n\\le 5 \\cdot 10^3, 0 \\le m \\le \\frac{n}{2}$) \u2014 the length of the permutation\nand the number of intervals.\n\nThe $i$-th of the following $m$ lines contains two integers $l_i,\nr_i$ ($1 \\le l_i < r_i \\le n$) \u2014 the $i$-th interval.\n\nAdditional constraint on the input in this version: $r_i < l_{i + 1}$\nholds for each $i$ from $1$ to $m - 1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^3$.",
        "output": "For each test case, if there is no interesting permutation, output a single\ninteger $-1$.\n\nOtherwise, output a single integer \u2014 the maximum number of inversions.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2 0\n2 1\n1 2\n5 1\n2 4\n8 2\n1 4\n6 8\n7 2\n1 3\n4 7\n7 3\n1 2\n3 4\n5 6\n</pre></td>\n    <td><pre>1\n0\n8\n21\n15\n15\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the third test case, the interesting permutation with the maximum number of\ninversions is $[5, 2, 4, 3, 1]$.\n\nIn the fourth test case, the interesting permutation with the maximum number\nof inversions is $[4, 8, 7, 6, 3, 2, 1, 5]$. In this case, we can let\n$[k_1, k_2] = [1, 7]$.\n\nIn the fifth test case, the interesting permutation with the maximum number of\ninversions is $[4, 7, 6, 3, 2, 1, 5]$.\n\nIn the sixth test case, the interesting permutation with the maximum number of\ninversions is $[4, 7, 3, 6, 2, 5, 1]$."
    },
    {
        "problem_id": "2003E2",
        "url": "https://codeforces.com/problemset/problem/2003/E2",
        "title": "Turtle and Inversions (Hard Version)",
        "rating": 2700,
        "tags": [
            "brute force",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "math",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "This is a hard version of this problem. The differences between the versions\nare the constraint on $m$ and $r_i < l_{i + 1}$ holds for each $i$\nfrom $1$ to $m - 1$ in the easy version. You can make hacks only if\nboth versions of the problem are solved.\n\nTurtle gives you $m$ intervals $[l_1, r_1], [l_2, r_2], \\ldots, [l_m,\nr_m]$. He thinks that a permutation $p$ is interesting if there exists\nan integer $k_i$ for every interval ($l_i \\le k_i < r_i$), and if he\nlets $a_i = \\max\\limits_{j = l_i}^{k_i} p_j, b_i = \\min\\limits_{j = k_i +\n1}^{r_i} p_j$ for every integer $i$ from $1$ to $m$, the\nfollowing condition holds:\n\n$$\\max\\limits_{i = 1}^m a_i < \\min\\limits_{i = 1}^m b_i$$\n\nTurtle wants you to calculate the maximum number of inversions of all\ninteresting permutations of length $n$, or tell him if there is no\ninteresting permutation.\n\nAn inversion of a permutation $p$ is a pair of integers $(i, j)$ ($1\n\\le i < j \\le n$) such that $p_i > p_j$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n, m$ ($2 \\le n\n\\le 5 \\cdot 10^3, 0 \\le m \\le 5 \\cdot 10^3$) \u2014 the length of the permutation\nand the number of intervals.\n\nThe $i$-th of the following $m$ lines contains two integers $l_i,\nr_i$ ($1 \\le l_i < r_i \\le n$) \u2014 the $i$-th interval. Note that\nthere may exist identical intervals (i.e., there may exist two different\nindices $i, j$ such that $l_i = l_j$ and $r_i = r_j$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^3$ and the sum of $m$ over all test cases does not exceed\n$5 \\cdot 10^3$.",
        "output": "For each test case, if there is no interesting permutation, output a single\ninteger $-1$.\n\nOtherwise, output a single integer \u2014 the maximum number of inversions.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n2 0\n2 1\n1 2\n5 1\n2 4\n8 3\n1 4\n2 5\n7 8\n7 2\n1 4\n4 7\n7 3\n1 2\n1 7\n3 7\n7 4\n1 3\n4 7\n1 3\n4 7\n7 3\n1 2\n3 4\n5 6\n</pre></td>\n    <td><pre>1\n0\n8\n18\n-1\n-1\n15\n15\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the third test case, the interesting permutation with the maximum number of\ninversions is $[5, 2, 4, 3, 1]$.\n\nIn the fourth test case, the interesting permutation with the maximum number\nof inversions is $[4, 3, 8, 7, 6, 2, 1, 5]$. In this case, we can let\n$[k_1, k_2, k_3] = [2, 2, 7]$.\n\nIn the fifth and the sixth test case, it can be proven that there is no\ninteresting permutation.\n\nIn the seventh test case, the interesting permutation with the maximum number\nof inversions is $[4, 7, 6, 3, 2, 1, 5]$. In this case, we can let\n$[k_1, k_2, k_3, k_4] = [1, 6, 1, 6]$.\n\nIn the eighth test case, the interesting permutation with the maximum number\nof inversions is $[4, 7, 3, 6, 2, 5, 1]$."
    },
    {
        "problem_id": "2003F",
        "url": "https://codeforces.com/problemset/problem/2003/F",
        "title": "Turtle and Three Sequences",
        "rating": 2800,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "math",
            "probabilities",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Piggy gives Turtle three sequences $a_1, a_2, \\ldots, a_n$, $b_1, b_2,\n\\ldots, b_n$, and $c_1, c_2, \\ldots, c_n$.\n\nTurtle will choose a subsequence of $1, 2, \\ldots, n$ of length $m$,\nlet it be $p_1, p_2, \\ldots, p_m$. The subsequence should satisfy the\nfollowing conditions:\n\n  * $a_{p_1} \\le a_{p_2} \\le \\cdots \\le a_{p_m}$; \n  * All $b_{p_i}$ for all indices $i$ are pairwise distinct, i.e., there don't exist two different indices $i$, $j$ such that $b_{p_i} = b_{p_j}$. \n\nHelp him find the maximum value of $\\sum\\limits_{i = 1}^m c_{p_i}$, or\ntell him that it is impossible to choose a subsequence of length $m$ that\nsatisfies the conditions above.\n\nRecall that a sequence $a$ is a subsequence of a sequence $b$ if\n$a$ can be obtained from $b$ by the deletion of several (possibly,\nzero or all) elements.",
        "input": "The first line contains two integers $n$ and $m$ ($1 \\le n \\le\n3000$, $1 \\le m \\le 5$) \u2014 the lengths of the three sequences and the\nrequired length of the subsequence.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\le a_i \\le n$) \u2014 the elements of the sequence $a$.\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le\nb_i \\le n$) \u2014 the elements of the sequence $b$.\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1\n\\le c_i \\le 10^4$) \u2014 the elements of the sequence $c$.",
        "output": "Output a single integer \u2014 the maximum value of $\\sum\\limits_{i = 1}^m\nc_{p_i}$. If it is impossible to choose a subsequence of length $m$ that\nsatisfies the conditions above, output $-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4 2\n2 3 4 2\n1 3 3 2\n1 4 2 3\n</pre></td>\n    <td><pre>5\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7 3\n1 4 5 2 3 6 7\n1 2 2 1 1 3 2\n1 5 6 7 3 2 4\n</pre></td>\n    <td><pre>13\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5 3\n1 2 3 4 5\n1 1 2 1 2\n5 4 3 2 1\n</pre></td>\n    <td><pre>-1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, we can choose $p = [1, 2]$, then $c_{p_1} +\nc_{p_2} = 1 + 4 = 5$. We can't choose $p = [2, 4]$ since $a_2 >\na_4$, violating the first condition. We can't choose $p = [2, 3]$ either\nsince $b_2 = b_3$, violating the second condition. We can choose $p =\n[1, 4]$, but $c_1 + c_4 = 4$, which isn't maximum.\n\nIn the second example, we can choose $p = [4, 6, 7]$.\n\nIn the third example, it is impossible to choose a subsequence of length\n$3$ that satisfies both of the conditions."
    },
    {
        "problem_id": "2004A",
        "url": "https://codeforces.com/problemset/problem/2004/A",
        "title": "Closest Point",
        "rating": 800,
        "tags": [
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Consider a set of points on a line. The distance between two points $i$\nand $j$ is $|i - j|$.\n\nThe point $i$ from the set is the closest to the point $j$ from the\nset, if there is no other point $k$ in the set such that the distance from\n$j$ to $k$ is strictly less than the distance from $j$ to $i$.\nIn other words, all other points from the set have distance to $j$ greater\nor equal to $|i - j|$.\n\nFor example, consider a set of points $\\\\{1, 3, 5, 8\\\\}$:\n\n  * for the point $1$, the closest point is $3$ (other points have distance greater than $|1-3| = 2$); \n  * for the point $3$, there are two closest points: $1$ and $5$; \n  * for the point $5$, the closest point is $3$ (but not $8$, since its distance is greater than $|3-5|$); \n  * for the point $8$, the closest point is $5$. \n\nYou are given a set of points. You have to add an integer point into this set\nin such a way that it is different from every existing point in the set, and\nit becomes the closest point to every point in the set. Is it possible?",
        "input": "The first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the\nnumber of test cases.\n\nEach test case consists of two lines:\n\n  * the first line contains one integer $n$ ($2 \\le n \\le 40$) \u2014 the number of points in the set; \n  * the second line contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_1 < x_2 < \\dots < x_n \\le 100$) \u2014 the points from the set.",
        "output": "For each test case, print YES if it is possible to add a new point according\nto the conditions from the statement. Otherwise, print NO.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2\n3 8\n2\n5 6\n6\n1 2 3 4 5 10\n</pre></td>\n    <td><pre>YES\nNO\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, the point $7$ will be the closest to both $3$\nand $8$.\n\nIn the second example, it is impossible to add an integer point so that it\nbecomes the closest to both $5$ and $6$, and is different from both of\nthem."
    },
    {
        "problem_id": "2004B",
        "url": "https://codeforces.com/problemset/problem/2004/B",
        "title": "Game with Doors",
        "rating": 1000,
        "tags": [
            "brute force",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "There are $100$ rooms arranged in a row and $99$ doors between them;\nthe $i$-th door connects rooms $i$ and $i+1$. Each door can be\neither locked or unlocked. Initially, all doors are unlocked.\n\nWe say that room $x$ is reachable from room $y$ if all doors between\nthem are unlocked.\n\nYou know that:\n\n  * Alice is in some room from the segment $[l, r]$; \n  * Bob is in some room from the segment $[L, R]$; \n  * Alice and Bob are in different rooms. \n\nHowever, you don't know the exact rooms they are in.\n\nYou don't want Alice and Bob to be able to reach each other, so you are going\nto lock some doors to prevent that. What's the smallest number of doors you\nhave to lock so that Alice and Bob cannot meet, regardless of their starting\npositions inside the given segments?",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $l$ and $r$\n($1 \\le l < r \\le 100$) \u2014 the bounds of the segment of rooms where Alice\nis located.\n\nThe second line of each test case contains two integers $L$ and $R$\n($1 \\le L < R \\le 100$) \u2014 the bounds of the segment of rooms where Bob is\nlocated.",
        "output": "For each test case, print a single integer \u2014 the smallest number of doors you\nhave to lock so that Alice and Bob cannot meet, regardless of their starting\npositions inside the given segments.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 2\n3 4\n2 5\n2 5\n3 7\n6 7\n4 5\n2 8\n</pre></td>\n    <td><pre>1\n3\n2\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it is sufficient to lock the door between rooms\n$2$ and $3$.\n\nIn the second test case, the following doors have to be locked: $(2,3)$,\n$(3,4)$, $(4,5)$.\n\nIn the third test case, the following doors have to be locked: $(5, 6)$\nand $(6,7)$."
    },
    {
        "problem_id": "2004C",
        "url": "https://codeforces.com/problemset/problem/2004/C",
        "title": "Splitting Items",
        "rating": 1100,
        "tags": [
            "games",
            "greedy",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alice and Bob have $n$ items they'd like to split between them, so they\ndecided to play a game. All items have a cost, and the $i$-th item costs\n$a_i$. Players move in turns starting from Alice.\n\nIn each turn, the player chooses one of the remaining items and takes it. The\ngame goes on until no items are left.\n\nLet's say that $A$ is the total cost of items taken by Alice and $B$\nis the total cost of Bob's items. The resulting score of the game then will be\nequal to $A - B$.\n\nAlice wants to maximize the score, while Bob wants to minimize it. Both Alice\nand Bob will play optimally.\n\nBut the game will take place tomorrow, so today Bob can modify the costs a\nlittle. He can increase the costs $a_i$ of several (possibly none or all)\nitems by an integer value (possibly, by the same value or by different values\nfor each item). However, the total increase must be less than or equal to\n$k$. Otherwise, Alice may suspect something. Note that Bob can't decrease\ncosts, only increase.\n\nWhat is the minimum possible score Bob can achieve?",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 5000$) \u2014\nthe number of test cases. Then $t$ cases follow.\n\nThe first line of each test case contains two integers $n$ and $k$\n($2 \\le n \\le 2 \\cdot 10^5$; $0 \\le k \\le 10^9$) \u2014 the number of items\nand the maximum total increase Bob can make.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the initial costs of the items.\n\nIt's guaranteed that the sum of $n$ over all test cases doesn't exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, print a single integer \u2014 the minimum possible score $A -\nB$ after Bob increases the costs of several (possibly none or all) items.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2 5\n1 10\n3 0\n10 15 12\n4 6\n3 1 2 4\n2 4\n6 9\n</pre></td>\n    <td><pre>4\n13\n0\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Bob can increase $a_1$ by $5$, making costs\nequal to $[6, 10]$. Tomorrow, Alice will take $10$ and Bob will take\n$6$. The total score will be equal to $10 - 6 = 4$, and it's the\nminimum possible.\n\nIn the second test case, Bob can't change costs. So the score will be equal to\n$(15 + 10) - 12 = 13$, since Alice will take $15$, Bob will take\n$12$, and Alice \u2014 $10$.\n\nIn the third test case, Bob, for example, can increase $a_1$ by $1$,\n$a_2$ by $3$, and $a_3$ by $2$. The total change is equal to\n$1 + 3 + 2 \\le 6$ and costs will be equal to $[4, 4, 4, 4]$.\nObviously, the score will be equal to $(4 + 4) - (4 + 4) = 0$.\n\nIn the fourth test case, Bob can increase $a_1$ by $3$, making costs\nequal to $[9, 9]$. The score will be equal to $9 - 9 = 0$."
    },
    {
        "problem_id": "2004D",
        "url": "https://codeforces.com/problemset/problem/2004/D",
        "title": "Colored Portals",
        "rating": 1600,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "graphs",
            "greedy",
            "implementation",
            "shortest paths"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "There are $n$ cities located on a straight line. The cities are numbered\nfrom $1$ to $n$.\n\nPortals are used to move between cities. There are $4$ colors of portals:\nblue, green, red, and yellow. Each city has portals of two different colors.\nYou can move from city $i$ to city $j$ if they have portals of the\nsame color (for example, you can move between a \"blue-red\" city and a \"blue-\ngreen\" city). This movement costs $|i-j|$ coins.\n\nYour task is to answer $q$ independent queries: calculate the minimum cost\nto move from city $x$ to city $y$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$\n($1 \\le n, q \\le 2 \\cdot 10^5$) \u2014 the number of cities and the number of\nqueries, respectively.\n\nThe second line contains $n$ strings of the following types: BG, BR, BY,\nGR, GY, or RY; the $i$-th of them describes the portals located in the\n$i$-th city; the symbol B indicates that there is a blue portal in the\ncity, G \u2014 green, R \u2014 red, and Y \u2014 yellow.\n\nThe $j$-th of the next $q$ lines contains two integers $x_j$ and\n$y_j$ ($1 \\le x_j, y_j \\le n$) \u2014 the description of the $j$-th\nquery.\n\nAdditional constraints on the input:\n\n  * the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$; \n  * the sum of $q$ over all test cases does not exceed $2 \\cdot 10^5$.",
        "output": "For each query, print a single integer \u2014 the minimum cost to move from city\n$x$ to city $y$ (or $-1$ if it is impossible).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n4 5\nBR BR GY GR\n1 2\n3 1\n4 4\n1 4\n4 2\n2 1\nBG RY\n1 2\n</pre></td>\n    <td><pre>1\n4\n0\n3\n2\n-1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2004E",
        "url": "https://codeforces.com/problemset/problem/2004/E",
        "title": "Not a Nim Problem",
        "rating": 2100,
        "tags": [
            "brute force",
            "games",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Two players, Alice and Bob, are playing a game. They have $n$ piles of\nstones, with the $i$-th pile initially containing $a_i$ stones.\n\nOn their turn, a player can choose any pile of stones and take any positive\nnumber of stones from it, with one condition:\n\n  * let the current number of stones in the pile be $x$. It is not allowed to take from the pile a number of stones $y$ such that the greatest common divisor of $x$ and $y$ is not equal to $1$. \n\nThe player who cannot make a move loses. Both players play optimally (that is,\nif a player has a strategy that allows them to win, no matter how the opponent\nresponds, they will win). Alice goes first.\n\nDetermine who will win.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nEach test case consists of two lines:\n\n  * the first line contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$); \n  * the second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^7$). \n\nAdditional constraint on the input: the sum of $n$ across all test cases\ndoes not exceed $3 \\cdot 10^5$.",
        "output": "For each test case, output Alice if Alice wins, or Bob if Bob wins.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n3 2 9\n4\n3 3 6 1\n5\n1 2 3 4 5\n</pre></td>\n    <td><pre>Bob\nAlice\nBob\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2004F",
        "url": "https://codeforces.com/problemset/problem/2004/F",
        "title": "Make a Palindrome",
        "rating": 2600,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 512,
        "description": "You are given an array $a$ consisting of $n$ integers.\n\nLet the function $f(b)$ return the minimum number of operations needed to\nmake an array $b$ a palindrome. The operations you can make are:\n\n  * choose two adjacent elements $b_i$ and $b_{i+1}$, remove them, and replace them with a single element equal to $(b_i + b_{i + 1})$; \n  * or choose an element $b_i > 1$, remove it, and replace it with two positive integers $x$ and $y$ ($x > 0$ and $y > 0$) such that $x + y = b_i$. \n\nFor example, from an array $b=[2, 1, 3]$, you can obtain the following\narrays in one operation: $[1, 1, 1, 3]$, $[2, 1, 1, 2]$, $[3, 3]$,\n$[2, 4]$, or $[2, 1, 2, 1]$.\n\nCalculate $\\displaystyle \\left(\\sum_{1 \\le l \\le r \\le\nn}{f(a[l..r])}\\right)$, where $a[l..r]$ is the subarray of $a$ from\nindex $l$ to index $r$, inclusive. In other words, find the sum of the\nvalues of the function $f$ for all subarrays of the array $a$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 1000$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le\na_i \\le 10^5$).\n\nAdditional constraint on the input: the sum of $n$ over all test cases\ndoes not exceed $2000$.",
        "output": "For each test case, print a single integer \u2014 the sum of the values of the\nfunction $f$ for all subarrays of the array $a$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n2 1 3\n4\n1 1 1 1\n5\n4 2 3 1 5\n4\n1 2 1 2\n</pre></td>\n    <td><pre>3\n0\n14\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2004G",
        "url": "https://codeforces.com/problemset/problem/2004/G",
        "title": "Substring Compression",
        "rating": 3200,
        "tags": [
            "data structures",
            "dp",
            "matrices"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 1024,
        "description": "Let's define the operation of compressing a string $t$, consisting of at\nleast $2$ digits from $1$ to $9$, as follows:\n\n  * split it into an even number of non-empty substrings \u2014 let these substrings be $t_1, t_2, \\dots, t_m$ (so, $t = t_1 + t_2 + \\dots + t_m$, where $+$ is the concatenation operation); \n  * write the string $t_2$ $t_1$ times, then the string $t_4$ $t_3$ times, and so on. \n\nFor example, for a string \"12345\", one could do the following: split it into\n(\"1\", \"23\", \"4\", \"5\"), and write \"235555\".\n\nLet the function $f(t)$ for a string $t$ return the minimum length of\nthe string that can be obtained as a result of that process.\n\nYou are given a string $s$, consisting of $n$ digits from $1$ to\n$9$, and an integer $k$. Calculate the value of the function $f$\nfor all contiguous substrings of $s$ of length exactly $k$.",
        "input": "The first line contains two integers $n$ and $k$ ($2 \\le k \\le n \\le\n2 \\cdot 10^5$).\n\nThe second line contains the string $s$ ($|s| = n$), consisting only\nof digits from $1$ to $9$.",
        "output": "Output $n - k + 1$ integers \u2014 $f(s_{1,k}), f(s_{2,k+1}), \\dots, f(s_{n -\nk + 1, n})$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4 4\n5999\n</pre></td>\n    <td><pre>14 \n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10 3\n1111111111\n</pre></td>\n    <td><pre>2 2 2 2 2 2 2 2 \n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>11 4\n49998641312\n</pre></td>\n    <td><pre>12 18 17 15 12 7 7 2 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2005A",
        "url": "https://codeforces.com/problemset/problem/2005/A",
        "title": "Simple Palindrome",
        "rating": 900,
        "tags": [
            "combinatorics",
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Narek has to spend 2 hours with some 2-year-old kids at the kindergarten. He\nwants to teach them competitive programming, and their first lesson is about\npalindromes.\n\nNarek found out that the kids only know the vowels of the English alphabet\n(the letters $\\mathtt{a}$, $\\mathtt{e}$, $\\mathtt{i}$,\n$\\mathtt{o}$, and $\\mathtt{u}$), so Narek needs to make a string that\nconsists of vowels only. After making the string, he'll ask the kids to count\nthe number of subsequences that are palindromes. Narek wants to keep it\nsimple, so he's looking for a string such that the amount of palindrome\nsubsequences is minimal.\n\nHelp Narek find a string of length $n$, consisting of lowercase English\nvowels only (letters $\\mathtt{a}$, $\\mathtt{e}$, $\\mathtt{i}$,\n$\\mathtt{o}$, and $\\mathtt{u}$), which minimizes the amount of\npalindrome$^{\\dagger}$ subsequences$^{\\ddagger}$ in it.\n\n$^{\\dagger}$ A string is called a palindrome if it reads the same from\nleft to right and from right to left.\n\n$^{\\ddagger}$ String $t$ is a subsequence of string $s$ if $t$\ncan be obtained from $s$ by removing several (possibly, zero or all)\ncharacters from $s$ and concatenating the remaining ones, without changing\ntheir order. For example, $\\mathtt{odocs}$ is a subsequence of\n$\\texttt{c}{\\color{red}{\\texttt{od}}}\\texttt{ef}{\\color{red}{\\texttt{o}}}\\texttt{r}{\\color{red}{\\texttt{c}}}\\texttt{e}{\\color{red}{\\texttt{s}}}$.",
        "input": "The first line of the input contains a single integer $t$ ($1 \\le t \\le\n100$) \u2014 the number of test cases. Subsequently, the description of each test\ncase follows.\n\nThe only line of each test case contains a single integer $n$ ($1 \\le n\n\\le 100$) \u2014 the size of the string.",
        "output": "For each test case, output any string of length $n$ that satisfies the\nabove conditions.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2\n3\n6\n</pre></td>\n    <td><pre>uo\niae\noeiiua\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, $\\texttt{uo}$ has only three palindrome\nsubsequences: $\\texttt{u}$, $\\texttt{o}$, and the empty string. It can\nbe shown that there is no better answer.\n\nIn the third example, $\\texttt{oeiiua}$ has only eight palindrome\nsubsequences: $\\texttt{o}$, $\\texttt{e}$, $\\texttt{i}$,\n$\\texttt{i}$, $\\texttt{u}$, $\\texttt{a}$, $\\texttt{ii}$, and\nthe empty string. It can be shown that there is no better answer."
    },
    {
        "problem_id": "2005B1",
        "url": "https://codeforces.com/problemset/problem/2005/B1",
        "title": "The Strict Teacher (Easy Version)",
        "rating": 1000,
        "tags": [
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. The only differences between the two\nversions are the constraints on $m$ and $q$. In this version,\n$m=2$ and $q=1$. You can make hacks only if both versions of the\nproblem are solved.\n\nNarek and Tsovak were busy preparing this round, so they have not managed to\ndo their homework and decided to steal David's homework. Their strict teacher\nnoticed that David has no homework and now wants to punish him. She hires\nother teachers to help her catch David. And now $m$ teachers together are\nchasing him. Luckily, the classroom is big, so David has many places to hide.\n\nThe classroom can be represented as a one-dimensional line with cells from\n$1$ to $n$, inclusive.\n\nAt the start, all $m$ teachers and David are in distinct cells. Then they\nmake moves. During each move\n\n  * David goes to an adjacent cell or stays at the current one. \n  * Then, each of the $m$ teachers simultaneously goes to an adjacent cell or stays at the current one. \n\nThis continues until David is caught. David is caught if any of the teachers\n(possibly more than one) is located in the same cell as David. Everyone sees\nothers' moves, so they all act optimally.\n\nYour task is to find how many moves it will take for the teachers to catch\nDavid if they all act optimally.\n\nActing optimally means the student makes his moves in a way that maximizes the\nnumber of moves the teachers need to catch him; and the teachers coordinate\nwith each other to make their moves in a way that minimizes the number of\nmoves they need to catch the student.\n\nAlso, as Narek and Tsovak think this task is easy, they decided to give you\n$q$ queries on David's position. Note: this is the easy version, and you\nare given only one query.",
        "input": "In the first line of the input, you are given a single integer $t$ ($1\n\\le t \\le 10^5$) \u2014 the number of test cases. The description of each test\ncase follows.\n\nIn the first line of each test case, you are given three integers $n$,\n$m$, and $q$ ($3 \\le n \\le 10^9$, $m=2$, $q=1$) \u2014 the\nnumber of cells on the line, the number of teachers, and the number of\nqueries.\n\nIn the second line of each test case, you are given $m$ distinct integers\n$b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le n$) \u2014 the cell numbers of the\nteachers.\n\nIn the third line of each test case, you are given $q$ integers $a_1,\na_2, \\ldots, a_q$ ($1 \\le a_i \\le n$) \u2014 David's cell number for every\nquery.\n\nIt is guaranteed that for any $i$, $j$ such that $1 \\le i \\le m$\nand $1 \\le j \\le q$, $b_i \\neq a_j$.",
        "output": "For each test case, output $q$ lines, the $i$-th of them containing\nthe answer of the $i$-th query.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n10 2 1\n1 4\n2\n8 2 1\n3 6\n1\n8 2 1\n3 6\n8\n</pre></td>\n    <td><pre>1\n2\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, the student can just stay at cell $2$. The teacher,\ninitially located in cell $1$, can reach cell $2$ in one move.\nTherefore, the answer is $1$.\n\nIn the second example, the student should just stay at cell $1$. The\nteacher, initially located in cell $3$, can reach cell $1$ in two\nmoves. Therefore, the answer is $2$."
    },
    {
        "problem_id": "2005B2",
        "url": "https://codeforces.com/problemset/problem/2005/B2",
        "title": "The Strict Teacher (Hard Version)",
        "rating": 1200,
        "tags": [
            "binary search",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. The only differences between the two\nversions are the constraints on $m$ and $q$. In this version, $m, q\n\\le 10^5$. You can make hacks only if both versions of the problem are\nsolved.\n\nNarek and Tsovak were busy preparing this round, so they have not managed to\ndo their homework and decided to steal David's homework. Their strict teacher\nnoticed that David has no homework and now wants to punish him. She hires\nother teachers to help her catch David. And now $m$ teachers together are\nchasing him. Luckily, the classroom is big, so David has many places to hide.\n\nThe classroom can be represented as a one-dimensional line with cells from\n$1$ to $n$, inclusive.\n\nAt the start, all $m$ teachers and David are in distinct cells. Then they\nmake moves. During each move\n\n  * David goes to an adjacent cell or stays at the current one. \n  * Then, each of the $m$ teachers simultaneously goes to an adjacent cell or stays at the current one. \n\nThis continues until David is caught. David is caught if any of the teachers\n(possibly more than one) is located in the same cell as David. Everyone sees\nothers' moves, so they all act optimally.\n\nYour task is to find how many moves it will take for the teachers to catch\nDavid if they all act optimally.\n\nActing optimally means the student makes his moves in a way that maximizes the\nnumber of moves the teachers need to catch him; and the teachers coordinate\nwith each other to make their moves in a way that minimizes the number of\nmoves they need to catch the student.\n\nAlso, as Narek and Tsovak think this task is easy, they decided to give you\n$q$ queries on David's position.",
        "input": "In the first line of the input, you are given a single integer $t$ ($1\n\\le t \\le 10^5$) \u2014 the number of test cases. The description of each test\ncase follows.\n\nIn the first line of each test case, you are given three integers $n$,\n$m$, and $q$ ($3 \\le n \\le 10^9$, $1 \\le m, q \\le 10^5$) \u2014 the\nnumber of cells on the line, the number of teachers, and the number of\nqueries.\n\nIn the second line of each test case, you are given $m$ distinct integers\n$b_1, b_2, \\ldots, b_m$ ($1 \\le b_i \\le n$) \u2014 the cell numbers of the\nteachers.\n\nIn the third line of each test case, you are given $q$ integers $a_1,\na_2, \\ldots, a_q$ ($1 \\le a_i \\le n$) \u2014 David's cell number for every\nquery.\n\nIt is guaranteed that for any $i$, $j$ such that $1 \\le i \\le m$\nand $1 \\le j \\le q$, $b_i \\neq a_j$.\n\nIt is guaranteed that the sum of values of $m$ over all test cases does\nnot exceed $2 \\cdot 10^5$.\n\nIt is guaranteed that the sum of values of $q$ over all test cases does\nnot exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output $q$ lines, the $i$-th of them containing\nthe answer of the $i$-th query.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n8 1 1\n6\n3\n10 3 3\n1 4 8\n2 3 10\n</pre></td>\n    <td><pre>5\n1\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the only query of the first example, the student can run to cell $1$.\nIt will take the teacher five moves to reach from cell $6$ to cell\n$1$, so the answer is $5$.\n\nIn the second query of the second example, the student can just stay at cell\n$3$. The teacher, initially located in cell $4$, can reach cell\n$3$ in one move. Therefore, the answer is $1$."
    },
    {
        "problem_id": "2005C",
        "url": "https://codeforces.com/problemset/problem/2005/C",
        "title": "Lazy Narek",
        "rating": 1800,
        "tags": [
            "dp",
            "implementation",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Narek is too lazy to create the third problem of this contest. His friend\nArtur suggests that he should use ChatGPT. ChatGPT creates $n$ problems,\neach consisting of $m$ letters, so Narek has $n$ strings. To make the\nproblem harder, he combines the problems by selecting some of the $n$\nstrings possibly none and concatenating them without altering their order. His\nchance of solving the problem is defined as $score_n - score_c$, where\n$score_n$ is Narek's score and $score_c$ is ChatGPT's score.\n\nNarek calculates $score_n$ by examining the selected string (he moves from\nleft to right). He initially searches for the letter $\\texttt{\"n\"}$,\nfollowed by $\\texttt{\"a\"}$, $\\texttt{\"r\"}$, $\\texttt{\"e\"}$, and\n$\\texttt{\"k\"}$. Upon finding all occurrences of these letters, he\nincrements $score_n$ by $5$ and resumes searching for\n$\\texttt{\"n\"}$ again (he doesn't go back, and he just continues from where\nhe left off).\n\nAfter Narek finishes, ChatGPT scans through the array and increments\n$score_c$ by $1$ for each letter $\\texttt{\"n\"}$,\n$\\texttt{\"a\"}$, $\\texttt{\"r\"}$, $\\texttt{\"e\"}$, or\n$\\texttt{\"k\"}$ that Narek fails to utilize (note that if Narek fails to\ncomplete the last occurrence by finding all of the $5$ letters, then all\nof the letters he used are counted in ChatGPT's score $score_c$, and Narek\ndoesn't get any points if he doesn't finish finding all the 5 letters).\n\nNarek aims to maximize the value of $score_n - score_c$ by selecting the\nmost optimal subset of the initial strings.",
        "input": "In the first line of the input, you're given a single integer $t$ ($1\n\\le t \\le 10^5$), the number of test cases. Then the description of each\ntest case follows.\n\nIn the first line of each test case, you're given two integers $n, m$\n($1 \\le n, m \\le 10^3$), the number of strings and the length of each\nstring.\n\nIn the next $n$ lines, you're given $n$ strings, each having a length\nof $m$. The strings only contain lowercase letters of the English\nalphabet.\n\nThe sum of values of $n \\cdot m$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, output a single integer: the maximal possible value of\n$score_n - score_c$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5 2\nnn\naa\nrr\nee\nkk\n1 5\nnarek\n1 4\nnare\n5 7\nnrrarek\nnrnekan\nuuuuuuu\nppppppp\nnkarekz\n</pre></td>\n    <td><pre>0\n5\n0\n7\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one of the optimal answers is when Narek doesn't\nchoose any of the strings, so the answer is $0$. He can alternatively\nchoose all the strings. In this case, the full string becomes \"nnaarreekk\".\nNarek can choose the first appearances of all letters and add $5$ to the\nscore. His opponent will add $1$ for all second appearances, which will be\n$5$ in total. So the answer will be $5 - 5 = 0$.\n\nIn the third test case, the only optimal answer is when Narek doesn't choose\nthe string. Note that if he were to choose the string, he wouldn't be able to\nfind the last letter \"k\", so his score would stay at $0$ instead of\nbecoming $5$. Then ChatGPT would add $4$ for all of the $4$\nletters, and the answer would become $0 - 4 = -4$.\n\nIn the last test case, Narek needs to choose the first and the last strings.\nAfter putting these two next to each other, he gets\n\"${\\color{red}{n}}rr{\\color{red}{a}}{\\color{red}{r}}{\\color{red}{e}}{\\color{red}{k}}{\\color{red}{n}}k{\\color{red}{a}}{\\color{red}{r}}{\\color{red}{e}}{\\color{red}{k}}{\\color{blue}{z}}$\".\nNarek can choose the letters marked with red and add $10$ to his score.\nSince the black colored letters Narek left behind are eligible for the\nopponent to claim (they are used in the word \"narek\"), the opponent adds all\nother letters to the score and gets a score of $3$. Therefore, the answer\nis $10 - 3 = 7$."
    },
    {
        "problem_id": "2005D",
        "url": "https://codeforces.com/problemset/problem/2005/D",
        "title": "Alter the GCD",
        "rating": 2400,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "divide and conquer",
            "implementation",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "You are given two arrays $a_1, a_2, \\ldots, a_n$ and $b_1, b_2, \\ldots,\nb_n$.\n\nYou must perform the following operation exactly once:\n\n  * choose any indices $l$ and $r$ such that $1 \\le l \\le r \\le n$; \n  * swap $a_i$ and $b_i$ for all $i$ such that $l \\leq i \\leq r$. \n\nFind the maximum possible value of $\\text{gcd}(a_1, a_2, \\ldots, a_n) +\n\\text{gcd}(b_1, b_2, \\ldots, b_n)$ after performing the operation exactly\nonce. Also find the number of distinct pairs $(l, r)$ which achieve the\nmaximum value.",
        "input": "In the first line of the input, you are given a single integer $t$ ($1\n\\le t \\le 10^5$), the number of test cases. Then the description of each\ntest case follows.\n\nIn the first line of each test case, you are given a single integer $n$\n($1 \\le n \\le 2 \\cdot 10^5$), representing the number of integers in each\narray.\n\nIn the next line, you are given $n$ integers $a_1, a_2, \\ldots, a_n$\n($1 \\le a_i \\le 10^9$) \u2014 the elements of the array $a$.\n\nIn the last line, you are given $n$ integers $b_1, b_2, \\ldots, b_n$\n($1 \\le b_i \\le 10^9$) \u2014 the elements of the array $b$.\n\nThe sum of values of $n$ over all test cases does not exceed $5 \\cdot\n10^5$.",
        "output": "For each test case, output a line with two integers: the maximum value of\n$\\text{gcd}(a_1, a_2, \\ldots, a_n) + \\text{gcd}(b_1, b_2, \\ldots, b_n)$\nafter performing the operation exactly once, and the number of ways.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n8\n11 4 16 17 3 24 25 8\n8 10 4 21 17 18 25 21\n4\n6 4 24 13\n15 3 1 14\n2\n13 14\n5 8\n8\n20 17 15 11 21 10 3 7\n9 9 4 20 14 9 13 1\n2\n18 13\n15 20\n</pre></td>\n    <td><pre>2 36\n3 2\n2 3\n2 36\n6 1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first, third, and fourth test cases, there's no way to achieve a higher\nGCD than $1$ in any of the arrays, so the answer is $1 + 1 = 2$. Any\npair $(l, r)$ achieves the same result; for example, in the first test\ncase there are $36$ such pairs.\n\nIn the last test case, you must choose $l = 1$, $r = 2$ to maximize\nthe answer. In this case, the GCD of the first array is $5$, and the GCD\nof the second array is $1$, so the answer is $5 + 1 = 6$, and the\nnumber of ways is $1$."
    },
    {
        "problem_id": "2005E1",
        "url": "https://codeforces.com/problemset/problem/2005/E1",
        "title": "Subtangle Game (Easy Version)",
        "rating": 2100,
        "tags": [
            "dp",
            "games",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. The differences between the two\nversions are the constraints on all the variables. You can make hacks only if\nboth versions of the problem are solved.\n\nTsovak and Narek are playing a game. They have an array $a$ and a matrix\n$b$ of integers with $n$ rows and $m$ columns, numbered from\n$1$. The cell in the $i$-th row and the $j$-th column is $(i,\nj)$.\n\nThey are looking for the elements of $a$ in turns; Tsovak starts first.\nEach time a player looks for a cell in the matrix containing the current\nelement of $a$ (Tsovak looks for the first, then Narek looks for the\nsecond, etc.). Let's say a player has chosen the cell $(r, c)$. The next\nplayer has to choose his cell in the submatrix starting at $(r + 1, c +\n1)$ and ending in $(n, m)$ (the submatrix can be empty if $r=n$ or\n$c=m$). If a player cannot find such a cell (or the remaining submatrix is\nempty) or the array ends (the previous player has chosen the last element),\nthen he loses.\n\nYour task is to determine the winner if the players play optimally.",
        "input": "The first line of the input contains $t$ ($1 \\le t \\le 300$) \u2013 the\nnumber of test cases.\n\nThe first line of each test case contains three integers $l$, $n$, and\n$m$ ($1 \\le l, n, m \\le 300$) \u2013 the size of the array and the sizes of\nthe matrix.\n\nThe second line contains $l$ integers $a_1, a_2, a_3, \\ldots a_l$\n($1 \\le a_i \\le \\min(7, n \\cdot m)$) \u2013 the elements of the array $a$.\n\nThe $i$-th of the last $n$ lines contains $m$ integers $b_{i,1},\nb_{i,2}, b_{i,3}, \\ldots b_{i,m}$ ($1 \\le b_{i,j} \\le \\min(7, n \\cdot\nm)$) \u2013 representing the $i$-th row of the matrix.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not\nexceed $10^5$.\n\nIt is guaranteed that the sum of $l$ over all test cases does not exceed\n$300$.",
        "output": "You should output $t$ lines, the $i$-th of them containing a character\nrepresenting the answer of the $i$-th test case: \"T\" if Tsovak wins or\n\"N\", otherwise (without quotes).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2 2 3\n1 2\n1 3 5\n4 5 2\n2 2 4\n1 2\n1 1 3 2\n4 2 5 1\n2 4 2\n1 2\n3 4\n5 5\n5 5\n5 5\n</pre></td>\n    <td><pre>N\nT\nN</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, Tsovak starts by looking for $1$. There is only one\noccurrence of $1$ at $(1,1)$, so he chooses it. Then Narek needs to\nlook for $2$ in the submatrix of $(2, 2)$, which consists of just the\nlast two elements: $5$ and $2$. He chooses $2$, and then Tsovak\nloses since the array has ended.\n\nIn the second example, Tsovak needs to choose $1$. There is a $1$ at\nthe cell $(n,m)$, so he chooses that cell. Then, since the submatrix of\n$(n + 1, m + 1)$ is empty, Narek cannot find $2$, so he loses."
    },
    {
        "problem_id": "2005E2",
        "url": "https://codeforces.com/problemset/problem/2005/E2",
        "title": "Subtangle Game (Hard Version)",
        "rating": 2500,
        "tags": [
            "data structures",
            "dp",
            "games",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. The differences between the two\nversions are the constraints on all the variables. You can make hacks only if\nboth versions of the problem are solved.\n\nTsovak and Narek are playing a game. They have an array $a$ and a matrix\n$b$ of integers with $n$ rows and $m$ columns, numbered from\n$1$. The cell in the $i$-th row and the $j$-th column is $(i,\nj)$.\n\nThey are looking for the elements of $a$ in turns; Tsovak starts first.\nEach time a player looks for a cell in the matrix containing the current\nelement of $a$ (Tsovak looks for the first, then Narek looks for the\nsecond, etc.). Let's say a player has chosen the cell $(r, c)$. The next\nplayer has to choose his cell in the submatrix starting at $(r + 1, c +\n1)$ and ending in $(n, m)$ (the submatrix can be empty if $r=n$ or\n$c=m$). If a player cannot find such a cell (or the remaining submatrix is\nempty) or the array ends (the previous player has chosen the last element),\nthen he loses.\n\nYour task is to determine the winner if the players play optimally.\n\nNote: since the input is large, you may need to optimize input/output for this\nproblem.\n\nFor example, in C++, it is enough to use the following lines at the start of\nthe main() function:\n\n    \n    \n    int main() {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL); cout.tie(NULL);\n    }",
        "input": "The first line of the input contains $t$ ($1 \\le t \\le 1500$) \u2013 the\nnumber of test cases.\n\nThe first line of each test case contains three integers $l$, $n$, and\n$m$ ($1 \\le l, n, m \\le 1500$) \u2013 the size of the array and the sizes\nof the matrix.\n\nThe second line contains $l$ integers $a_1, a_2, a_3, \\ldots a_l$\n($1 \\le a_i \\le n \\cdot m$) \u2013 the elements of the array $a$.\n\nThe $i$-th of the last $n$ lines contains $m$ integers $b_{i,1},\nb_{i,2}, b_{i,3}, \\ldots b_{i,m}$ ($1 \\le b_{i,j} \\le n \\cdot m$) \u2013\nrepresenting the $i$-th row of the matrix.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not\nexceed $3 \\cdot 10^6$.\n\nIt is guaranteed that the sum of $l$ over all test cases does not exceed\n$1500$.",
        "output": "You should output $t$ lines, the $i$-th of them containing a character\nrepresenting the answer of the $i$-th test case: \"T\" if Tsovak wins or\n\"N\", otherwise (without quotes).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2 2 3\n1 2\n1 3 6\n4 6 2\n2 2 4\n1 2\n1 1 3 2\n4 2 5 1\n2 4 2\n1 2\n3 4\n5 6\n7 8\n8 8\n</pre></td>\n    <td><pre>N\nT\nN\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, Tsovak starts by looking for $1$. There is only one\noccurrence of $1$ at $(1,1)$, so he chooses it. Then Narek needs to\nlook for $2$ in the submatrix of $(2, 2)$, which consists of just the\nlast two elements: $6$ and $2$. He chooses $2$, and then Tsovak\nloses since the array has ended.\n\nIn the second example, Tsovak needs to choose $1$. There is a $1$ at\nthe cell $(n,m)$, so he chooses that cell. Then, since the submatrix of\n$(n + 1, m + 1)$ is empty, Narek cannot find $2$, so he loses."
    },
    {
        "problem_id": "2006A",
        "url": "https://codeforces.com/problemset/problem/2006/A",
        "title": "Iris and Game on the Tree",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "games",
            "graphs",
            "greedy",
            "trees"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Iris has a tree rooted at vertex $1$. Each vertex has a value of\n$\\mathtt 0$ or $\\mathtt 1$.\n\nLet's consider a leaf of the tree (the vertex $1$ is never considered a\nleaf) and define its weight. Construct a string formed by the values of the\nvertices on the path starting at the root and ending in this leaf. Then the\nweight of the leaf is the difference between the number of occurrences of\n$\\mathtt{10}$ and $\\mathtt{01}$ substrings in it.\n\nTake the following tree as an example. Green vertices have a value of\n$\\mathtt 1$ while white vertices have a value of $\\mathtt 0$.\n\n![](CDN_BASE_URL/712e8f1acc71d0401cf5eb23441e53a5)\n\n  * Let's calculate the weight of the leaf $5$: the formed string is $\\mathtt{10110}$. The number of occurrences of substring $\\mathtt{10}$ is $2$, the number of occurrences of substring $\\mathtt{01}$ is $1$, so the difference is $2 - 1 = 1$.\n  * Let's calculate the weight of the leaf $6$: the formed string is $\\mathtt{101}$. The number of occurrences of substring $\\mathtt{10}$ is $1$, the number of occurrences of substring $\\mathtt{01}$ is $1$, so the difference is $1 - 1 = 0$.\n\nThe score of a tree is defined as the number of leaves with non-zero weight in\nthe tree.\n\nBut the values of some vertices haven't been decided and will be given to you\nas $\\texttt{?}$. Filling the blanks would be so boring, so Iris is going\nto invite Dora to play a game. On each turn, one of the girls chooses any of\nthe remaining vertices with value $\\texttt{?}$ and changes its value to\n$\\mathtt{0}$ or $\\mathtt{1}$, with Iris going first. The game\ncontinues until there are no vertices with value $\\mathtt{?}$ left in the\ntree. Iris aims to maximize the score of the tree, while Dora aims to minimize\nthat.\n\nAssuming that both girls play optimally, please determine the final score of\nthe tree.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 5\\cdot 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq\nn \\leq 10^5$) \u2014 the number of vertices in the tree.\n\nThe following $n - 1$ lines each contain two integers $u$ and $v$\n($1 \\leq u, v \\leq n$) \u2014 denoting an edge between vertices $u$ and\n$v$.\n\nIt's guaranteed that the given edges form a tree.\n\nThe last line contains a string $s$ of length $n$. The $i$-th\ncharacter of $s$ represents the value of vertex $i$. It's guaranteed\nthat $s$ only contains characters $\\mathtt{0}$, $\\mathtt{1}$ and\n$\\mathtt{?}$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the final score of the tree.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n4\n1 2\n1 3\n4 1\n0101\n4\n1 2\n3 2\n2 4\n???0\n5\n1 2\n1 3\n2 4\n2 5\n?1?01\n6\n1 2\n2 3\n3 4\n5 3\n3 6\n?0????\n5\n1 2\n1 3\n1 4\n1 5\n11?1?\n2\n2 1\n??\n</pre></td>\n    <td><pre>2\n1\n1\n2\n1\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, all the values of the vertices have been determined.\nThere are three different paths from the root to a leaf:\n\n  * From vertex $1$ to vertex $2$. The string formed by the path is $\\mathtt{01}$, so the weight of the leaf is $0-1=-1$. \n  * From vertex $1$ to vertex $3$. The string formed by the path is $\\mathtt{00}$, so the weight of the leaf is $0-0=0$. \n  * From vertex $1$ to vertex $4$. The string formed by the path is $\\mathtt{01}$, so the weight of the leaf is $0-1=-1$. \n\nThus, there are two leaves with non-zero weight, so the score of the tree is\n$2$.\n\nIn the second test case, one of the sequences of optimal choices for the two\nplayers can be:\n\n  * Iris chooses to change the value of the vertex $3$ to $\\mathtt 1$. \n  * Dora chooses to change the value of the vertex $1$ to $\\mathtt 0$. \n  * Iris chooses to change the value of the vertex $2$ to $\\mathtt 0$. \n\nThe final tree is as follows:\n\n![](CDN_BASE_URL/c8e20d0cf352b7905e60a7b371f053d6)\n\nThe only leaf with non-zero weight is $3$, so the score of the tree is\n$1$. Note that this may not be the only sequence of optimal choices for\nIris and Dora."
    },
    {
        "problem_id": "2006B",
        "url": "https://codeforces.com/problemset/problem/2006/B",
        "title": "Iris and the Tree",
        "rating": 1800,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dsu",
            "math",
            "trees"
        ],
        "div": "Div. 1",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Given a rooted tree with the root at vertex $1$. For any vertex $i$\n($1 < i \\leq n$) in the tree, there is an edge connecting vertices $i$\nand $p_i$ ($1 \\leq p_i < i$), with a weight equal to $t_i$.\n\nIris does not know the values of $t_i$, but she knows that\n$\\displaystyle\\sum_{i=2}^n t_i = w$ and each of the $t_i$ is a non-\nnegative integer.\n\nThe vertices of the tree are numbered in a special way: the numbers of the\nvertices in each subtree are consecutive integers. In other words, the\nvertices of the tree are numbered in the order of a depth-first search.\n\n![](CDN_BASE_URL/274244c032854fe172d47861e2eb9c02) The tree in this picture\nsatisfies the condition. For example, in the subtree of vertex $2$, the\nvertex numbers are $2, 3, 4, 5$, which are consecutive integers.\n![](CDN_BASE_URL/83174231191d329be697a6e3f67b5eb3) The tree in this picture\ndoes not satisfy the condition, as in the subtree of vertex $2$, the\nvertex numbers $2$ and $4$ are not consecutive integers.\n\nWe define $\\operatorname{dist}(u, v)$ as the length of the simple path\nbetween vertices $u$ and $v$ in the tree.\n\nNext, there will be $n - 1$ events:\n\n  * Iris is given integers $x$ and $y$, indicating that $t_x = y$. \n\nAfter each event, Iris wants to know the maximum possible value of\n$\\operatorname{dist}(i, i \\bmod n + 1)$ independently for each $i$\n($1\\le i\\le n$). She only needs to know the sum of these $n$ values.\nPlease help Iris quickly get the answers.\n\nNote that when calculating the maximum possible values of\n$\\operatorname{dist}(i, i \\bmod n + 1)$ and $\\operatorname{dist}(j, j\n\\bmod n + 1)$ for $i \\ne j$, the unknown edge weights may be different.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $w$\n($2 \\le n \\le 2 \\cdot 10^5$, $0 \\leq w \\leq 10^{12}$) \u2014 the number of\nvertices in the tree and the sum of the edge weights.\n\nThe second line of each test case contains $n - 1$ integers $p_2, p_3,\n\\ldots, p_n$ ($1 \\leq p_i < i$) \u2014 the description of the edges of the\ntree.\n\nThen follow $n-1$ lines indicating the events. Each line contains two\nintegers $x$ and $y$ ($2 \\leq x \\leq n$, $0 \\leq y \\leq w$),\nindicating that $t_x = y$.\n\nIt is guaranteed that all $x$ in the events are distinct. It is also\nguaranteed that the sum of all $y$ equals $w$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output one line containing $n-1$ integers, each\nrepresenting the answer after each event.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2 1000000000000\n1\n2 1000000000000\n4 9\n1 1 1\n2 2\n4 4\n3 3\n6 100\n1 2 3 2 1\n6 17\n3 32\n2 4\n4 26\n5 21\n10 511\n1 2 2 4 2 1 1 8 8\n3 2\n6 16\n10 256\n9 128\n2 1\n5 8\n8 64\n4 4\n7 32\n</pre></td>\n    <td><pre>2000000000000\n25 18 18\n449 302 247 200 200\n4585 4473 2681 1567 1454 1322 1094 1022 1022\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $\\operatorname{dist}(1, 2) = \\operatorname{dist}(2,\n1) = t_2 = w = 10^{12}$, so $\\operatorname{dist}(1, 2) +\n\\operatorname{dist}(2, 1) = 2 \\cdot 10^{12}$.\n\nIn the second test case, the tree after Iris found out all $t_x$ is shown\nbelow:\n\n![](CDN_BASE_URL/2f461ea7db7bb0cda4536a2a78190c2f)\n\n$\\operatorname{dist}(1, 2) = t_2$, $\\operatorname{dist}(2, 3) = t_2 +\nt_3$, $\\operatorname{dist}(3, 4) = t_3 + t_4$, $\\operatorname{dist}(4,\n1) = t_4$. After the first event, she found out that $t_2 = 2$, so\n$\\operatorname{dist}(1, 2) = 2$. At the same time:\n\n  * $\\operatorname{dist}(2, 3)$ is maximized if $t_3 = 7$, $t_4 = 0$. Then $\\operatorname{dist}(2, 3) = 9$. \n  * $\\operatorname{dist}(3, 4)$ and $\\operatorname{dist}(4, 1)$ are maximized if $t_3 = 0$, $t_4 = 7$. Then $\\operatorname{dist}(3, 4) = \\operatorname{dist}(4, 1) = 7$. \n\nThus, the answer is $2 + 9 + 7 + 7 = 25$.\n\nAfter the second event, she found out that $t_4 = 4$, then $t_3 = w -\nt_2 - t_4 = 4$. $\\operatorname{dist}(1, 2) = 2$,\n$\\operatorname{dist}(2, 3) = 2 + 3 = 5$, $\\operatorname{dist}(3, 4) = 3\n+ 4 = 7$, $\\operatorname{dist}(4, 1) = 4$. Thus, the answer is $2 + 5\n+ 7 + 4 = 18$."
    },
    {
        "problem_id": "2006C",
        "url": "https://codeforces.com/problemset/problem/2006/C",
        "title": "Eri and Expanded Sets",
        "rating": 2300,
        "tags": [
            "data structures",
            "divide and conquer",
            "math",
            "number theory",
            "two pointers"
        ],
        "div": "Div. 1",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "Let there be a set that contains distinct positive integers. To expand the set\nto contain as many integers as possible, Eri can choose two integers $x\\neq\ny$ from the set such that their average $\\frac{x+y}2$ is still a\npositive integer and isn't contained in the set, and add it to the set. The\nintegers $x$ and $y$ remain in the set.\n\nLet's call the set of integers consecutive if, after the elements are sorted,\nthe difference between any pair of adjacent elements is $1$. For example,\nsets $\\\\{2\\\\}$, $\\\\{2, 5, 4, 3\\\\}$, $\\\\{5, 6, 8, 7\\\\}$ are\nconsecutive, while $\\\\{2, 4, 5, 6\\\\}$, $\\\\{9, 7\\\\}$ are not.\n\nEri likes consecutive sets. Suppose there is an array $b$, then Eri puts\nall elements in $b$ into the set. If after a finite number of operations\ndescribed above, the set can become consecutive, the array $b$ will be\ncalled brilliant.\n\nNote that if the same integer appears in the array multiple times, we only put\nit into the set once, as a set always contains distinct positive integers.\n\nEri has an array $a$ of $n$ positive integers. Please help him to\ncount the number of pairs of integers $(l,r)$ such that $1 \\leq l \\leq r\n\\leq n$ and the subarray $a_l, a_{l+1}, \\ldots, a_r$ is brilliant.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq\nn \\leq 4 \\cdot 10^5$) \u2014 length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 the elements of the array\n$a$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed\n$4 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the number of brilliant\nsubarrays.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2\n2 2\n6\n1 3 6 10 15 21\n5\n6 30 18 36 9\n1\n1000000000\n6\n1 1 4 5 1 4\n12\n70 130 90 90 90 108 612 500 451 171 193 193\n</pre></td>\n    <td><pre>3\n18\n5\n1\n18\n53\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the array $a = [2, 2]$ has $3$ subarrays:\n$[2]$, $[2]$, and $[2, 2]$. For all of them, the set only contains\na single integer $2$, therefore it's always consecutive. All these\nsubarrays are brilliant, so the answer is $3$.\n\nIn the second test case, let's consider the subarray $[3, 6, 10]$. We can\ndo operations as follows:\n\n$$\\\\{3,6,10\\\\} \\xrightarrow{x=6,y=10} \\\\{3,6,8,10\\\\} \\xrightarrow{x=6,y=8}\n\\\\{3,6,7,8,10\\\\} \\xrightarrow{x=3,y=7} \\\\{3,5,6,7,8,10\\\\}$$\n$$\\xrightarrow{x=3,y=5} \\\\{3,4,5,6,7,8,10\\\\} \\xrightarrow{x=8,y=10}\n\\\\{3,4,5,6,7,8,9,10\\\\}$$\n\n$\\\\{3,4,5,6,7,8,9,10\\\\}$ is a consecutive set, so the subarray $[3, 6,\n10]$ is brilliant."
    },
    {
        "problem_id": "2006D",
        "url": "https://codeforces.com/problemset/problem/2006/D",
        "title": "Iris and Adjacent Products",
        "rating": 2600,
        "tags": [
            "data structures",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 1",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Iris has just learned multiplication in her Maths lessons. However, since her\nbrain is unable to withstand too complex calculations, she could not multiply\ntwo integers with the product greater than $k$ together. Otherwise, her\nbrain may explode!\n\nHer teacher sets a difficult task every day as her daily summer holiday\nhomework. Now she is given an array $a$ consisting of $n$ elements,\nand she needs to calculate the product of each two adjacent elements (that is,\n$a_1 \\cdot a_2$, $a_2 \\cdot a_3$, and so on). Iris wants her brain to\nwork safely, and in order to do that, she would like to modify the array\n$a$ in such a way that $a_i \\cdot a_{i + 1} \\leq k$ holds for every\n$1 \\leq i < n$. There are two types of operations she can perform:\n\n  1. She can rearrange the elements of the array $a$ in an arbitrary way.\n  2. She can select an arbitrary element of the array $a$ and change its value to an arbitrary integer from $1$ to $k$. \n\nIris wants to minimize the number of operations of type $2$ that she uses.\n\nHowever, that's completely not the end of the summer holiday! Summer holiday\nlasts for $q$ days, and on the $i$-th day, Iris is asked to solve the\nMath homework for the subarray $b_{l_i}, b_{l_i + 1}, \\ldots, b_{r_i}$.\nHelp Iris and tell her the minimum number of type $2$ operations she needs\nto perform for each day. Note that the operations are independent for each\nday, i.e. the array $b$ is not changed.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 5\\cdot 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $q$ and\n$k$ ($2 \\leq n \\leq 10^5$, $1 \\leq q \\leq 10^5$, $1 \\leq k \\leq\n10^6$) \u2014 the length of array $b$, the number of days, and the upper\nbound for the multiplication calculation.\n\nThe second line of each test case contains $n$ integers $b_1, b_2,\n\\ldots, b_n$ ($1 \\leq b_i \\leq k$) \u2014 the elements of the array $b$.\n\nThen $q$ lines follow, the $i$-th of them contains two integers\n$l_i$ and $r_i$ ($1 \\leq l_i < r_i \\leq n$) \u2014 the boundaries of\nthe subarray on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$, and the sum of $q$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test, output a single line containing $q$ integers \u2014 the minimum\nnumber of operations of type $2$ needed for each day.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 1 1\n1 1 1\n1 3\n3 2 10\n1 10 9\n1 3\n2 3\n5 4 2\n2 2 2 2 2\n1 2\n2 4\n2 5\n1 5\n6 5 10\n3 2 5 10 10 1\n1 4\n3 6\n1 6\n2 5\n5 6\n10 10 10\n10 9 8 7 6 5 4 3 2 1\n1 10\n1 9\n1 8\n1 7\n2 10\n3 10\n4 10\n5 10\n3 9\n6 8\n</pre></td>\n    <td><pre>0 \n0 1 \n1 1 2 2 \n1 1 1 1 0 \n3 3 4 3 2 2 1 1 2 1 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, as Iris can always multiply $1$ and $1$\ntogether, no operations are needed, so the answer is $0$.\n\nIn the second test case, the first day's homework is $[1, 10, 9]$. Iris\ncan rearrange its elements to get $[9, 1, 10]$, so no operations of type\n$2$ are needed. The second day's homework is $[10, 9]$, and she can\nchange one element to get the array $[1, 9]$, so one operation of type\n$2$ is needed."
    },
    {
        "problem_id": "2006E",
        "url": "https://codeforces.com/problemset/problem/2006/E",
        "title": "Iris's Full Binary Tree",
        "rating": 3100,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "trees"
        ],
        "div": "Div. 1",
        "time_limit_ms": 4000,
        "memory_limit_mb": 1024,
        "description": "Iris likes full binary trees.\n\nLet's define the depth of a rooted tree as the maximum number of vertices on\nthe simple paths from some vertex to the root. A full binary tree of depth\n$d$ is a binary tree of depth $d$ with exactly $2^d - 1$ vertices.\n\nIris calls a tree a $d$-binary tree if some vertices and edges can be\nadded to it to make it a full binary tree of depth $d$. Note that any\nvertex can be chosen as the root of a full binary tree.\n\nSince performing operations on large trees is difficult, she defines the\nbinary depth of a tree as the minimum $d$ satisfying that the tree is\n$d$-binary. Specifically, if there is no integer $d \\ge 1$ such that\nthe tree is $d$-binary, the binary depth of the tree is $-1$.\n\nIris now has a tree consisting of only vertex $1$. She wants to add $n -\n1$ more vertices to form a larger tree. She will add the vertices one by\none. When she adds vertex $i$ ($2 \\leq i \\leq n$), she'll give you an\ninteger $p_i$ ($1 \\leq p_i < i$), and add a new edge connecting\nvertices $i$ and $p_i$.\n\nIris wants to ask you the binary depth of the tree formed by the first $i$\nvertices for each $1 \\le i \\le n$. Can you tell her the answer?",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq\nn \\leq 5 \\cdot 10^5$) \u2014 the final size of the tree.\n\nThe second line of each test case contains $n - 1$ integers $p_2, p_3,\n\\ldots, p_n$ ($1 \\leq p_i < i$) \u2014 descriptions of all edges of the tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case output $n$ integers, $i$-th of them representing\nthe binary depth of the tree formed by the first $i$ vertices.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n3\n1 1\n6\n1 2 3 4 5\n7\n1 1 3 2 5 1\n10\n1 1 2 1 4 2 4 5 8\n10\n1 1 3 1 3 2 2 2 6\n20\n1 1 2 2 4 4 5 5 7 6 8 6 11 14 11 8 13 13 12\n25\n1 1 3 3 1 5 4 4 6 8 11 12 8 7 11 13 7 13 15 6 19 14 10 23\n</pre></td>\n    <td><pre>1 2 2 \n1 2 2 3 3 4 \n1 2 2 3 3 4 4 \n1 2 2 3 3 3 4 4 5 5 \n1 2 2 3 3 4 4 4 -1 -1 \n1 2 2 3 3 4 4 4 4 5 5 5 5 6 6 6 6 6 6 7 \n1 2 2 3 3 4 4 4 4 5 5 6 6 6 6 6 7 7 7 7 7 8 8 8 8 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the final tree is shown below:\n\n![](CDN_BASE_URL/5045337022386beaeb8585d242e8d14a)\n\n  * The tree consisting of the vertex $1$ has the binary depth $1$ (the tree itself is a full binary tree of depth $1$). \n  * The tree consisting of the vertices $1$ and $2$ has the binary depth $2$ (we can add the vertex $3$ to make it a full binary tree of depth $2$). \n  * The tree consisting of the vertices $1$, $2$ and $3$ has the binary depth $2$ (the tree itself is a full binary tree of depth $2$).\n\nIn the second test case, the formed full binary tree after adding some\nvertices to the tree consisting of $n$ vertices is shown below (bolded\nvertices are added):\n\n![](CDN_BASE_URL/47a803b975dced95812a171507c56a8b)\n\nThe depth of the formed full binary tree is $4$.\n\nIn the fifth test case, the final tree is shown below:\n\n![](CDN_BASE_URL/ffe91eb3e0db4e64598df8a805ba1e4a)\n\nIt can be proved that Iris can't form any full binary tree by adding vertices\nand edges, so the binary depth is $-1$."
    },
    {
        "problem_id": "2006F",
        "url": "https://codeforces.com/problemset/problem/2006/F",
        "title": "Dora's Paint",
        "rating": 3500,
        "tags": [
            "brute force",
            "combinatorics",
            "constructive algorithms",
            "graphs",
            "implementation"
        ],
        "div": "Div. 1",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "Sadly, Dora poured the paint when painting the class mural. Dora considers the\nmural as the matrix $b$ of size $n \\times n$. Initially, $b_{i,j} =\n0$ for all $1 \\le i, j \\le n$.\n\nDora has only two brushes which have two different colors. In one operation,\nshe can paint the matrix with one of two brushes:\n\n  * The first brush has color $1$ on it and can paint one column of the matrix. That is, Dora chooses $1 \\leq j \\leq n$ and makes $b_{i,j} := 1$ for all $1 \\leq i \\leq n$; \n  * The second brush has color $2$ on it and can paint one row of the matrix. That is, Dora chooses $1 \\leq i \\leq n$ and makes $b_{i,j} := 2$ for all $1 \\leq j \\leq n$. \n\nDora paints the matrix so that the resulting matrix $b$ contains only\n$1$ and $2$.\n\nFor a matrix $b$, let $f(b)$ denote the minimum number of operations\nneeded to turn the initial matrix (containing only $0$) into $b$. The\nbeauty of a matrix $b$ is the number of ways to paint the initial matrix\nin exactly $f(b)$ operations to turn it into $b$. If there's no way to\nturn the initial matrix into $b$, the beauty of $b$ is $0$.\n\nHowever, Dora made a uniformly random mistake; there's exactly one element\ndifferent in the matrix $a$ given to you from the real matrix $b$.\nThat is, there is exactly one pair $(i, j)$ such that $a_{i, j} = 3 -\nb_{i, j}$.\n\nPlease help Dora compute the expected beauty of the real matrix $b$ modulo\n$998\\,244\\,353$ (all possible $n^2$ mistakes have equal probability).\n\nSince the size of the matrix is too large, Dora will only tell you the\npositions of $m$ elements of color $1$, and the remaining $n^2-m$\nelements have color $2$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($2 \\leq n \\leq 2 \\cdot 10^5$, $0 \\leq m \\leq \\min(10^6, n^2)$) \u2014 the\nsize of the matrix and the number of elements of color $1$.\n\nThen $m$ lines follow, each containing two positive integers $x_i$ and\n$y_i$ ($1 \\leq x_i, y_i \\leq n$) \u2014 denoting that $a_{x_i, y_i} =\n1$.\n\nIt is guaranteed that if $i \\neq j$, then $(x_i, y_i) \\neq (x_j,\ny_j)$.\n\nIt is also guaranteed that the sum of $n$ over all test cases does not\nexceed $4\\cdot10^5$, and the sum of $m$ over all test cases does not\nexceed $10^6$.",
        "output": "For each test case, output a single integer \u2014 the expected beauty of the real\nmatrix $b$, modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n2 2\n1 1\n1 2\n2 1\n1 1\n3 2\n1 1\n3 3\n6 0\n5 10\n1 1\n1 2\n1 3\n2 1\n2 3\n5 1\n5 2\n5 3\n5 4\n5 5\n3 5\n1 1\n1 3\n2 2\n3 1\n3 3\n4 3\n1 1\n2 3\n2 4\n</pre></td>\n    <td><pre>1\n499122178\n665496236\n120\n79859554\n776412275\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the matrix $a =\n\\left[\\begin{matrix}1&1\\\\\\2&2\\end{matrix}\\right]$. Let's consider changing\nthe element $(1,1)$ to calculate the answer.\n\nIt can be proved that the minimum steps to paint the initial matrix into\n$\\left[\\begin{matrix}2&1\\\\\\2&2\\end{matrix}\\right]$ is $3$. We can\nfirst paint the first row into color $2$, then paint the second column\ninto color $1$, and finally paint the second row into color $2$. The\nprocess is listed below:\n\n$$\\left[\\begin{matrix}0&0\\\\\\0&0\\end{matrix}\\right]\\Rightarrow\\left[\\begin{matrix}2&2\\\\\\0&0\\end{matrix}\\right]\\Rightarrow\\left[\\begin{matrix}2&1\\\\\\0&1\\end{matrix}\\right]\\Rightarrow\\left[\\begin{matrix}2&1\\\\\\2&2\\end{matrix}\\right]$$\n\nIt can be proved that this is the only way to paint the matrix in $3$\nsteps. So the beauty of the matrix\n$\\left[\\begin{matrix}2&1\\\\\\2&2\\end{matrix}\\right]$ is $1$. Similarly,\nif any other element of the matrix is changed, the beauty is always $1$,\nso the expected beauty of the real matrix $b$ is $1$.\n\nIn the second test case, the matrix $a =\n\\left[\\begin{matrix}1&2\\\\\\2&2\\end{matrix}\\right]$. Let's consider changing\nthe element $(2, 2)$ to calculate the answer.\n\nIt can be proven that it's impossible to paint the initial matrix into\n$\\left[\\begin{matrix}1&2\\\\\\2&1\\end{matrix}\\right]$, so its beauty is\n$0$. If any other element of the matrix is changed, the beauty is always\n$2$, so the expected beauty is $\\frac{0 + 2 + 2 + 2}{4} = \\frac{6}{4}\n\\equiv 499\\,122\\,178 \\pmod {998\\,244\\,353}$."
    },
    {
        "problem_id": "2007A",
        "url": "https://codeforces.com/problemset/problem/2007/A",
        "title": "Dora's Set",
        "rating": 800,
        "tags": [
            "greedy",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Dora has a set $s$ containing integers. In the beginning, she will put all\nintegers in $[l, r]$ into the set $s$. That is, an integer $x$ is\ninitially contained in the set if and only if $l \\leq x \\leq r$. Then she\nallows you to perform the following operations:\n\n  * Select three distinct integers $a$, $b$, and $c$ from the set $s$, such that $\\gcd(a, b) = \\gcd(b, c) = \\gcd(a, c) = 1^\\dagger$. \n  * Then, remove these three integers from the set $s$. \n\nWhat is the maximum number of operations you can perform?\n\n$^\\dagger$Recall that $\\gcd(x, y)$ means the [greatest common\ndivisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers\n$x$ and $y$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 500$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe only line of each test case contains two integers $l$ and $r$\n($1 \\leq l \\leq r \\leq 1000$) \u2014 the range of integers in the initial set.",
        "output": "For each test case, output a single integer \u2014 the maximum number of operations\nyou can perform.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n1 3\n3 7\n10 21\n2 8\n51 60\n2 15\n10 26\n1 1000\n</pre></td>\n    <td><pre>1\n1\n3\n1\n2\n3\n4\n250\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can choose $a = 1$, $b = 2$, $c = 3$\nin the only operation, since $\\gcd(1, 2) = \\gcd(2, 3) = \\gcd(1, 3) = 1$,\nand then there are no more integers in the set, so no more operations can be\nperformed.\n\nIn the second test case, you can choose $a = 3$, $b = 5$, $c = 7$\nin the only operation.\n\nIn the third test case, you can choose $a = 11$, $b = 19$, $c =\n20$ in the first operation, $a = 13$, $b = 14$, $c = 15$ in the\nsecond operation, and $a = 10$, $b = 17$, $c = 21$ in the third\noperation. After the three operations, the set $s$ contains the following\nintegers: $12$, $16$, $18$. It can be proven that it's impossible\nto perform more than $3$ operations."
    },
    {
        "problem_id": "2007B",
        "url": "https://codeforces.com/problemset/problem/2007/B",
        "title": "Index and Maximum Value",
        "rating": 900,
        "tags": [
            "data structures",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "After receiving yet another integer array $a_1, a_2, \\ldots, a_n$ at her\nbirthday party, Index decides to perform some operations on it.\n\nFormally, there are $m$ operations that she is going to perform in order.\nEach of them belongs to one of the two types:\n\n  * $\\texttt{+ l r}$. Given two integers $l$ and $r$, for all $1 \\leq i \\leq n$ such that $l \\leq a_i \\leq r$, set $a_i := a_i + 1$. \n  * $\\texttt{- l r}$. Given two integers $l$ and $r$, for all $1 \\leq i \\leq n$ such that $l \\leq a_i \\leq r$, set $a_i := a_i - 1$. \n\nFor example, if the initial array $a = [7, 1, 3, 4, 3]$, after performing\nthe operation $\\texttt{+} \\space 2 \\space 4$, the array $a = [7, 1, 4,\n5, 4]$. Then, after performing the operation $\\texttt{-} \\space 1 \\space\n10$, the array $a = [6, 0, 3, 4, 3]$.\n\nIndex is curious about the maximum value in the array $a$. Please help her\nfind it after each of the $m$ operations.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 2 \\cdot 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\leq n \\leq 10^5$, $1 \\leq m \\leq 10^5$) \u2014 the length of the array\nand the number of operations.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 the initial array $a$.\n\nThen $m$ lines follow, each line corresponds to the operation, in the\nfollowing format: $\\texttt{c l r}$ ($c \\in \\\\{\\texttt +, \\texttt\n-\\\\}$, $l$ and $r$ are integers, $1 \\leq l \\leq r \\leq 10^9$) \u2014\nthe description of the operation.\n\nNote that the elements $a_i$ may not satisfy $1\\le a_i\\le 10^9$ after\nsome operations, as it is shown in the example.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$, and the sum of $m$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output one single line containing $m$ integers, with\nthe $i$-th of them describing the maximum value of the array after the\n$i$-th operation.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n5 5\n1 2 3 2 1\n+ 1 3\n- 2 3\n+ 1 2\n+ 2 4\n- 6 8\n5 5\n1 3 3 4 5\n+ 1 4\n+ 2 3\n- 4 5\n- 3 3\n- 2 6\n5 5\n1 1 1 1 1\n+ 2 3\n- 4 5\n+ 1 6\n- 2 5\n+ 1 8\n1 1\n1\n- 1 1\n1 1\n1000000000\n+ 1000000000 1000000000\n</pre></td>\n    <td><pre>4 4 4 5 5\n5 5 4 4 3\n1 1 2 1 2\n0\n1000000001\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the process of the operations is listed below:\n\n  * After the first operation, the array becomes equal $[2,3,4,3,2]$. The maximum value is $4$. \n  * After the second operation, the array becomes equal $[1,2,4,2,1]$. The maximum value is $4$. \n  * After the third operation, the array becomes equal $[2,3,4,3,2]$. The maximum value is $4$. \n  * After the fourth operation, the array becomes equal $[3,4,5,4,3]$. The maximum value is $5$. \n  * After the fifth operation, the array becomes equal $[3,4,5,4,3]$. The maximum value is $5$.\n\nIn the second test case, the process of the operations is listed below:\n\n  * After the first operation, the array becomes equal $[2,4,4,5,5]$. The maximum value is $5$. \n  * After the second operation, the array becomes equal $[3,4,4,5,5]$. The maximum value is $5$. \n  * After the third operation, the array becomes equal $[3,3,3,4,4]$. The maximum value is $4$. \n  * After the fourth operation, the array becomes equal $[2,2,2,4,4]$. The maximum value is $4$. \n  * After the fifth operation, the array becomes equal $[1,1,1,3,3]$. The maximum value is $3$."
    },
    {
        "problem_id": "2007C",
        "url": "https://codeforces.com/problemset/problem/2007/C",
        "title": "Dora and C++",
        "rating": 1500,
        "tags": [
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Dora has just learned the programming language C++!\n\nHowever, she has completely misunderstood the meaning of C++. She considers it\nas two kinds of adding operations on the array $c$ with $n$ elements.\nDora has two integers $a$ and $b$. In one operation, she can choose\none of the following things to do.\n\n  * Choose an integer $i$ such that $1 \\leq i \\leq n$, and increase $c_i$ by $a$. \n  * Choose an integer $i$ such that $1 \\leq i \\leq n$, and increase $c_i$ by $b$. \n\nNote that $a$ and $b$ are constants, and they can be the same.\n\nLet's define a range of array $d$ as $\\max(d_i) - \\min(d_i)$. For\ninstance, the range of the array $[1, 2, 3, 4]$ is $4 - 1 = 3$, the\nrange of the array $[5, 2, 8, 2, 2, 1]$ is $8 - 1 = 7$, and the range\nof the array $[3, 3, 3]$ is $3 - 3 = 0$.\n\nAfter any number of operations (possibly, $0$), Dora calculates the range\nof the new array. You need to help Dora minimize this value, but since Dora\nloves exploring all by herself, you only need to tell her the minimized value.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains three integers $n$, $a$, and\n$b$ ($1 \\leq n \\leq 10^5$, $1 \\leq a, b \\leq 10^9$) \u2014 the length\nof the array $c$ and the constant values, respectively.\n\nThe second line of each test case contains $n$ integers $c_1, c_2,\n\\ldots, c_n$ ($1 \\leq c_i \\leq 10^9$) \u2014 the initial elements of the\narray $c$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum possible range of\nthe array after any number of operations.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n4 5 5\n1 3 4 4\n4 2 3\n1 3 4 6\n4 7 7\n1 1 2 6\n3 15 9\n1 9 5\n3 18 12\n1 4 5\n7 27 36\n33 13 23 12 35 24 41\n10 6 9\n15 5 6 9 8 2 12 15 3 8\n2 1 1000000000\n1 1000000000\n6 336718728 709848696\n552806726 474775724 15129785 371139304 178408298 13106071\n6 335734893 671469786\n138885253 70095920 456876775 9345665 214704906 375508929\n</pre></td>\n    <td><pre>3\n0\n3\n2\n3\n5\n1\n0\n17\n205359241\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we can increase $c_1 = 1$ by $a = 5$. The\narray $c$ will become $[6, 3, 4, 4]$, and the range is $3$. Note\nthat there is more than one way to reach the answer.\n\nIn the second test case, we can increase $c_1 = 1$ by $a = 2$ and then\nincrease $c_1 = 3$ by $b = 3$. Also, we can increase $c_2 = 3$ by\n$b = 3$ and increase $c_3 = 4$ by $a = 2$. The array $c$ will\nbecome $[6, 6, 6, 6]$, and the range is $0$."
    },
    {
        "problem_id": "2007D",
        "url": "https://codeforces.com/problemset/problem/2007/D",
        "title": "Iris and Game on the Tree",
        "rating": 1700,
        "tags": [
            "games",
            "graphs",
            "greedy",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Iris has a tree rooted at vertex $1$. Each vertex has a value of\n$\\mathtt 0$ or $\\mathtt 1$.\n\nLet's consider a leaf of the tree (the vertex $1$ is never considered a\nleaf) and define its weight. Construct a string formed by the values of the\nvertices on the path starting at the root and ending in this leaf. Then the\nweight of the leaf is the difference between the number of occurrences of\n$\\mathtt{10}$ and $\\mathtt{01}$ substrings in it.\n\nTake the following tree as an example. Green vertices have a value of\n$\\mathtt 1$ while white vertices have a value of $\\mathtt 0$.\n\n![](CDN_BASE_URL/712e8f1acc71d0401cf5eb23441e53a5)\n\n  * Let's calculate the weight of the leaf $5$: the formed string is $\\mathtt{10110}$. The number of occurrences of substring $\\mathtt{10}$ is $2$, the number of occurrences of substring $\\mathtt{01}$ is $1$, so the difference is $2 - 1 = 1$.\n  * Let's calculate the weight of the leaf $6$: the formed string is $\\mathtt{101}$. The number of occurrences of substring $\\mathtt{10}$ is $1$, the number of occurrences of substring $\\mathtt{01}$ is $1$, so the difference is $1 - 1 = 0$.\n\nThe score of a tree is defined as the number of leaves with non-zero weight in\nthe tree.\n\nBut the values of some vertices haven't been decided and will be given to you\nas $\\texttt{?}$. Filling the blanks would be so boring, so Iris is going\nto invite Dora to play a game. On each turn, one of the girls chooses any of\nthe remaining vertices with value $\\texttt{?}$ and changes its value to\n$\\mathtt{0}$ or $\\mathtt{1}$, with Iris going first. The game\ncontinues until there are no vertices with value $\\mathtt{?}$ left in the\ntree. Iris aims to maximize the score of the tree, while Dora aims to minimize\nthat.\n\nAssuming that both girls play optimally, please determine the final score of\nthe tree.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 5\\cdot 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq\nn \\leq 10^5$) \u2014 the number of vertices in the tree.\n\nThe following $n - 1$ lines each contain two integers $u$ and $v$\n($1 \\leq u, v \\leq n$) \u2014 denoting an edge between vertices $u$ and\n$v$.\n\nIt's guaranteed that the given edges form a tree.\n\nThe last line contains a string $s$ of length $n$. The $i$-th\ncharacter of $s$ represents the value of vertex $i$. It's guaranteed\nthat $s$ only contains characters $\\mathtt{0}$, $\\mathtt{1}$ and\n$\\mathtt{?}$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the final score of the tree.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n4\n1 2\n1 3\n4 1\n0101\n4\n1 2\n3 2\n2 4\n???0\n5\n1 2\n1 3\n2 4\n2 5\n?1?01\n6\n1 2\n2 3\n3 4\n5 3\n3 6\n?0????\n5\n1 2\n1 3\n1 4\n1 5\n11?1?\n2\n2 1\n??\n</pre></td>\n    <td><pre>2\n1\n1\n2\n1\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, all the values of the vertices have been determined.\nThere are three different paths from the root to a leaf:\n\n  * From vertex $1$ to vertex $2$. The string formed by the path is $\\mathtt{01}$, so the weight of the leaf is $0-1=-1$. \n  * From vertex $1$ to vertex $3$. The string formed by the path is $\\mathtt{00}$, so the weight of the leaf is $0-0=0$. \n  * From vertex $1$ to vertex $4$. The string formed by the path is $\\mathtt{01}$, so the weight of the leaf is $0-1=-1$. \n\nThus, there are two leaves with non-zero weight, so the score of the tree is\n$2$.\n\nIn the second test case, one of the sequences of optimal choices for the two\nplayers can be:\n\n  * Iris chooses to change the value of the vertex $3$ to $\\mathtt 1$. \n  * Dora chooses to change the value of the vertex $1$ to $\\mathtt 0$. \n  * Iris chooses to change the value of the vertex $2$ to $\\mathtt 0$. \n\nThe final tree is as follows:\n\n![](CDN_BASE_URL/c8e20d0cf352b7905e60a7b371f053d6)\n\nThe only leaf with non-zero weight is $3$, so the score of the tree is\n$1$. Note that this may not be the only sequence of optimal choices for\nIris and Dora."
    },
    {
        "problem_id": "2007E",
        "url": "https://codeforces.com/problemset/problem/2007/E",
        "title": "Iris and the Tree",
        "rating": 1800,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "math",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "Given a rooted tree with the root at vertex $1$. For any vertex $i$\n($1 < i \\leq n$) in the tree, there is an edge connecting vertices $i$\nand $p_i$ ($1 \\leq p_i < i$), with a weight equal to $t_i$.\n\nIris does not know the values of $t_i$, but she knows that\n$\\displaystyle\\sum_{i=2}^n t_i = w$ and each of the $t_i$ is a non-\nnegative integer.\n\nThe vertices of the tree are numbered in a special way: the numbers of the\nvertices in each subtree are consecutive integers. In other words, the\nvertices of the tree are numbered in the order of a depth-first search.\n\n![](CDN_BASE_URL/274244c032854fe172d47861e2eb9c02) The tree in this picture\nsatisfies the condition. For example, in the subtree of vertex $2$, the\nvertex numbers are $2, 3, 4, 5$, which are consecutive integers.\n![](CDN_BASE_URL/83174231191d329be697a6e3f67b5eb3) The tree in this picture\ndoes not satisfy the condition, as in the subtree of vertex $2$, the\nvertex numbers $2$ and $4$ are not consecutive integers.\n\nWe define $\\operatorname{dist}(u, v)$ as the length of the simple path\nbetween vertices $u$ and $v$ in the tree.\n\nNext, there will be $n - 1$ events:\n\n  * Iris is given integers $x$ and $y$, indicating that $t_x = y$. \n\nAfter each event, Iris wants to know the maximum possible value of\n$\\operatorname{dist}(i, i \\bmod n + 1)$ independently for each $i$\n($1\\le i\\le n$). She only needs to know the sum of these $n$ values.\nPlease help Iris quickly get the answers.\n\nNote that when calculating the maximum possible values of\n$\\operatorname{dist}(i, i \\bmod n + 1)$ and $\\operatorname{dist}(j, j\n\\bmod n + 1)$ for $i \\ne j$, the unknown edge weights may be different.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $w$\n($2 \\le n \\le 2 \\cdot 10^5$, $0 \\leq w \\leq 10^{12}$) \u2014 the number of\nvertices in the tree and the sum of the edge weights.\n\nThe second line of each test case contains $n - 1$ integers $p_2, p_3,\n\\ldots, p_n$ ($1 \\leq p_i < i$) \u2014 the description of the edges of the\ntree.\n\nThen follow $n-1$ lines indicating the events. Each line contains two\nintegers $x$ and $y$ ($2 \\leq x \\leq n$, $0 \\leq y \\leq w$),\nindicating that $t_x = y$.\n\nIt is guaranteed that all $x$ in the events are distinct. It is also\nguaranteed that the sum of all $y$ equals $w$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output one line containing $n-1$ integers, each\nrepresenting the answer after each event.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2 1000000000000\n1\n2 1000000000000\n4 9\n1 1 1\n2 2\n4 4\n3 3\n6 100\n1 2 3 2 1\n6 17\n3 32\n2 4\n4 26\n5 21\n10 511\n1 2 2 4 2 1 1 8 8\n3 2\n6 16\n10 256\n9 128\n2 1\n5 8\n8 64\n4 4\n7 32\n</pre></td>\n    <td><pre>2000000000000\n25 18 18\n449 302 247 200 200\n4585 4473 2681 1567 1454 1322 1094 1022 1022\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $\\operatorname{dist}(1, 2) = \\operatorname{dist}(2,\n1) = t_2 = w = 10^{12}$, so $\\operatorname{dist}(1, 2) +\n\\operatorname{dist}(2, 1) = 2 \\cdot 10^{12}$.\n\nIn the second test case, the tree after Iris found out all $t_x$ is shown\nbelow:\n\n![](CDN_BASE_URL/2f461ea7db7bb0cda4536a2a78190c2f)\n\n$\\operatorname{dist}(1, 2) = t_2$, $\\operatorname{dist}(2, 3) = t_2 +\nt_3$, $\\operatorname{dist}(3, 4) = t_3 + t_4$, $\\operatorname{dist}(4,\n1) = t_4$. After the first event, she found out that $t_2 = 2$, so\n$\\operatorname{dist}(1, 2) = 2$. At the same time:\n\n  * $\\operatorname{dist}(2, 3)$ is maximized if $t_3 = 7$, $t_4 = 0$. Then $\\operatorname{dist}(2, 3) = 9$. \n  * $\\operatorname{dist}(3, 4)$ and $\\operatorname{dist}(4, 1)$ are maximized if $t_3 = 0$, $t_4 = 7$. Then $\\operatorname{dist}(3, 4) = \\operatorname{dist}(4, 1) = 7$. \n\nThus, the answer is $2 + 9 + 7 + 7 = 25$.\n\nAfter the second event, she found out that $t_4 = 4$, then $t_3 = w -\nt_2 - t_4 = 4$. $\\operatorname{dist}(1, 2) = 2$,\n$\\operatorname{dist}(2, 3) = 2 + 3 = 5$, $\\operatorname{dist}(3, 4) = 3\n+ 4 = 7$, $\\operatorname{dist}(4, 1) = 4$. Thus, the answer is $2 + 5\n+ 7 + 4 = 18$."
    },
    {
        "problem_id": "2007F",
        "url": "https://codeforces.com/problemset/problem/2007/F",
        "title": "Eri and Expanded Sets",
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "number theory",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "Let there be a set that contains distinct positive integers. To expand the set\nto contain as many integers as possible, Eri can choose two integers $x\\neq\ny$ from the set such that their average $\\frac{x+y}2$ is still a\npositive integer and isn't contained in the set, and add it to the set. The\nintegers $x$ and $y$ remain in the set.\n\nLet's call the set of integers consecutive if, after the elements are sorted,\nthe difference between any pair of adjacent elements is $1$. For example,\nsets $\\\\{2\\\\}$, $\\\\{2, 5, 4, 3\\\\}$, $\\\\{5, 6, 8, 7\\\\}$ are\nconsecutive, while $\\\\{2, 4, 5, 6\\\\}$, $\\\\{9, 7\\\\}$ are not.\n\nEri likes consecutive sets. Suppose there is an array $b$, then Eri puts\nall elements in $b$ into the set. If after a finite number of operations\ndescribed above, the set can become consecutive, the array $b$ will be\ncalled brilliant.\n\nNote that if the same integer appears in the array multiple times, we only put\nit into the set once, as a set always contains distinct positive integers.\n\nEri has an array $a$ of $n$ positive integers. Please help him to\ncount the number of pairs of integers $(l,r)$ such that $1 \\leq l \\leq r\n\\leq n$ and the subarray $a_l, a_{l+1}, \\ldots, a_r$ is brilliant.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq\nn \\leq 4 \\cdot 10^5$) \u2014 length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 the elements of the array\n$a$.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed\n$4 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the number of brilliant\nsubarrays.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2\n2 2\n6\n1 3 6 10 15 21\n5\n6 30 18 36 9\n1\n1000000000\n6\n1 1 4 5 1 4\n12\n70 130 90 90 90 108 612 500 451 171 193 193\n</pre></td>\n    <td><pre>3\n18\n5\n1\n18\n53\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the array $a = [2, 2]$ has $3$ subarrays:\n$[2]$, $[2]$, and $[2, 2]$. For all of them, the set only contains\na single integer $2$, therefore it's always consecutive. All these\nsubarrays are brilliant, so the answer is $3$.\n\nIn the second test case, let's consider the subarray $[3, 6, 10]$. We can\ndo operations as follows:\n\n$$\\\\{3,6,10\\\\} \\xrightarrow{x=6,y=10} \\\\{3,6,8,10\\\\} \\xrightarrow{x=6,y=8}\n\\\\{3,6,7,8,10\\\\} \\xrightarrow{x=3,y=7} \\\\{3,5,6,7,8,10\\\\}$$\n$$\\xrightarrow{x=3,y=5} \\\\{3,4,5,6,7,8,10\\\\} \\xrightarrow{x=8,y=10}\n\\\\{3,4,5,6,7,8,9,10\\\\}$$\n\n$\\\\{3,4,5,6,7,8,9,10\\\\}$ is a consecutive set, so the subarray $[3, 6,\n10]$ is brilliant."
    },
    {
        "problem_id": "2008A",
        "url": "https://codeforces.com/problemset/problem/2008/A",
        "title": "Sakurako's Exam",
        "rating": 800,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Today, Sakurako has a math exam. The teacher gave the array, consisting of\n$a$ ones and $b$ twos.\n\nIn an array, Sakurako must place either a '+' or a '-' in front of each\nelement so that the sum of all elements in the array equals $0$.\n\nSakurako is not sure if it is possible to solve this problem, so determine\nwhether there is a way to assign signs such that the sum of all elements in\nthe array equals $0$.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 100$)  \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains two integers $a$ and $b$\n($0\\le a,b<10$)  \u2014 the number of '1's and the number of '2's in the array.",
        "output": "For each test case, output \"Yes\" if you can make the sum of the entire array\nequal to $0$, and \"No\" otherwise.\n\nYou can output each letter in any case (lowercase or uppercase). For example,\nthe strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be accepted as a positive\nanswer.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n0 1\n0 3\n2 0\n2 3\n3 1\n</pre></td>\n    <td><pre>NO\nNO\nYES\nYES\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "1. $a=0$, $b=1$: This means the array is $[2]$ \u2014 it is impossible to add the signs '+' or '-' to get $0$ as a result;\n  2. $a=0$, $b=3$: This means the array is $[2, 2, 2]$ \u2014 it is impossible to add the signs '+' or '-' to get $0$ as a result;\n  3. $a=2$, $b=0$: This means the array is $[1, 1]$ \u2014 it is possible to add the signs '+' or '-' to get $0$ as a result ($+1-1=0$);\n  4. $a=2$, $b=3$: This means the array is $[1, 1, 2, 2, 2]$ \u2014 it is possible to add the signs '+' or '-' to get $0$ as a result ($+1+1-2-2+2=0$);"
    },
    {
        "problem_id": "2008B",
        "url": "https://codeforces.com/problemset/problem/2008/B",
        "title": "Square or Not",
        "rating": 800,
        "tags": [
            "brute force",
            "math",
            "strings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "A beautiful binary matrix is a matrix that has ones on its edges and zeros\ninside.\n\n![](CDN_BASE_URL/5df31946486165887b31c82158ed558d) Examples of four beautiful\nbinary matrices.\n\nToday, Sakurako was playing with a beautiful binary matrix of size $r \\times\nc$ and created a binary string $s$ by writing down all the rows of the\nmatrix, starting from the first and ending with the $r$-th. More formally,\nthe element from the matrix in the $i$-th row and $j$-th column\ncorresponds to the $((i-1)*c+j)$-th element of the string.\n\nYou need to check whether the beautiful matrix from which the string $s$\nwas obtained could be squared. In other words, you need to check whether the\nstring $s$ could have been build from a square beautiful binary matrix\n(i.e., one where $r=c$).",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the string.\n\nThe second line of each test case contains the string $s$ of length\n$n$. The string is always the result of writing out the strings of a\nbeautiful matrix.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "Print \"Yes\", if the original matrix could have been square, and \"No\"\notherwise.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n11\n4\n1111\n9\n111101111\n9\n111111111\n12\n111110011111\n</pre></td>\n    <td><pre>No\nYes\nYes\nNo\nNo\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the second test case, string 1111 can be obtained from the matrix:\n\n$1$| $1$  \n---|---  \n$1$| $1$  \n  \nFor the third test case, string 111101111 can be obtained from the matrix:\n\n$1$| $1$| $1$  \n---|---|---  \n$1$| $0$| $1$  \n$1$| $1$| $1$  \n  \nThere is no square matrix in the fourth case, such that the string can be\nobtained from it."
    },
    {
        "problem_id": "2008C",
        "url": "https://codeforces.com/problemset/problem/2008/C",
        "title": "Longest Good Array",
        "rating": 800,
        "tags": [
            "binary search",
            "brute force",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Today, Sakurako was studying arrays. An array $a$ of length $n$ is\nconsidered good if and only if:\n\n  * the array $a$ is increasing, meaning $a_{i - 1} < a_i$ for all $2 \\le i \\le n$; \n  * the differences between adjacent elements are increasing, meaning $a_i - a_{i-1} < a_{i+1} - a_i$ for all $2 \\le i < n$. \n\nSakurako has come up with boundaries $l$ and $r$ and wants to\nconstruct a good array of maximum length, where $l \\le a_i \\le r$ for all\n$a_i$.\n\nHelp Sakurako find the maximum length of a good array for the given $l$\nand $r$.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 10^4$)  \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains two integers $l$ and $r$\n($1\\le l\\le r\\le 10^9$).",
        "output": "For each test case, output a single integer  \u2014 the length of the longest good\narray Sakurako can form given $l$ and $r$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1 2\n1 5\n2 2\n10 20\n1 1000000000\n</pre></td>\n    <td><pre>2\n3\n1\n5\n44721\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For $l=1$ and $r=5$, one possible array could be $(1,2,5)$. It can\nbe proven that an array of length $4$ does not exist for the given $l$\nand $r$.\n\nFor $l=2$ and $r=2$, the only possible array is $(2)$.\n\nFor $l=10$ and $r=20$, the only possible array is\n$(10,11,13,16,20)$."
    },
    {
        "problem_id": "2008D",
        "url": "https://codeforces.com/problemset/problem/2008/D",
        "title": "Sakurako's Hobby",
        "rating": 1100,
        "tags": [
            "dp",
            "dsu",
            "graphs",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "For a certain permutation $p$$^{\\text{\u2217}}$ Sakurako calls an integer\n$j$ reachable from an integer $i$ if it is possible to make $i$\nequal to $j$ by assigning $i=p_i$ a certain number of times.\n\nIf $p=[3,5,6,1,2,4]$, then, for example, $4$ is reachable from\n$1$, because: $i=1$ $\\rightarrow$ $i=p_1=3$ $\\rightarrow$\n$i=p_3=6$ $\\rightarrow$ $i=p_6=4$. Now $i=4$, so $4$ is\nreachable from $1$.\n\nEach number in the permutation is colored either black or white.\n\nSakurako defines the function $F(i)$ as the number of black integers that\nare reachable from $i$.\n\nSakurako is interested in $F(i)$ for each $1\\le i\\le n$, but\ncalculating all values becomes very difficult, so she asks you, as her good\nfriend, to compute this.\n\n$^{\\text{\u2217}}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation (the number $2$ appears twice in the array), and $[1,3,4]$\nis also not a permutation ($n=3$, but the array contains $4$).",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 10^4$)  \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1\\le\nn\\le 2\\cdot 10^5$)  \u2014 the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $p_1, p_2,\n\\dots, p_n$ ($1\\le p_i\\le n$)  \u2014 the elements of the permutation.\n\nThe third line of each test case contains a string $s$ of length $n$,\nconsisting of '0' and '1'. If $s_i=0$, then the number $p_i$ is\ncolored black; if $s_i=1$, then the number $p_i$ is colored white.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, output $n$ integers $F(1), F(2), \\dots, F(n)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1\n1\n0\n5\n1 2 4 5 3\n10101\n5\n5 4 1 3 2\n10011\n6\n3 5 6 1 2 4\n010000\n6\n1 2 3 4 5 6\n100110\n</pre></td>\n    <td><pre>1 \n0 1 1 1 1 \n2 2 2 2 2 \n4 1 4 4 1 4 \n0 1 1 0 0 1 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2008E",
        "url": "https://codeforces.com/problemset/problem/2008/E",
        "title": "Alternating String",
        "rating": 1500,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "strings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Sakurako really loves alternating strings. She calls a string $s$ of\nlowercase Latin letters an alternating string if characters in the even\npositions are the same, if characters in the odd positions are the same, and\nthe length of the string is even.\n\nFor example, the strings 'abab' and 'gg' are alternating, while the strings\n'aba' and 'ggwp' are not.\n\nAs a good friend, you decided to gift such a string, but you couldn't find\none. Luckily, you can perform two types of operations on the string:\n\n  1. Choose an index $i$ and delete the $i$-th character from the string, which will reduce the length of the string by $1$. This type of operation can be performed no more than $1$ time; \n  2. Choose an index $i$ and replace $s_i$ with any other letter. \n\nSince you are in a hurry, you need to determine the minimum number of\noperations required to make the string an alternating one.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$)  \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single number $n$ ($1 \\le\nn\\le 2\\cdot 10^5$)  \u2014 the length of the string.\n\nThe second line of each test case contains a string $s$, consisting of\nlowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of operations\nrequired to turn the string $s$ into an alternating one.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n1\na\n2\nca\n3\naab\n5\nababa\n6\nacdada\n9\nejibmyyju\n6\nbbccbc\n6\nabacba\n5\nbcbca\n5\ndcbdb\n</pre></td>\n    <td><pre>1\n0\n1\n1\n2\n6\n2\n3\n1\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the string ababa, you can delete the first character to get baba, which is\nan alternating string.\n\nFor the string acdada, you can change the first two characters to get dadada,\nwhich is an alternating string."
    },
    {
        "problem_id": "2008F",
        "url": "https://codeforces.com/problemset/problem/2008/F",
        "title": "Sakurako's Box",
        "rating": 1400,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Sakurako has a box with $n$ balls. Each ball has it's value. She wants to\nbet with her friend that if the friend randomly picks two balls from the box\n(it could be two distinct balls, but they may have the same value), the\nproduct of their values will be the same as the number that Sakurako guessed.\n\nSince Sakurako has a PhD in probability, she knows that the best number to\npick is [the expected value](http://tiny.cc/matozh_en), but she forgot how to\ncalculate it. Help Sakurako and find the expected value of the product of two\nelements from the array.\n\nIt can be shown that the expected value has the form $\\frac{P}{Q}$, where\n$P$ and $Q$ are non-negative integers, and $Q \\ne 0$. Report the\nvalue of $P \\cdot Q^{-1}(\\bmod 10^9+7)$.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 10^4$)  \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2\\le\nn\\le 2\\cdot 10^5$)  \u2014 the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\dots, a_n$ ($0\\le a_i\\le 10^9$)  \u2014 the elements of the array.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, output the value of $P \\cdot Q^{-1}(\\bmod 10^9+7)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n3 2 3\n4\n2 2 2 4\n5\n1 2 3 4 5\n</pre></td>\n    <td><pre>7\n6\n500000012\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test, Sakurako's friend can pick these pairs of balls:\n$(a_1,a_2)$, $(a_1,a_3)$, $(a_2,a_3)$. Their products equal to\n$3\\cdot 2=6$ , $3\\cdot 3=9$ , $3\\cdot 2=6$ respectively, so the\nexpected value is $\\frac{6+9+6}{3}=7$.\n\nFor the second test, Sakurako's friend can pick these pairs of balls:\n$(a_1,a_2)$, $(a_1,a_3)$, $(a_1,a_4)$, $(a_2,a_3)$,\n$(a_2,a_4)$, $(a_3,a_4)$. Their products equal to $2\\cdot 2=4$ ,\n$2\\cdot 2=4$ , $2\\cdot 4=8$, $2\\cdot 2=4$, $2\\cdot 4=8$,\n$2\\cdot 4=8$ respectively, so the expected value is\n$\\frac{4+4+8+4+8+8}{6}=\\frac{36}{6}=6$."
    },
    {
        "problem_id": "2008G",
        "url": "https://codeforces.com/problemset/problem/2008/G",
        "title": "Sakurako's Task",
        "rating": 1800,
        "tags": [
            "binary search",
            "greedy",
            "math",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Sakurako has prepared a task for you:\n\nShe gives you an array of $n$ integers and allows you to choose $i$\nand $j$ such that $i \\neq j$ and $a_i \\ge a_j$, and then assign\n$a_i = a_i - a_j$ or $a_i = a_i + a_j$. You can perform this operation\nany number of times for any $i$ and $j$, as long as they satisfy the\nconditions.\n\nSakurako asks you what is the maximum possible value of\n$mex_k$$^{\\text{\u2217}}$ of the array after any number of operations.\n\n$^{\\text{\u2217}}$$mex_k$ is the $k$-th non-negative integer that is\nabsent in the array. For example, $mex_1(\\\\{1,2,3 \\\\})=0$, since $0$\nis the first element that is not in the array, and $mex_2(\\\\{0,2,4\n\\\\})=3$, since $3$ is the second element that is not in the array.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 10^4$)  \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1\\le n\\le 2\\cdot 10^5,1\\le k\\le 10^9$)  \u2014 the number of elements in the\narray and the value $k$ for $mex_k$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\dots,a_n$ ($1\\le a_i\\le 10^9$)  \u2014 the elements of the array.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, output the maximum $mex_k$ that can be achieved\nthrough the operations.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 3\n3\n2 10\n1 1\n3 1\n1 2 3\n3 2\n1 2 4\n4 5\n2 2 2 16\n4 5\n2 2 2 3\n</pre></td>\n    <td><pre>2\n11\n3\n4\n8\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2008H",
        "url": "https://codeforces.com/problemset/problem/2008/H",
        "title": "Sakurako's Test",
        "rating": 2100,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "math",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Sakurako will soon take a test. The test can be described as an array of\nintegers $n$ and a task on it:\n\nGiven an integer $x$, Sakurako can perform the following operation any\nnumber of times:\n\n  * Choose an integer $i$ ($1\\le i\\le n$) such that $a_i\\ge x$; \n  * Change the value of $a_i$ to $a_i-x$. \n\nUsing this operation any number of times, she must find the minimum possible\nmedian$^{\\text{\u2217}}$ of the array $a$.\n\nSakurako knows the array but does not know the integer $x$. Someone let it\nslip that one of the $q$ values of $x$ will be in the next test, so\nSakurako is asking you what the answer is for each such $x$.\n\n$^{\\text{\u2217}}$The median of an array of length $n$ is the element that\nstands in the middle of the sorted array (at the $\\frac{n+2}{2}$-th\nposition for even $n$, and at the $\\frac{n+1}{2}$-th for odd)",
        "input": "The first line contains one integer $t$ ($1\\le t\\le 10^4$)  \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains two integers $n$ and $q$\n($1\\le n,q\\le 10^5$)  \u2014 the number of elements in the array and the number\nof queries.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\dots, a_n$ ($1\\le a_i\\le n$)  \u2014 the elements of the array.\n\nThe following $q$ lines each contain one integer $x$ ($1\\le x\\le\nn$).\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$10^5$. The same guarantee applies to the sum of $q$ across all test\ncases.",
        "output": "For each test case, output $q$ integers  \u2014 the answer for each query.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n5 5\n1 2 3 4 5\n1\n2\n3\n4\n5\n6 3\n1 2 6 4 1 3\n2\n1\n5\n</pre></td>\n    <td><pre>0 1 1 1 2 \n1 0 2 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2013A",
        "url": "https://codeforces.com/problemset/problem/2013/A",
        "title": "Zhan's Blender",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Today, a club fair was held at \"NSPhM\". In order to advertise his pastry club,\nZhan decided to demonstrate the power of his blender.\n\nTo demonstrate the power of his blender, Zhan has $n$ fruits.\n\nThe blender can mix up to $x$ fruits per second.\n\nIn each second, Zhan can put up to $y$ fruits into the blender. After\nthat, the blender will blend $\\min(x, c)$ fruits, where $c$ is the\nnumber of fruits inside the blender. After blending, blended fruits are\nremoved from the blender.\n\nHelp Zhan determine the minimum amount of time required for Zhan to blend all\nfruits.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains one integer $n$ ($0 \\le n \\le\n10^9$) \u2014 the number of fruits Zhan has.\n\nThe second line of each test case contains two integers $x$ and $y$\n($1 \\le x, y \\le 10^9$) \u2014 the number of fruits the blender can blend per\nsecond and the number of fruits Zhan can put into the blender per second.",
        "output": "For each testcase, output a single integer \u2014 the minimum number of seconds to\nblend all fruits.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n5\n3 4\n3\n1 2\n6\n4 3\n100\n4 3\n9\n3 3\n</pre></td>\n    <td><pre>2\n3\n2\n34\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, you can first put $2$ fruits in the blender. After\nthat, the blender will mix these $2$ fruits, and in the end, there will be\n$0$ fruits left in the blender. Then you can put $3$ fruits into the\nblender, after which the blender will mix these $3$ fruits.\n\nIn the second example, you can put $1$ fruit into the blender $3$\ntimes.\n\nIn the third example, you can first put $3$ fruits into the blender, then\nadd another $3$ fruits."
    },
    {
        "problem_id": "2013B",
        "url": "https://codeforces.com/problemset/problem/2013/B",
        "title": "Battle for Survive",
        "rating": 900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Eralim, being the mafia boss, manages a group of $n$ fighters. Fighter\n$i$ has a rating of $a_i$.\n\nEralim arranges a tournament of $n - 1$ battles, in each of which two not\nyet eliminated fighters $i$ and $j$ ($1 \\le i < j \\le n$) are\nchosen, and as a result of the battle, fighter $i$ is eliminated from the\ntournament, and the rating of fighter $j$ is reduced by the rating of\nfighter $i$. That is, $a_j$ is decreased by $a_i$. Note that\nfighter $j$'s rating can become negative. The fighters indexes do not\nchange.\n\nEralim wants to know what maximum rating the last remaining fighter can\npreserve if he chooses the battles optimally.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of fighters.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the ratings of the fighters.\n\nThe sum of $n$ over all testcases does not exceed $2 \\cdot 10^5$.",
        "output": "For each testcase, output a single integer \u2014 the maximum rating that the last\nremaining fighter can preserve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n2 1\n3\n2 2 8\n4\n1 2 4 3\n5\n1 2 3 4 5\n5\n3 2 4 5 4\n</pre></td>\n    <td><pre>-1\n8\n2\n7\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, you can arrange a fight between fighters with indices\n$1$ and $2$, where the fighter with index $2$ will win. The rating\nof the last fighter, that is, the fighter with index $2$, will be $1 - 2\n= -1$.\n\nIn the second example, you can first conduct a fight between fighters with\nindices $1$ and $2$, where the fighter with index $2$ will win,\nand then conduct a fight between fighters with indices $2$ and $3$,\nwhere the fighter with index $3$ will win.\n\nThe rating of the fighter with index $2$ after the first fight will be\n$2 - 2 = 0$. The rating of the fighter with index $3$ after the second\nfight will be $8 - 0 = 8$."
    },
    {
        "problem_id": "2013C",
        "url": "https://codeforces.com/problemset/problem/2013/C",
        "title": "Password Cracking",
        "rating": 1400,
        "tags": [
            "constructive algorithms",
            "interactive",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Dimash learned that Mansur wrote something very unpleasant about him to a\nfriend, so he decided to find out his password at all costs and discover what\nexactly he wrote.\n\nBelieving in the strength of his password, Mansur stated that his password \u2014\nis a binary string of length $n$. He is also ready to answer Dimash's\nquestions of the following type:\n\nDimash says a binary string $t$, and Mansur replies whether it is true\nthat $t$ is a substring of his password.\n\nHelp Dimash find out the password in no more than $2n$ operations;\notherwise, Mansur will understand the trick and stop communicating with him.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 100$). The description of the test cases\nfollows.",
        "output": "",
        "interaction": "At the beginning of each test case, first read $n$ ($1 \\le n \\le 100$)\n\u2014 the size of the binary string. Then proceed to guessing it.\n\nTo guess each string $s$, you can make no more than $2n$ queries of\nthe following type:\n\n  * \"? t\", where $t$ is a binary string such that ($1 \\le |t| \\le n$). \n\nIn response to this query, you will receive $1$ if $t$ is a substring\nof $s$, and $0$ otherwise.\n\nOnce you receive the answer, output a single string in the following format:\n\n  * \"! s\", where $s$ is a binary string of size $n$. \n\nAfter that, proceed to solve the next test case.\n\nIf you make an incorrect attempt or exceed the limit of $2n$ attempts, you\nwill receive $-1$ instead of an answer and get the verdict Wrong answer.\nIn this case, your program should terminate immediately to avoid undefined\nverdicts.\n\nAfter outputting the queries, do not forget to output a newline character and\nflush the output buffer. Otherwise, you will receive the verdict Solution\n\"hung\". To flush the buffer, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * refer to the documentation for other languages. \n\nHacks:\n\nTo use hacks, use the following format of tests:\n\nThe first line should contain a single integer $t$ ($1\\le t\\le 100$) \u2014\nthe number of test cases.\n\nThe first line of each test case should contain a single number $n$ ($1\n\\le n \\le 100$) \u2014 the length of the string. The second line should contain a\nbinary string of size $n$.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n\n0\n\n0\n\n1\n\n4\n\n4\n\n2</pre></td>\n    <td><pre>\n\n? 00\n\n? 000\n\n? 010\n\n! 010\n\n! 1100\n\n! 0110\n\n! 10</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, the string $010$ is given. Therefore, the answers to\nthe queries are as follows:\n\n\"? 00\" $00$ is not a substring of $010$, so the answer is $0$.\n\n\"? 000\" $000$ is not a substring, so the answer is $0$.\n\n\"? 010\" $010$ is a substring, so the answer is $1$.\n\nIn the second example, the string is $1100$, in the third $0110$, and\nin the fourth $10$."
    },
    {
        "problem_id": "2013D",
        "url": "https://codeforces.com/problemset/problem/2013/D",
        "title": "Minimize the Difference",
        "rating": 1900,
        "tags": [
            "binary search",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Zhan, tired after the contest, gave the only task that he did not solve during\nthe contest to his friend, Sungat. However, he could not solve it either, so\nwe ask you to try to solve this problem.\n\nYou are given an array $a_1, a_2, \\ldots, a_n$ of length $n$. We can\nperform any number (possibly, zero) of operations on the array.\n\nIn one operation, we choose a position $i$ ($1 \\leq i \\leq n - 1$) and\nperform the following action:\n\n  * $a_i := a_i - 1$, and $a_{i+1} := a_{i+1} + 1$. \n\nFind the minimum possible value of $\\max(a_1, a_2, \\ldots, a_n) - \\min(a_1,\na_2, \\ldots, a_n)$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases\nfollows.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq\n2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^{12}$).\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the minimum possible value of\n$\\max(a_1, a_2, \\ldots, a_n) - \\min(a_1, a_2, \\ldots, a_n)$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1\n1\n3\n1 2 3\n4\n4 1 2 3\n4\n4 2 3 1\n5\n5 14 4 10 2\n</pre></td>\n    <td><pre>0\n2\n1\n1\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the third testcase, you can perform the operation twice with $i = 1$.\n\nAfter that, the array is $a = [2, 3, 2, 3]$, and $\\max(2, 3, 2, 3) -\n\\min(2, 3, 2, 3) = 3 - 2 = 1$."
    },
    {
        "problem_id": "2013E",
        "url": "https://codeforces.com/problemset/problem/2013/E",
        "title": "Prefix GCD",
        "rating": 2200,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Since Mansur is tired of making legends, there will be no legends for this\ntask.\n\nYou are given an array of positive integer numbers $a_1, a_2, \\ldots,\na_n$. The elements of the array can be rearranged in any order. You need to\nfind the smallest possible value of the expression $$\\gcd(a_1) + \\gcd(a_1,\na_2) + \\ldots + \\gcd(a_1, a_2, \\ldots, a_n),$$ where $\\gcd(a_1, a_2,\n\\ldots, a_n)$ denotes the [greatest common divisor\n(GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of $a_1, a_2,\n\\ldots, a_n$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single number $n$ ($1 \\le n\n\\le 10^5$) \u2014 the size of the array.\n\nThe second line of each test case contains $n$ numbers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 the initial array.\n\nThe sum of $n$ over all test cases does not exceed $10^5$.\n\nThe sum of $\\max(a_1, a_2, \\ldots, a_n)$ over all test cases does not\nexceed $10^5$.",
        "output": "For each test case, output a single number on a separate line \u2014 the answer to\nthe problem.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3\n4 2 2\n2\n6 3\n3\n10 15 6\n5\n6 42 12 52 20\n4\n42 154 231 66\n</pre></td>\n    <td><pre>6\n6\n9\n14\n51\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the elements can be rearranged as follows: $[2, 4,\n2]$. Then the answer will be $\\gcd(2) + \\gcd(2, 4) + \\gcd(2, 4, 2) = 2 + 2\n+ 2 = 6$.\n\nIn the third test case, the elements can be rearranged as follows: $[6, 10,\n15]$. Then the answer will be $\\gcd(6) + \\gcd(6, 10) + \\gcd(6, 10, 15) = 6\n+ 2 + 1 = 9$."
    },
    {
        "problem_id": "2013F1",
        "url": "https://codeforces.com/problemset/problem/2013/F1",
        "title": "Game in Tree (Easy Version)",
        "rating": 2700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "games",
            "greedy",
            "implementation",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. In this version, $\\mathbf{u =\nv}$. You can make hacks only if both versions of the problem are solved.\n\nAlice and Bob are playing a fun game on a tree. This game is played on a tree\nwith $n$ vertices, numbered from $1$ to $n$. Recall that a tree\nwith $n$ vertices is an undirected connected graph with $n - 1$ edges.\n\nAlice and Bob take turns, with Alice going first. Each player starts at some\nvertex.\n\nOn their turn, a player must move from the current vertex to a neighboring\nvertex that has not yet been visited by anyone. The first player who cannot\nmake a move loses.\n\nYou are given two vertices $u$ and $v$. Represent the simple path from\nvertex $u$ to $v$ as an array $p_1, p_2, p_3, \\ldots, p_m$, where\n$p_1 = u$, $p_m = v$, and there is an edge between $p_i$ and\n$p_{i + 1}$ for all $i$ ($1 \\le i < m$).\n\nYou need to determine the winner of the game if Alice starts at vertex $1$\nand Bob starts at vertex $p_j$ for each $j$ (where $1 \\le j \\le\nm$).",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree.\n\nEach of the following $n - 1$ lines contains two integers $a$ and\n$b$ ($1 \\le a, b \\le n$), denoting an undirected edge between vertices\n$a$ and $b$. It is guaranteed that these edges form a tree.\n\nThe last line of each test case contains two integers $u$ and $v$\n($2 \\le u, v \\le n$, $\\mathbf{u = v}$).\n\nIt is guaranteed that the path from $u$ to $v$ does not pass through\nvertex $1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $m$ lines.\n\nIn the $i$-th line, print the winner of the game if Alice starts at vertex\n$1$ and Bob starts at vertex $p_i$. Print \"Alice\" (without quotes) if\nAlice wins, or \"Bob\" (without quotes) otherwise.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n1 2\n2 3\n2 2\n3\n1 2\n2 3\n3 3\n6\n1 2\n1 3\n2 4\n2 5\n1 6\n4 4\n</pre></td>\n    <td><pre>Bob\nAlice\nAlice\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "![](CDN_BASE_URL/6df79b98ba203b10924734a14ee457df) Tree from the first and\nsecond examples.\n\nIn the first test case, the path will be ($2,2$). Bob starts at vertex\n$2$, Alice will not be able to move anywhere on her first turn and will\nlose.\n\nIn the second test case, the path will be ($3,3$). Bob starts at vertex\n$3$, Alice will move to vertex $2$, and Bob will have no remaining\nvertices to visit and will lose."
    },
    {
        "problem_id": "2013F2",
        "url": "https://codeforces.com/problemset/problem/2013/F2",
        "title": "Game in Tree (Hard Version)",
        "rating": 3500,
        "tags": [
            "binary search",
            "data structures",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. In this version, it is not guaranteed\nthat $u = v$. You can make hacks only if both versions of the problem are\nsolved.\n\nAlice and Bob are playing a fun game on a tree. This game is played on a tree\nwith $n$ vertices, numbered from $1$ to $n$. Recall that a tree\nwith $n$ vertices is an undirected connected graph with $n - 1$ edges.\n\nAlice and Bob take turns, with Alice going first. Each player starts at some\nvertex.\n\nOn their turn, a player must move from the current vertex to a neighboring\nvertex that has not yet been visited by anyone. The first player who cannot\nmake a move loses.\n\nYou are given two vertices $u$ and $v$. Represent the simple path from\nvertex $u$ to $v$ as an array $p_1, p_2, p_3, \\ldots, p_m$, where\n$p_1 = u$, $p_m = v$, and there is an edge between $p_i$ and\n$p_{i + 1}$ for all $i$ ($1 \\le i < m$).\n\nYou need to determine the winner of the game if Alice starts at vertex $1$\nand Bob starts at vertex $p_j$ for each $j$ (where $1 \\le j \\le\nm$).",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree.\n\nEach of the following $n - 1$ lines contains two integers $a$ and\n$b$ ($1 \\le a, b \\le n$), denoting an undirected edge between vertices\n$a$ and $b$. It is guaranteed that these edges form a tree.\n\nThe last line of each test case contains two integers $u$ and $v$\n($2 \\le u, v \\le n$).\n\nIt is guaranteed that the path from $u$ to $v$ does not pass through\nvertex $1$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $m$ lines.\n\nIn the $i$-th line, print the winner of the game if Alice starts at vertex\n$1$ and Bob starts at vertex $p_i$. Print \"Alice\" (without quotes) if\nAlice wins, or \"Bob\" (without quotes) otherwise.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n1 2\n2 3\n2 3\n6\n1 2\n1 3\n2 4\n2 5\n1 6\n4 5\n4\n1 2\n1 3\n2 4\n2 4\n</pre></td>\n    <td><pre>Bob\nAlice\nAlice\nBob\nAlice\nBob\nAlice\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "![](CDN_BASE_URL/45f5cd537988c3a64939e74c3b13efab) Tree from the first\nexample.\n\nIn the first test case, the path will be ($2,3$). If Bob starts at vertex\n$2$, Alice will not be able to move anywhere on her first turn and will\nlose.\n\nHowever, if Bob starts at vertex $3$, Alice will move to vertex $2$,\nand Bob will have no remaining vertices to visit and will lose."
    },
    {
        "problem_id": "2014A",
        "url": "https://codeforces.com/problemset/problem/2014/A",
        "title": "Robin Helps",
        "rating": 800,
        "tags": [
            "greedy",
            "implementation"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "There is a little bit of the outlaw in everyone, and a little bit of the hero\ntoo.\n\nThe heroic outlaw Robin Hood is famous for taking from the rich and giving to\nthe poor.\n\nRobin encounters $n$ people starting from the $1$-st and ending with\nthe $n$-th. The $i$-th person has $a_i$ gold. If $a_i \\ge k$,\nRobin will take all $a_i$ gold, and if $a_i=0$, Robin will give\n$1$ gold if he has any. Robin starts with $0$ gold.\n\nFind out how many people Robin gives gold to.",
        "input": "The first line of the input contains a single integer $t$ ($1\\leq t \\leq\n10^4$) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$, $k$ ($1\n\\le n \\le 50, 1 \\le k \\le 100$) \u2014 the number of people and the threshold at\nwhich Robin Hood takes the gold.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\le a_i \\le 100$) \u2014 the gold of each person.",
        "output": "For each test case, output a single integer, the number of people that will\nget gold from Robin Hood.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2 2\n2 0\n3 2\n3 0 0\n6 2\n0 3 0 0 0 0\n2 5\n5 4\n</pre></td>\n    <td><pre>1\n2\n3\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Robin takes $2$ gold from the first person and\ngives a gold to the second person.\n\nIn the second test case, Robin takes $3$ gold and gives $1$ gold to\neach of the next $2$ people.\n\nIn the third test case, Robin takes $3$ gold and so only gives gold to\n$3$ other people."
    },
    {
        "problem_id": "2014B",
        "url": "https://codeforces.com/problemset/problem/2014/B",
        "title": "Robin Hood and the Major Oak",
        "rating": 800,
        "tags": [
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "In Sherwood, the trees are our shelter, and we are all children of the forest.\n\nThe Major Oak in Sherwood is known for its majestic foliage, which provided\nshelter to Robin Hood and his band of merry men and women.\n\nThe Major Oak grows $i^i$ new leaves in the $i$-th year. It starts\nwith $1$ leaf in year $1$.\n\nLeaves last for $k$ years on the tree. In other words, leaves grown in\nyear $i$ last between years $i$ and $i+k-1$ inclusive.\n\nRobin considers even numbers lucky. Help Robin determine whether the Major Oak\nwill have an even number of leaves in year $n$.",
        "input": "The first line of the input contains a single integer $t$ ($1 \\le t \\le\n10^4$) \u2014 the number of test cases.\n\nEach test case consists of two integers $n$, $k$ ($1 \\le n \\le\n10^9$, $1 \\le k \\le n$) \u2014 the requested year and the number of years\nduring which the leaves remain.",
        "output": "For each test case, output one line, \"YES\" if in year $n$ the Major Oak\nwill have an even number of leaves and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1 1\n2 1\n2 2\n3 2\n4 4\n</pre></td>\n    <td><pre>NO\nYES\nNO\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there is only $1$ leaf.\n\nIn the second test case, $k=1$, so in the $2$-nd year there will be\n$2^2=4$ leaves.\n\nIn the third test case, $k=2$, so in the $2$-nd year there will be\n$1+2^2=5$ leaves.\n\nIn the fourth test case, $k=2$, so in the $3$-rd year there will be\n$2^2 + 3^3 = 4 + 27 = 31$ leaves."
    },
    {
        "problem_id": "2014C",
        "url": "https://codeforces.com/problemset/problem/2014/C",
        "title": "Robin Hood in Town",
        "rating": 1100,
        "tags": [
            "binary search",
            "greedy",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "In Sherwood, we judge a man not by his wealth, but by his merit.\n\nLook around, the rich are getting richer, and the poor are getting poorer. We\nneed to take from the rich and give to the poor. We need Robin Hood!\n\nThere are $n$ people living in the town. Just now, the wealth of the\n$i$-th person was $a_i$ gold. But guess what? The richest person has\nfound an extra pot of gold!\n\nMore formally, find an $a_j=max(a_1, a_2, \\dots, a_n)$, change $a_j$\nto $a_j+x$, where $x$ is a non-negative integer number of gold found\nin the pot. If there are multiple maxima, it can be any one of them.\n\nA person is unhappy if their wealth is strictly less than half of the average\nwealth$^{\\text{\u2217}}$.\n\nIf strictly more than half of the total population $n$ are unhappy, Robin\nHood will appear by popular demand.\n\nDetermine the minimum value of $x$ for Robin Hood to appear, or output\n$-1$ if it is impossible.\n\n$^{\\text{\u2217}}$The average wealth is defined as the total wealth divided by\nthe total population $n$, that is, $\\frac{\\sum a_i}{n}$, the result is\na real number.",
        "input": "The first line of input contains one integer $t$ ($1 \\le t \\le 10^4$)\n\u2014 the number of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le\n2\\cdot10^5$) \u2014 the total population.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 the wealth of each person.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output one integer \u2014 the minimum number of gold that the\nrichest person must find for Robin Hood to appear. If it is impossible, output\n$-1$ instead.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1\n2\n2\n2 19\n3\n1 3 20\n4\n1 2 3 4\n5\n1 2 3 4 5\n6\n1 2 1 1 1 25\n</pre></td>\n    <td><pre>-1\n-1\n0\n15\n16\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it is impossible for a single person to be unhappy.\n\nIn the second test case, there is always $1$ happy person (the richest).\n\nIn the third test case, no additional gold are required, so the answer is\n$0$.\n\nIn the fourth test case, after adding $15$ gold, the average wealth\nbecomes $\\frac{25}{4}$, and half of this average is $\\frac{25}{8}$,\nresulting in $3$ people being unhappy.\n\nIn the fifth test case, after adding $16$ gold, the average wealth becomes\n$\\frac{31}{5}$, resulting in $3$ people being unhappy."
    },
    {
        "problem_id": "2014D",
        "url": "https://codeforces.com/problemset/problem/2014/D",
        "title": "Robert Hood and Mrs Hood",
        "rating": 1400,
        "tags": [
            "brute force",
            "data structures",
            "greedy",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Impress thy brother, yet fret not thy mother.\n\nRobin's brother and mother are visiting, and Robin gets to choose the start\nday for each visitor.\n\nAll days are numbered from $1$ to $n$. Visitors stay for $d$\ncontinuous days, all of those $d$ days must be between day $1$ and\n$n$ inclusive.\n\nRobin has a total of $k$ risky 'jobs' planned. The $i$-th job takes\nplace between days $l_i$ and $r_i$ inclusive, for $1 \\le i \\le k$.\nIf a job takes place on any of the $d$ days, the visit overlaps with this\njob (the length of overlap is unimportant).\n\nRobin wants his brother's visit to overlap with the maximum number of distinct\njobs, and his mother's the minimum.\n\nFind suitable start days for the visits of Robin's brother and mother. If\nthere are multiple suitable days, choose the earliest one.",
        "input": "The first line of the input contains a single integer $t$ ($1\\leq t \\leq\n10^4$) \u2014 the number of test cases.\n\nThe first line of each test case consists of three integers $n$, $d$,\n$k$ ($1 \\le n \\le 10^5, 1 \\le d, k \\le n$) \u2014 the number of total days,\nduration of the visits, and the number of jobs.\n\nThen follow $k$ lines of each test case, each with two integers $l_i$\nand $r_i$ ($1 \\le l_i \\le r_i \\le n$) \u2014 the start and end day of each\njob.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output two integers, the best starting days of Robin's\nbrother and mother respectively. Both visits must fit between day $1$ and\n$n$ inclusive.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2 1 1\n1 2\n4 1 2\n1 2\n2 4\n7 2 3\n1 2\n1 3\n6 7\n5 1 2\n1 2\n3 5\n9 2 1\n2 8\n9 2 4\n7 9\n4 8\n1 3\n2 3\n</pre></td>\n    <td><pre>1 1\n2 1\n1 4\n1 1\n1 1\n3 4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the only job fills all $2$ days, both should visit\non day $1$.\n\nIn the second test case, day $2$ overlaps with $2$ jobs and day\n$1$ overlaps with only $1$.\n\nIn the third test case, Robert visits for days $[1,2]$, Mrs. Hood visits\nfor days $[4,5]$."
    },
    {
        "problem_id": "2014E",
        "url": "https://codeforces.com/problemset/problem/2014/E",
        "title": "Rendez-vous de Marian et Robin",
        "rating": 1800,
        "tags": [
            "dfs and similar",
            "graphs",
            "shortest paths"
        ],
        "div": "Div. 3",
        "time_limit_ms": 5000,
        "memory_limit_mb": 256,
        "description": "In the humble act of meeting, joy doth unfold like a flower in bloom.\n\nAbsence makes the heart grow fonder. Marian sold her last ware at the Market\nat the same time Robin finished training at the Major Oak. They couldn't wait\nto meet, so they both start without delay.\n\nThe travel network is represented as $n$ vertices numbered from $1$ to\n$n$ and $m$ edges. The $i$-th edge connects vertices $u_i$ and\n$v_i$, and takes $w_i$ seconds to travel (all $w_i$ are even).\nMarian starts at vertex $1$ (Market) and Robin starts at vertex $n$\n(Major Oak).\n\nIn addition, $h$ of the $n$ vertices each has a single horse\navailable. Both Marian and Robin are capable riders, and could mount horses in\nno time (i.e. in $0$ seconds). Travel times are halved when riding. Once\nmounted, a horse lasts the remainder of the travel. Meeting must take place on\na vertex (i.e. not on an edge). Either could choose to wait on any vertex.\n\nOutput the earliest time Robin and Marian can meet. If vertices $1$ and\n$n$ are disconnected, output $-1$ as the meeting is cancelled.",
        "input": "The first line of the input contains a single integer $t$ ($1\\leq t \\leq\n10^4$) \u2014 the number of test cases.\n\nThe first line of each test case consists of three integers $n$, $m$,\n$h$ ($2 \\le n \\le 2 \\cdot 10^5, \\;1 \\le m \\le 2 \\cdot 10^5, \\; 1 \\le h\n\\le n$) \u2014 the number of vertices, the number of edges and the number of\nvertices that have a single horse.\n\nThe second line of each test case contains $h$ distinct integers $a_1,\na_2, \\ldots, a_h$ ($1 \\le a_i \\le n$) \u2014 the vertices that have a single\nhorse available.\n\nThen follow $m$ lines of each test case, each with three integers\n$u_i$, $v_i$, $w_i$ ($1\\le u_i,v_i \\le n, \\; 2\\le w_i \\le\n10^6$) \u2014 meaning that there is an edge between vertices $u_i$ and\n$v_i$ with travel cost $w_i$ seconds without a horse.\n\nThere are no self loops or multiple edges. By good fortune, all $w_i$ are\neven integers.\n\nIt is guaranteed that the sums of both $n$ and $m$ over all test cases\ndo not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer, the earliest time Robin and\nMarian can meet. If it is impossible for them to meet, output $-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2 1 1\n1\n1 2 10\n3 1 2\n2 3\n1 2 10\n3 3 1\n2\n1 2 4\n1 3 10\n2 3 6\n4 3 2\n2 3\n1 2 10\n2 3 18\n3 4 16\n3 2 1\n2\n1 2 4\n1 3 16\n7 7 1\n3\n1 5 2\n2 6 12\n1 2 12\n6 4 8\n7 3 4\n6 3 4\n7 6 4\n</pre></td>\n    <td><pre>5\n-1\n6\n19\n14\n12\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Marian rides from vertex $1$ to vertex $2$,\nRobin waits.\n\nIn the second test case, vertices $1$ and $3$ are not connected.\n\nIn the third test case, both Marian and Robin travel to vertex $2$ to\nmeet.\n\nIn the fourth test case, Marian travels to vertex $2$ without a horse,\nmounts the horse at vertex $2$ and rides to vertex $3$ to meet Robin.\n\nIn the fifth test case, Marian travels to vertex $2$ without a horse,\nmounts the horse at vertex $2$ and rides back to vertex $1$ and then\nto vertex $3$. Robin waits."
    },
    {
        "problem_id": "2014F",
        "url": "https://codeforces.com/problemset/problem/2014/F",
        "title": "Sheriff's Defense",
        "rating": 2000,
        "tags": [
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "\"Why, master,\" quoth Little John, taking the bags and weighing them in his\nhand, \"here is the chink of gold.\"\n\nThe folk hero Robin Hood has been troubling Sheriff of Nottingham greatly.\nSheriff knows that Robin Hood is about to attack his camps and he wants to be\nprepared.\n\nSheriff of Nottingham built the camps with strategy in mind and thus there are\nexactly $n$ camps numbered from $1$ to $n$ and $n-1$ trails,\neach connecting two camps. Any camp can be reached from any other camp. Each\ncamp $i$ has initially $a_i$ gold.\n\nAs it is now, all camps would be destroyed by Robin. Sheriff can strengthen a\ncamp by subtracting exactly $c$ gold from each of its neighboring camps\nand use it to build better defenses for that camp. Strengthening a camp\ndoesn't change its gold, only its neighbors' gold. A camp can have negative\ngold.\n\nAfter Robin Hood's attack, all camps that have been strengthened survive the\nattack, all others are destroyed.\n\nWhat's the maximum gold Sheriff can keep in his surviving camps after Robin\nHood's attack if he strengthens his camps optimally?\n\nCamp $a$ is neighboring camp $b$ if and only if there exists a trail\nconnecting $a$ and $b$. Only strengthened camps count towards the\nanswer, as others are destroyed.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nEach test case begins with two integers $n$, $c$ ($1 \\le n \\le\n2\\cdot10^5, 1 \\le c \\le 10^9$) \u2014 the number of camps and the gold taken from\neach neighboring camp for strengthening.\n\nThe second line of each test case contains $n$ integers\n$a_1,a_2,\\dots,a_n$ ($-10^9 \\le a_i \\le 10^9$) \u2014 the initial gold of\neach camp.\n\nThen follow $n-1$ lines, each with integers $u$, $v$ ($1 \\le u,\nv \\le n$, $u \\ne v$) \u2014 meaning that there is a trail between $u$ and\n$v$.\n\nThe sum of $n$ over all test cases doesn't exceed $2\\cdot10^5$.\n\nIt is guaranteed that any camp is reachable from any other camp.",
        "output": "Output a single integer, the maximum gold Sheriff of Nottingham can keep in\nhis surviving camps after Robin Hood's attack.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 1\n2 3 1\n1 2\n2 3\n3 1\n3 6 3\n1 2\n2 3\n3 1\n-2 -3 -1\n1 2\n2 3\n6 1\n5 -4 3 6 7 3\n4 1\n5 1\n3 5\n3 6\n1 2\n8 1\n3 5 2 7 8 5 -3 -4\n7 3\n1 8\n4 3\n3 5\n7 6\n8 7\n2 1\n</pre></td>\n    <td><pre>3\n8\n0\n17\n26\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it is optimal to strengthen the second base. The final\ngold at each base is $[1,3,0]$.\n\nIn the second test case, it is optimal to strengthen all bases. The final gold\nat each base is $[2,4,2]$.\n\nIn the third test case, it is optimal to not strengthen any base."
    },
    {
        "problem_id": "2014G",
        "url": "https://codeforces.com/problemset/problem/2014/G",
        "title": "Milky Days",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "greedy",
            "implementation"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "What is done is done, and the spoilt milk cannot be helped.\n\nLittle John is as little as night is day \u2014 he was known to be a giant, at\npossibly $2.1$ metres tall. It has everything to do with his love for\nmilk.\n\nHis dairy diary has $n$ entries, showing that he acquired $a_i$ pints\nof fresh milk on day $d_i$. Milk declines in freshness with time and stays\ndrinkable for a maximum of $k$ days. In other words, fresh milk acquired\non day $d_i$ will be drinkable between days $d_i$ and $d_i+k-1$\ninclusive.\n\nEvery day, Little John drinks drinkable milk, up to a maximum of $m$\npints. In other words, if there are less than $m$ pints of milk, he will\ndrink them all and not be satisfied; if there are at least $m$ pints of\nmilk, he will drink exactly $m$ pints and be satisfied, and it's a milk\nsatisfaction day.\n\nLittle John always drinks the freshest drinkable milk first.\n\nDetermine the number of milk satisfaction days for Little John.",
        "input": "The first line of the input contains a single integer $t$ ($1\\leq t \\leq\n10^4$), the number of test cases.\n\nThe first line of each test case consists of three integers $n$, $m$,\n$k$ ($1\\le n$, $m$, $k \\le 10^5$), the number of diary\nentries, the maximum pints needed for a milk satisfaction day, and the\nduration of milk's freshness.\n\nThen follow $n$ lines of each test case, each with two integers $d_i$\nand $a_i$ ($1\\le d_i$, $a_i \\le 10^6$), the day on which the milk\nwas acquired and the number of pints acquired. They are sorted in increasing\nvalues of $d_i$, and all values of $d_i$ are distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer, the number of milk satisfaction\ndays.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 1 3\n1 5\n2 3 3\n1 5\n2 7\n4 5 2\n1 9\n2 6\n4 9\n5 6\n5 2 4\n4 7\n5 3\n7 1\n11 2\n12 1\n4 1 3\n5 10\n9 4\n14 8\n15 3\n5 5 5\n8 9\n10 7\n16 10\n21 5\n28 9\n</pre></td>\n    <td><pre>3\n3\n4\n5\n10\n6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $5$ pints of milk are good for $3$ days before\nspoiling.\n\nIn the second test case, the following will happen:\n\n  * On day $1$, he will receive $5$ pints of milk and drink $3$ of them (leaving $2$ pints from day $1$); \n  * On day $2$, he will receive $7$ pints of milk and drink $3$ of them (leaving $2$ pints from day $1$ and $4$ pints from day $2$); \n  * On day $3$, he will drink $3$ pints from day $2$ (leaving $2$ pints from day $1$ and $1$ pint from day $2$); \n  * On day $4$, the milk acquired on day $1$ will spoil, and he will drink $1$ pint from day $2$ (no more milk is left)."
    },
    {
        "problem_id": "2014H",
        "url": "https://codeforces.com/problemset/problem/2014/H",
        "title": "Robin Hood Archery",
        "rating": 1900,
        "tags": [
            "data structures",
            "divide and conquer",
            "greedy",
            "hashing"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "At such times archery was always the main sport of the day, for the\nNottinghamshire yeomen were the best hand at the longbow in all merry England,\nbut this year the Sheriff hesitated...\n\nSheriff of Nottingham has organized a tournament in archery. It's the final\nround and Robin Hood is playing against Sheriff!\n\nThere are $n$ targets in a row numbered from $1$ to $n$. When a\nplayer shoots target $i$, their score increases by $a_i$ and the\ntarget $i$ is destroyed. The game consists of turns and players alternate\nbetween whose turn it is. Robin Hood always starts the game, then Sheriff and\nso on. The game continues until all targets are destroyed. Both players start\nwith score $0$.\n\nAt the end of the game, the player with most score wins and the other player\nloses. If both players have the same score, it's a tie and no one wins or\nloses. In each turn, the player can shoot any target that wasn't shot before.\nBoth play optimally to get the most score possible.\n\nSheriff of Nottingham has a suspicion that he might lose the game! This cannot\nhappen, you must help Sheriff. Sheriff will pose $q$ queries, each\nspecifying $l$ and $r$. This means that the game would be played only\nwith targets $l, l+1, \\dots, r$, as others would be removed by Sheriff\nbefore the game starts.\n\nFor each query $l$, $r$, determine whether the Sheriff can not lose\nthe game when only considering the targets $l, l+1, \\dots, r$.",
        "input": "The first line of input contains one integer $t$ ($1 \\le t \\le 10^4$)\n\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$, $q$ ($1\n\\le n,q \\le 2\\cdot10^5$) \u2014 the number of targets and the queries Sheriff\nwill pose.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 the points for hitting each\ntarget.\n\nThen follow $q$ lines, each with two integers $l$ and $r$ ($1\n\\le l \\le r \\le n$) \u2014 the range of the targets that is considered for each\nquery.\n\nIt is guaranteed that the sum of both $n$ and $q$ across all test\ncases does not exceed $2 \\cdot 10^5$.",
        "output": "For each query, output \"YES\", if the Sheriff does not lose the game when only\nconsidering the targets $l, l+1, \\dots, r$, and \"NO\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3 3\n1 2 2\n1 2\n1 3\n2 3\n5 3\n2 1 2 1 1\n1 2\n1 3\n4 5\n</pre></td>\n    <td><pre>NO\nNO\nYES\nNO\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2018A",
        "url": "https://codeforces.com/problemset/problem/2018/A",
        "title": "Cards Partition",
        "rating": 1600,
        "tags": [
            "2-sat",
            "brute force",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "[DJ Genki vs Gram - Einherjar Joker](https://soundcloud.com/leon-\nhwang-368077289/einherjar-joker-dj-genki-vs-gram)\n\n\u2800\n\nYou have some cards. An integer between $1$ and $n$ is written on each\ncard: specifically, for each $i$ from $1$ to $n$, you have\n$a_i$ cards which have the number $i$ written on them.\n\nThere is also a shop which contains unlimited cards of each type. You have\n$k$ coins, so you can buy at most $k$ new cards in total, and the\ncards you buy can contain any integer between $\\mathbf{1}$ and\n$\\mathbf{n}$, inclusive.\n\nAfter buying the new cards, you must partition all your cards into decks,\naccording to the following rules:\n\n  * all the decks must have the same size; \n  * there are no pairs of cards with the same value in the same deck. \n\nFind the maximum possible size of a deck after buying cards and partitioning\nthem optimally.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1\n\\leq n \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 10^{16}$) \u2014 the number of\ndistinct types of cards and the number of coins.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\leq a_i \\leq 10^{10}$, $\\sum a_i \\geq 1$) \u2014 the\nnumber of cards of type $i$ you have at the beginning, for each $1 \\leq\ni \\leq n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the maximum possible size of a\ndeck if you operate optimally.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9\n3 1\n3 2 2\n5 4\n2 6 1 2 4\n2 100\n1410065408 10000000000\n10 8\n7 4 6 6 9 3 10 2 8 7\n2 12\n2 2\n2 70\n0 1\n1 0\n1\n3 0\n2 1 2\n3 1\n0 3 3\n</pre></td>\n    <td><pre>2\n3\n1\n7\n2\n2\n1\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can buy one card with the number $1$, and your\ncards become $[1, 1, 1, 1, 2, 2, 3, 3]$. You can partition them into the\ndecks $[1, 2], [1, 2], [1, 3], [1, 3]$: they all have size $2$, and\nthey all contain distinct values. You can show that you cannot get a partition\nwith decks of size greater than $2$, so the answer is $2$.\n\nIn the second test case, you can buy two cards with the number $1$ and one\ncard with the number $3$, and your cards become $[1, 1, 1, 1, 2, 2, 2,\n2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5]$, which can be partitioned into $[1, 2,\n3], [1, 2, 4], [1, 2, 5], [1, 2, 5], [2, 3, 5], [2, 4, 5]$. You can show\nthat you cannot get a partition with decks of size greater than $3$, so\nthe answer is $3$."
    },
    {
        "problem_id": "2018B",
        "url": "https://codeforces.com/problemset/problem/2018/B",
        "title": "Speedbreaker",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "[Djjaner - Speedbreaker](https://soundcloud.com/luciano-\nferrari-151560131/speedbreaker)\n\n\u2800\n\nThere are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to\nright.\n\n  * At time $1$, you conquer exactly one city, called the starting city. \n  * At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it. \n\nYou win if, for each $i$, you conquer city $i$ at a time no later than\n$a_i$. A winning strategy may or may not exist, also depending on the\nstarting city. How many starting cities allow you to win?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of cities.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le n$) \u2014 the deadlines for conquering the\ncities.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the number of starting cities\nthat allow you to win.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n6\n6 3 3 3 5 5\n6\n5 6 4 1 4 5\n9\n8 6 4 2 1 3 5 7 9\n</pre></td>\n    <td><pre>3\n0\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, cities $2$, $3$, and $4$ are good starting\ncities.\n\nIn the second test case, there are no good starting cities.\n\nIn the third test case, the only good starting city is city $5$."
    },
    {
        "problem_id": "2018C",
        "url": "https://codeforces.com/problemset/problem/2018/C",
        "title": "Tree Pruning",
        "rating": 1700,
        "tags": [
            "brute force",
            "dfs and similar",
            "greedy",
            "sortings",
            "trees"
        ],
        "div": "Div. 1",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "[t+pazolite, ginkiha, Hommarju - Paved\nGarden](https://soundcloud.com/fractalex-gd/ginkiha-paved-garden-little)\n\n\u2800\n\nYou are given a tree with $n$ nodes, rooted at node $1$. In this\nproblem, a leaf is a non-root node with degree $1$.\n\nIn one operation, you can remove a leaf and the edge adjacent to it (possibly,\nnew leaves appear). What is the minimum number of operations that you have to\nperform to get a tree, also rooted at node $1$, where all the leaves are\nat the same distance from the root?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq\nn \\leq 5 \\cdot 10^5$) \u2014 the number of nodes.\n\nEach of the next $n-1$ lines contains two integers $u$, $v$ ($1\n\\leq u, v \\leq n$, $u \\neq v$), describing an edge that connects $u$\nand $v$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the minimum number of operations\nneeded to achieve your goal.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n7\n1 2\n1 3\n2 4\n2 5\n4 6\n4 7\n7\n1 2\n1 3\n1 4\n2 5\n3 6\n5 7\n15\n12 9\n1 6\n6 14\n9 11\n8 7\n3 5\n13 5\n6 10\n13 15\n13 6\n14 12\n7 2\n8 1\n1 4\n</pre></td>\n    <td><pre>2\n2\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first two examples, the tree is as follows:\n\n![](CDN_BASE_URL/754511fbdb88995aaa49733a1fe75dfc)\n\nIn the first example, by removing edges $(1, 3)$ and $(2, 5)$, the\nresulting tree has all leaves (nodes $6$ and $7$) at the same distance\nfrom the root (node $1$), which is $3$. The answer is $2$, as it\nis the minimum number of edges that need to be removed to achieve the goal.\n\nIn the second example, removing edges $(1, 4)$ and $(5, 7)$ results in\na tree where all leaves (nodes $4$ and $5$) are at the same distance\nfrom the root (node $1$), which is $2$."
    },
    {
        "problem_id": "2018D",
        "url": "https://codeforces.com/problemset/problem/2018/D",
        "title": "Max Plus Min Plus Size",
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "dsu",
            "greedy",
            "implementation",
            "matrices",
            "sortings"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "[EnV - The Dusty Dragon Tavern](https://soundcloud.com/envyofficial/env-the-\ndusty-dragon-tavern)\n\n\u2800\n\nYou are given an array $a_1, a_2, \\ldots, a_n$ of positive integers.\n\nYou can color some elements of the array red, but there cannot be two adjacent\nred elements (i.e., for $1 \\leq i \\leq n-1$, at least one of $a_i$ and\n$a_{i+1}$ must not be red).\n\nYour score is the maximum value of a red element, plus the minimum value of a\nred element, plus the number of red elements. Find the maximum score you can\nget.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the maximum possible score you\ncan get after coloring some elements red according to the statement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n5 4 5\n3\n4 5 4\n10\n3 3 3 3 4 1 2 3 5 4\n10\n17 89 92 42 29 41 92 14 70 45\n</pre></td>\n    <td><pre>12\n11\n12\n186\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can color the array as follows:\n$[\\color{red}{5}, 4, \\color{red}{5}]$. Your score is $\\max([5, 5]) +\n\\min([5, 5]) + \\text{size}([5, 5]) = 5+5+2 = 12$. This is the maximum score\nyou can get.\n\nIn the second test case, you can color the array as follows: $[4,\n\\color{red}{5}, 4]$. Your score is $\\max([5]) + \\min([5]) +\n\\text{size}([5]) = 5+5+1 = 11$. This is the maximum score you can get.\n\nIn the third test case, you can color the array as follows:\n$[\\color{red}{3}, 3, \\color{red}{3}, 3, \\color{red}{4}, 1, 2,\n\\color{red}{3}, 5, \\color{red}{4}]$. Your score is $\\max([3, 3, 4, 3, 4])\n+ \\min([3, 3, 4, 3, 4]) + \\text{size}([3, 3, 4, 3, 4]) = 4+3+5 = 12$. This\nis the maximum score you can get."
    },
    {
        "problem_id": "2018E1",
        "url": "https://codeforces.com/problemset/problem/2018/E1",
        "title": "Complex Segments (Easy Version)",
        "rating": 3300,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dsu",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 1",
        "time_limit_ms": 6000,
        "memory_limit_mb": 256,
        "description": "[Ken Arai - COMPLEX](https://soundcloud.com/diatomichail2/complex)\n\n\u2800\n\nThis is the easy version of the problem. In this version, the constraints on\n$n$ and the time limit are lower. You can make hacks only if both versions\nof the problem are solved.\n\nA set of (closed) segments is complex if it can be partitioned into some\nsubsets such that\n\n  * all the subsets have the same size; and \n  * a pair of segments intersects if and only if the two segments are in the same subset. \n\nYou are given $n$ segments $[l_1, r_1], [l_2, r_2], \\ldots, [l_n,\nr_n]$. Find the maximum size of a complex subset of these segments.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^4$) \u2014 the number of segments.\n\nThe second line of each test case contains $n$ integers $l_1, l_2,\n\\ldots, l_n$ ($1 \\le l_i \\le 2n$) \u2014 the left endpoints of the segments.\n\nThe third line of each test case contains $n$ integers $r_1, r_2,\n\\ldots, r_n$ ($l_i \\leq r_i \\le 2n$) \u2014 the right endpoints of the\nsegments.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^4$.",
        "output": "For each test case, output a single integer: the maximum size of a complex\nsubset of the given segments.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n1 2 3\n5 4 6\n5\n1 2 3 6 8\n5 4 7 9 10\n5\n3 1 4 1 5\n7 2 6 5 10\n</pre></td>\n    <td><pre>3\n4\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, all pairs of segments intersect, therefore it is\noptimal to form a single group containing all of the three segments.\n\nIn the second test case, there is no valid partition for all of the five\nsegments. A valid partition with four segments is the following: $\\\\{\\\\{ [1,\n5], [2, 4] \\\\}, \\\\{ [6, 9], [8, 10] \\\\}\\\\}$.\n\nIn the third test case, it is optimal to make a single group containing all\nthe segments except the second."
    },
    {
        "problem_id": "2018E2",
        "url": "https://codeforces.com/problemset/problem/2018/E2",
        "title": "Complex Segments (Hard Version)",
        "rating": 3400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dsu",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 1",
        "time_limit_ms": 13000,
        "memory_limit_mb": 256,
        "description": "[Ken Arai - COMPLEX](https://soundcloud.com/diatomichail2/complex)\n\n\u2800\n\nThis is the hard version of the problem. In this version, the constraints on\n$n$ and the time limit are higher. You can make hacks only if both\nversions of the problem are solved.\n\nA set of (closed) segments is complex if it can be partitioned into some\nsubsets such that\n\n  * all the subsets have the same size; and \n  * a pair of segments intersects if and only if the two segments are in the same subset. \n\nYou are given $n$ segments $[l_1, r_1], [l_2, r_2], \\ldots, [l_n,\nr_n]$. Find the maximum size of a complex subset of these segments.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^3$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 3 \\cdot 10^5$) \u2014 the number of segments.\n\nThe second line of each test case contains $n$ integers $l_1, l_2,\n\\ldots, l_n$ ($1 \\le l_i \\le 2n$) \u2014 the left endpoints of the segments.\n\nThe third line of each test case contains $n$ integers $r_1, r_2,\n\\ldots, r_n$ ($l_i \\leq r_i \\le 2n$) \u2014 the right endpoints of the\nsegments.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$3 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the maximum size of a complex\nsubset of the given segments.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n1 2 3\n5 4 6\n5\n1 2 3 6 8\n5 4 7 9 10\n5\n3 1 4 1 5\n7 2 6 5 10\n</pre></td>\n    <td><pre>3\n4\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, all pairs of segments intersect, therefore it is\noptimal to form a single group containing all of the three segments.\n\nIn the second test case, there is no valid partition for all of the five\nsegments. A valid partition with four segments is the following: $\\\\{\\\\{ [1,\n5], [2, 4] \\\\}, \\\\{ [6, 9], [8, 10] \\\\}\\\\}$.\n\nIn the third test case, it is optimal to make a single group containing all\nthe segments except the second."
    },
    {
        "problem_id": "2018F1",
        "url": "https://codeforces.com/problemset/problem/2018/F1",
        "title": "Speedbreaker Counting (Easy Version)",
        "rating": 2900,
        "tags": [
            "combinatorics",
            "dp",
            "greedy",
            "math"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 1024,
        "description": "[NightHawk22 - Isolation](https://soundcloud.com/vepium/nighthawk22-isolation-\nofficial-limbo-remix)\n\n\u2800\n\nThis is the easy version of the problem. In the three versions, the\nconstraints on $n$ and the time limit are different. You can make hacks\nonly if all the versions of the problem are solved.\n\nThis is the statement of Problem D1B:\n\n  * There are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to right.\n    * At time $1$, you conquer exactly one city, called the starting city. \n    * At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it. \n\nYou win if, for each $i$, you conquer city $i$ at a time no later than\n$a_i$. A winning strategy may or may not exist, also depending on the\nstarting city. How many starting cities allow you to win?\n\nFor each $0 \\leq k \\leq n$, count the number of arrays of positive\nintegers $a_1, a_2, \\ldots, a_n$ such that\n\n  * $1 \\leq a_i \\leq n$ for each $1 \\leq i \\leq n$; \n  * the answer to Problem D1B is $k$. \n\nThe answer can be very large, so you have to calculate it modulo a given prime\n$p$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 80$). The description of the test cases\nfollows.\n\nThe only line of each test case contains two integers $n$, $p$ ($1\n\\le n \\le 80$, $10^8 \\leq p \\leq 10^9$, $p$ is prime) \u2014 the number\nof cities and the modulo.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$80$.",
        "output": "For each test case, output $n+1$ integers: the $i$-th integer should\nbe the number of arrays that satisfy the conditions for $k = i-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>11\n1 998244353\n2 998244353\n3 998244353\n4 998244353\n5 998244353\n6 998244353\n7 998244353\n8 998244353\n9 998244353\n10 102275857\n10 999662017\n</pre></td>\n    <td><pre>0 1 \n1 2 1 \n14 7 4 2 \n183 34 19 16 4 \n2624 209 112 120 48 12 \n42605 1546 793 992 468 216 36 \n785910 13327 6556 9190 4672 2880 864 144 \n16382863 130922 61939 94992 50100 36960 14256 4608 576 \n382823936 1441729 657784 1086596 583344 488700 216000 96480 23040 2880 \n20300780 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400 \n944100756 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case,\n\n  * arrays with $1$ good starting city: $[1]$. \n\nIn the second test case,\n\n  * arrays with $0$ good starting cities: $[1, 1]$; \n  * arrays with $1$ good starting city: $[1, 2]$, $[2, 1]$; \n  * arrays with $2$ good starting cities: $[2, 2]$. \n\nIn the third test case,\n\n  * arrays with $0$ good starting cities: $[1, 1, 1]$, $[1, 1, 2]$, $[1, 1, 3]$, $[1, 2, 1]$, $[1, 2, 2]$, $[1, 3, 1]$, $[1, 3, 2]$, $[2, 1, 1]$, $[2, 1, 2]$, $[2, 2, 1]$, $[2, 2, 2]$, $[2, 3, 1]$, $[2, 3, 2]$, $[3, 1, 1]$; \n  * arrays with $1$ good starting city: $[1, 2, 3]$, $[1, 3, 3]$, $[2, 1, 3]$, $[3, 1, 2]$, $[3, 1, 3]$, $[3, 2, 1]$, $[3, 3, 1]$; \n  * arrays with $2$ good starting cities: $[2, 2, 3]$, $[2, 3, 3]$, $[3, 2, 2]$, $[3, 3, 2]$; \n  * arrays with $3$ good starting cities: $[3, 2, 3]$, $[3, 3, 3]$."
    },
    {
        "problem_id": "2018F2",
        "url": "https://codeforces.com/problemset/problem/2018/F2",
        "title": "Speedbreaker Counting (Medium Version)",
        "rating": 3000,
        "tags": [
            "dp",
            "greedy",
            "math"
        ],
        "div": "Div. 1",
        "time_limit_ms": 10000,
        "memory_limit_mb": 1024,
        "description": "[NightHawk22 - Isolation](https://soundcloud.com/vepium/nighthawk22-isolation-\nofficial-limbo-remix)\n\n\u2800\n\nThis is the medium version of the problem. In the three versions, the\nconstraints on $n$ and the time limit are different. You can make hacks\nonly if all the versions of the problem are solved.\n\nThis is the statement of Problem D1B:\n\n  * There are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to right.\n    * At time $1$, you conquer exactly one city, called the starting city. \n    * At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it. \n\nYou win if, for each $i$, you conquer city $i$ at a time no later than\n$a_i$. A winning strategy may or may not exist, also depending on the\nstarting city. How many starting cities allow you to win?\n\nFor each $0 \\leq k \\leq n$, count the number of arrays of positive\nintegers $a_1, a_2, \\ldots, a_n$ such that\n\n  * $1 \\leq a_i \\leq n$ for each $1 \\leq i \\leq n$; \n  * the answer to Problem D1B is $k$. \n\nThe answer can be very large, so you have to calculate it modulo a given prime\n$p$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of the test cases\nfollows.\n\nThe only line of each test case contains two integers $n$, $p$ ($1\n\\le n \\le 500$, $10^8 \\leq p \\leq 10^9$, $p$ is prime) \u2014 the number\nof cities and the modulo.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$500$.",
        "output": "For each test case, output $n+1$ integers: the $i$-th integer should\nbe the number of arrays that satisfy the conditions for $k = i-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>11\n1 998244353\n2 998244353\n3 998244353\n4 998244353\n5 998244353\n6 998244353\n7 998244353\n8 998244353\n9 998244353\n10 102275857\n10 999662017\n</pre></td>\n    <td><pre>0 1 \n1 2 1 \n14 7 4 2 \n183 34 19 16 4 \n2624 209 112 120 48 12 \n42605 1546 793 992 468 216 36 \n785910 13327 6556 9190 4672 2880 864 144 \n16382863 130922 61939 94992 50100 36960 14256 4608 576 \n382823936 1441729 657784 1086596 583344 488700 216000 96480 23040 2880 \n20300780 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400 \n944100756 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case,\n\n  * arrays with $1$ good starting city: $[1]$. \n\nIn the second test case,\n\n  * arrays with $0$ good starting cities: $[1, 1]$; \n  * arrays with $1$ good starting city: $[1, 2]$, $[2, 1]$; \n  * arrays with $2$ good starting cities: $[2, 2]$. \n\nIn the third test case,\n\n  * arrays with $0$ good starting cities: $[1, 1, 1]$, $[1, 1, 2]$, $[1, 1, 3]$, $[1, 2, 1]$, $[1, 2, 2]$, $[1, 3, 1]$, $[1, 3, 2]$, $[2, 1, 1]$, $[2, 1, 2]$, $[2, 2, 1]$, $[2, 2, 2]$, $[2, 3, 1]$, $[2, 3, 2]$, $[3, 1, 1]$; \n  * arrays with $1$ good starting city: $[1, 2, 3]$, $[1, 3, 3]$, $[2, 1, 3]$, $[3, 1, 2]$, $[3, 1, 3]$, $[3, 2, 1]$, $[3, 3, 1]$; \n  * arrays with $2$ good starting cities: $[2, 2, 3]$, $[2, 3, 3]$, $[3, 2, 2]$, $[3, 3, 2]$; \n  * arrays with $3$ good starting cities: $[3, 2, 3]$, $[3, 3, 3]$."
    },
    {
        "problem_id": "2018F3",
        "url": "https://codeforces.com/problemset/problem/2018/F3",
        "title": "Speedbreaker Counting (Hard Version)",
        "rating": 3100,
        "tags": [
            "dp",
            "greedy",
            "math"
        ],
        "div": "Div. 1",
        "time_limit_ms": 10000,
        "memory_limit_mb": 1024,
        "description": "[NightHawk22 - Isolation](https://soundcloud.com/vepium/nighthawk22-isolation-\nofficial-limbo-remix)\n\n\u2800\n\nThis is the hard version of the problem. In the three versions, the\nconstraints on $n$ and the time limit are different. You can make hacks\nonly if all the versions of the problem are solved.\n\nThis is the statement of Problem D1B:\n\n  * There are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to right.\n    * At time $1$, you conquer exactly one city, called the starting city. \n    * At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it. \n\nYou win if, for each $i$, you conquer city $i$ at a time no later than\n$a_i$. A winning strategy may or may not exist, also depending on the\nstarting city. How many starting cities allow you to win?\n\nFor each $0 \\leq k \\leq n$, count the number of arrays of positive\nintegers $a_1, a_2, \\ldots, a_n$ such that\n\n  * $1 \\leq a_i \\leq n$ for each $1 \\leq i \\leq n$; \n  * the answer to Problem D1B is $k$. \n\nThe answer can be very large, so you have to calculate it modulo a given prime\n$p$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 3000$). The description of the test cases\nfollows.\n\nThe only line of each test case contains two integers $n$, $p$ ($1\n\\le n \\le 3000$, $10^8 \\leq p \\leq 10^9$, $p$ is prime) \u2014 the number\nof cities and the modulo.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$3000$.",
        "output": "For each test case, output $n+1$ integers: the $i$-th integer should\nbe the number of arrays that satisfy the conditions for $k = i-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>11\n1 998244353\n2 998244353\n3 998244353\n4 998244353\n5 998244353\n6 998244353\n7 998244353\n8 998244353\n9 998244353\n10 102275857\n10 999662017\n</pre></td>\n    <td><pre>0 1 \n1 2 1 \n14 7 4 2 \n183 34 19 16 4 \n2624 209 112 120 48 12 \n42605 1546 793 992 468 216 36 \n785910 13327 6556 9190 4672 2880 864 144 \n16382863 130922 61939 94992 50100 36960 14256 4608 576 \n382823936 1441729 657784 1086596 583344 488700 216000 96480 23040 2880 \n20300780 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400 \n944100756 17572114 7751377 13641280 7376068 6810552 3269700 1785600 576000 144000 14400 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case,\n\n  * arrays with $1$ good starting city: $[1]$. \n\nIn the second test case,\n\n  * arrays with $0$ good starting cities: $[1, 1]$; \n  * arrays with $1$ good starting city: $[1, 2]$, $[2, 1]$; \n  * arrays with $2$ good starting cities: $[2, 2]$. \n\nIn the third test case,\n\n  * arrays with $0$ good starting cities: $[1, 1, 1]$, $[1, 1, 2]$, $[1, 1, 3]$, $[1, 2, 1]$, $[1, 2, 2]$, $[1, 3, 1]$, $[1, 3, 2]$, $[2, 1, 1]$, $[2, 1, 2]$, $[2, 2, 1]$, $[2, 2, 2]$, $[2, 3, 1]$, $[2, 3, 2]$, $[3, 1, 1]$; \n  * arrays with $1$ good starting city: $[1, 2, 3]$, $[1, 3, 3]$, $[2, 1, 3]$, $[3, 1, 2]$, $[3, 1, 3]$, $[3, 2, 1]$, $[3, 3, 1]$; \n  * arrays with $2$ good starting cities: $[2, 2, 3]$, $[2, 3, 3]$, $[3, 2, 2]$, $[3, 3, 2]$; \n  * arrays with $3$ good starting cities: $[3, 2, 3]$, $[3, 3, 3]$."
    },
    {
        "problem_id": "2019A",
        "url": "https://codeforces.com/problemset/problem/2019/A",
        "title": "Max Plus Size",
        "rating": 800,
        "tags": [
            "brute force",
            "dp",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "[EnV - Dynasty](https://soundcloud.com/envyofficial/env-dynasty)\n\n\u2800\n\nYou are given an array $a_1, a_2, \\ldots, a_n$ of positive integers.\n\nYou can color some elements of the array red, but there cannot be two adjacent\nred elements (i.e., for $1 \\leq i \\leq n-1$, at least one of $a_i$ and\n$a_{i+1}$ must not be red).\n\nYour score is the maximum value of a red element plus the number of red\nelements. Find the maximum score you can get.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 100$) \u2014 the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 1000$) \u2014 the given array.",
        "output": "For each test case, output a single integer: the maximum possible score you\ncan get after coloring some elements red according to the statement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n5 4 5\n3\n4 5 4\n10\n3 3 3 3 4 1 2 3 4 5\n9\n17 89 92 42 29 92 14 70 45\n</pre></td>\n    <td><pre>7\n6\n10\n97\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can color the array as follows:\n$[\\color{red}{5}, 4, \\color{red}{5}]$. Your score is $\\max([5, 5]) +\n\\text{size}([5, 5]) = 5+2 = 7$. This is the maximum score you can get.\n\nIn the second test case, you can color the array as follows:\n$[\\color{red}{4}, 5, \\color{red}{4}]$. Your score is $\\max([4, 4]) +\n\\text{size}([4, 4]) = 4+2 = 6$. This is the maximum score you can get.\n\nIn the third test case, you can color the array as follows:\n$[\\color{red}{3}, 3, \\color{red}{3}, 3, \\color{red}{4}, 1, 2,\n\\color{red}{3}, 4, \\color{red}{5}]$. Your score is $\\max([3, 3, 4, 3, 5])\n+ \\text{size}([3, 3, 4, 3, 5]) = 5+5 = 10$. This is the maximum score you\ncan get."
    },
    {
        "problem_id": "2019B",
        "url": "https://codeforces.com/problemset/problem/2019/B",
        "title": "All Pairs Segments",
        "rating": 1200,
        "tags": [
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 256,
        "description": "[Shirobon - FOX](https://soundcloud.com/shirobon/fox?in=mart_207/sets/fav)\n\n\u2800\n\nYou are given $n$ points on the $x$ axis, at increasing positive\ninteger coordinates $x_1 < x_2 < \\ldots < x_n$.\n\nFor each pair $(i, j)$ with $1 \\leq i < j \\leq n$, you draw the\nsegment $[x_i, x_j]$. The segments are closed, i.e., a segment $[a,\nb]$ contains the points $a, a+1, \\ldots, b$.\n\nYou are given $q$ queries. In the $i$-th query, you are given a\npositive integer $k_i$, and you have to determine how many points with\ninteger coordinates are contained in exactly $k_i$ segments.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$, $q$ ($2\n\\le n \\le 10^5$, $1 \\le q \\le 10^5$) \u2014 the number of points and the\nnumber of queries.\n\nThe second line of each test case contains $n$ integers $x_1, x_2,\n\\ldots, x_n$ ($1 \\leq x_1 < x_2 < \\ldots < x_n \\leq 10^9$) \u2014 the\ncoordinates of the $n$ points.\n\nThe third line of each test case contains $q$ integers $k_1, k_2,\n\\ldots, k_q$ ($1 \\leq k_i \\leq 10^{18}$) \u2014 the parameters of the $q$\nqueries.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$, and the sum of $q$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single line with $q$ integers: the $i$-th\ninteger is the answer to the $i$-th query.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2 2\n101 200\n2 1\n6 15\n1 2 3 5 6 7\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n5 8\n254618033 265675151 461318786 557391198 848083778\n6 9 15 10 6 9 4 4294967300\n</pre></td>\n    <td><pre>0 100 \n0 0 0 0 2 0 0 0 3 0 2 0 0 0 0 \n291716045 0 0 0 291716045 0 301749698 0 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, you only draw the segment $[101, 200]$. No point is\ncontained in exactly $2$ segments, and the $100$ points $101, 102,\n\\ldots, 200$ are contained in exactly $1$ segment.\n\nIn the second example, you draw $15$ segments: $[1, 2], [1, 3], [1, 5],\n[1, 6], [1, 7], [2, 3], [2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [5,\n6], [5, 7], [6, 7]$. Points $1, 7$ are contained in exactly $5$\nsegments; points $2, 4, 6$ are contained in exactly $9$ segments;\npoints $3, 5$ are contained in exactly $11$ segments."
    },
    {
        "problem_id": "2019C",
        "url": "https://codeforces.com/problemset/problem/2019/C",
        "title": "Cards Partition",
        "rating": 1600,
        "tags": [
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "[DJ Genki vs Gram - Einherjar Joker](https://soundcloud.com/leon-\nhwang-368077289/einherjar-joker-dj-genki-vs-gram)\n\n\u2800\n\nYou have some cards. An integer between $1$ and $n$ is written on each\ncard: specifically, for each $i$ from $1$ to $n$, you have\n$a_i$ cards which have the number $i$ written on them.\n\nThere is also a shop which contains unlimited cards of each type. You have\n$k$ coins, so you can buy at most $k$ new cards in total, and the\ncards you buy can contain any integer between $\\mathbf{1}$ and\n$\\mathbf{n}$, inclusive.\n\nAfter buying the new cards, you must partition all your cards into decks,\naccording to the following rules:\n\n  * all the decks must have the same size; \n  * there are no pairs of cards with the same value in the same deck. \n\nFind the maximum possible size of a deck after buying cards and partitioning\nthem optimally.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$, $k$ ($1\n\\leq n \\leq 2 \\cdot 10^5$, $0 \\leq k \\leq 10^{16}$) \u2014 the number of\ndistinct types of cards and the number of coins.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\leq a_i \\leq 10^{10}$, $\\sum a_i \\geq 1$) \u2014 the\nnumber of cards of type $i$ you have at the beginning, for each $1 \\leq\ni \\leq n$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the maximum possible size of a\ndeck if you operate optimally.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9\n3 1\n3 2 2\n5 4\n2 6 1 2 4\n2 100\n1410065408 10000000000\n10 8\n7 4 6 6 9 3 10 2 8 7\n2 12\n2 2\n2 70\n0 1\n1 0\n1\n3 0\n2 1 2\n3 1\n0 3 3\n</pre></td>\n    <td><pre>2\n3\n1\n7\n2\n2\n1\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can buy one card with the number $1$, and your\ncards become $[1, 1, 1, 1, 2, 2, 3, 3]$. You can partition them into the\ndecks $[1, 2], [1, 2], [1, 3], [1, 3]$: they all have size $2$, and\nthey all contain distinct values. You can show that you cannot get a partition\nwith decks of size greater than $2$, so the answer is $2$.\n\nIn the second test case, you can buy two cards with the number $1$ and one\ncard with the number $3$, and your cards become $[1, 1, 1, 1, 2, 2, 2,\n2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5]$, which can be partitioned into $[1, 2,\n3], [1, 2, 4], [1, 2, 5], [1, 2, 5], [2, 3, 5], [2, 4, 5]$. You can show\nthat you cannot get a partition with decks of size greater than $3$, so\nthe answer is $3$."
    },
    {
        "problem_id": "2019D",
        "url": "https://codeforces.com/problemset/problem/2019/D",
        "title": "Speedbreaker",
        "rating": 1900,
        "tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "[Djjaner - Speedbreaker](https://soundcloud.com/luciano-\nferrari-151560131/speedbreaker)\n\n\u2800\n\nThere are $n$ cities in a row, numbered $1, 2, \\ldots, n$ left to\nright.\n\n  * At time $1$, you conquer exactly one city, called the starting city. \n  * At time $2, 3, \\ldots, n$, you can choose a city adjacent to the ones conquered so far and conquer it. \n\nYou win if, for each $i$, you conquer city $i$ at a time no later than\n$a_i$. A winning strategy may or may not exist, also depending on the\nstarting city. How many starting cities allow you to win?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of cities.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le n$) \u2014 the deadlines for conquering the\ncities.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the number of starting cities\nthat allow you to win.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n6\n6 3 3 3 5 5\n6\n5 6 4 1 4 5\n9\n8 6 4 2 1 3 5 7 9\n</pre></td>\n    <td><pre>3\n0\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, cities $2$, $3$, and $4$ are good starting\ncities.\n\nIn the second test case, there are no good starting cities.\n\nIn the third test case, the only good starting city is city $5$."
    },
    {
        "problem_id": "2019E",
        "url": "https://codeforces.com/problemset/problem/2019/E",
        "title": "Tree Pruning",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "sortings",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "[t+pazolite, ginkiha, Hommarju - Paved\nGarden](https://soundcloud.com/fractalex-gd/ginkiha-paved-garden-little)\n\n\u2800\n\nYou are given a tree with $n$ nodes, rooted at node $1$. In this\nproblem, a leaf is a non-root node with degree $1$.\n\nIn one operation, you can remove a leaf and the edge adjacent to it (possibly,\nnew leaves appear). What is the minimum number of operations that you have to\nperform to get a tree, also rooted at node $1$, where all the leaves are\nat the same distance from the root?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq\nn \\leq 5 \\cdot 10^5$) \u2014 the number of nodes.\n\nEach of the next $n-1$ lines contains two integers $u$, $v$ ($1\n\\leq u, v \\leq n$, $u \\neq v$), describing an edge that connects $u$\nand $v$. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the minimum number of operations\nneeded to achieve your goal.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n7\n1 2\n1 3\n2 4\n2 5\n4 6\n4 7\n7\n1 2\n1 3\n1 4\n2 5\n3 6\n5 7\n15\n12 9\n1 6\n6 14\n9 11\n8 7\n3 5\n13 5\n6 10\n13 15\n13 6\n14 12\n7 2\n8 1\n1 4\n</pre></td>\n    <td><pre>2\n2\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first two examples, the tree is as follows:\n\n![](CDN_BASE_URL/754511fbdb88995aaa49733a1fe75dfc)\n\nIn the first example, by removing edges $(1, 3)$ and $(2, 5)$, the\nresulting tree has all leaves (nodes $6$ and $7$) at the same distance\nfrom the root (node $1$), which is $3$. The answer is $2$, as it\nis the minimum number of edges that need to be removed to achieve the goal.\n\nIn the second example, removing edges $(1, 4)$ and $(5, 7)$ results in\na tree where all leaves (nodes $4$ and $5$) are at the same distance\nfrom the root (node $1$), which is $2$."
    },
    {
        "problem_id": "2019F",
        "url": "https://codeforces.com/problemset/problem/2019/F",
        "title": "Max Plus Min Plus Size",
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "dsu",
            "greedy",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "[EnV - The Dusty Dragon Tavern](https://soundcloud.com/envyofficial/env-the-\ndusty-dragon-tavern)\n\n\u2800\n\nYou are given an array $a_1, a_2, \\ldots, a_n$ of positive integers.\n\nYou can color some elements of the array red, but there cannot be two adjacent\nred elements (i.e., for $1 \\leq i \\leq n-1$, at least one of $a_i$ and\n$a_{i+1}$ must not be red).\n\nYour score is the maximum value of a red element, plus the minimum value of a\nred element, plus the number of red elements. Find the maximum score you can\nget.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the maximum possible score you\ncan get after coloring some elements red according to the statement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n5 4 5\n3\n4 5 4\n10\n3 3 3 3 4 1 2 3 5 4\n10\n17 89 92 42 29 41 92 14 70 45\n</pre></td>\n    <td><pre>12\n11\n12\n186\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can color the array as follows:\n$[\\color{red}{5}, 4, \\color{red}{5}]$. Your score is $\\max([5, 5]) +\n\\min([5, 5]) + \\text{size}([5, 5]) = 5+5+2 = 12$. This is the maximum score\nyou can get.\n\nIn the second test case, you can color the array as follows: $[4,\n\\color{red}{5}, 4]$. Your score is $\\max([5]) + \\min([5]) +\n\\text{size}([5]) = 5+5+1 = 11$. This is the maximum score you can get.\n\nIn the third test case, you can color the array as follows:\n$[\\color{red}{3}, 3, \\color{red}{3}, 3, \\color{red}{4}, 1, 2,\n\\color{red}{3}, 5, \\color{red}{4}]$. Your score is $\\max([3, 3, 4, 3, 4])\n+ \\min([3, 3, 4, 3, 4]) + \\text{size}([3, 3, 4, 3, 4]) = 4+3+5 = 12$. This\nis the maximum score you can get."
    },
    {
        "problem_id": "2020A",
        "url": "https://codeforces.com/problemset/problem/2020/A",
        "title": "Find Minimum Operations",
        "rating": 800,
        "tags": [
            "bitmasks",
            "brute force",
            "greedy",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given two integers $n$ and $k$.\n\nIn one operation, you can subtract any power of $k$ from $n$.\nFormally, in one operation, you can replace $n$ by $(n-k^x)$ for any\nnon-negative integer $x$.\n\nFind the minimum number of operations required to make $n$ equal to\n$0$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe only line of each test case contains two integers $n$ and $k$\n($1 \\le n, k \\le 10^9$).",
        "output": "For each test case, output the minimum number of operations on a new line.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5 2\n3 5\n16 4\n100 3\n6492 10\n10 1\n</pre></td>\n    <td><pre>2\n3\n1\n4\n21\n10\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $n = 5$ and $k = 2$. We can perform the\nfollowing sequence of operations:\n\n  1. Subtract $2^0 = 1$ from $5$. The current value of $n$ becomes $5 - 1 = 4$. \n  2. Subtract $2^2 = 4$ from $4$. The current value of $n$ becomes $4 - 4 = 0$. \n\nIt can be shown that there is no way to make $n$ equal to $0$ in less\nthan $2$ operations. Thus, $2$ is the answer.\n\nIn the second test case, $n = 3$ and $k = 5$. We can perform the\nfollowing sequence of operations:\n\n  1. Subtract $5^0 = 1$ from $3$. The current value of $n$ becomes $3 - 1 = 2$. \n  2. Subtract $5^0 = 1$ from $2$. The current value of $n$ becomes $2 - 1 = 1$. \n  3. Subtract $5^0 = 1$ from $1$. The current value of $n$ becomes $1 - 1 = 0$. \n\nIt can be shown that there is no way to make $n$ equal to $0$ in less\nthan $3$ operations. Thus, $3$ is the answer."
    },
    {
        "problem_id": "2020B",
        "url": "https://codeforces.com/problemset/problem/2020/B",
        "title": "Brightness Begins",
        "rating": 1200,
        "tags": [
            "binary search",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Imagine you have $n$ light bulbs numbered $1, 2, \\ldots, n$.\nInitially, all bulbs are on. To flip the state of a bulb means to turn it off\nif it used to be on, and to turn it on otherwise.\n\nNext, you do the following:\n\n  * for each $i = 1, 2, \\ldots, n$, flip the state of all bulbs $j$ such that $j$ is divisible by $i^\\dagger$. \n\nAfter performing all operations, there will be several bulbs that are still\non. Your goal is to make this number exactly $k$.\n\nFind the smallest suitable $n$ such that after performing the operations\nthere will be exactly $k$ bulbs on. We can show that an answer always\nexists.\n\n$^\\dagger$ An integer $x$ is divisible by $y$ if there exists an\ninteger $z$ such that $x = y\\cdot z$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe only line of each test case contains a single integer $k$ ($1 \\le k\n\\le 10^{18}$).",
        "output": "For each test case, output $n$ \u2014 the minimum number of bulbs.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1\n3\n8\n</pre></td>\n    <td><pre>2\n5\n11\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the minimum number of bulbs is $2$. Let's denote\nthe state of all bulbs with an array, where $1$ corresponds to a turned on\nbulb, and $0$ corresponds to a turned off bulb. Initially, the array is\n$[1, 1]$.\n\n  * After performing the operation with $i = 1$, the array becomes $[\\underline{0}, \\underline{0}]$. \n  * After performing the operation with $i = 2$, the array becomes $[0, \\underline{1}]$. \n\nIn the end, there are $k = 1$ bulbs on. We can also show that the answer\ncannot be less than $2$.\n\nIn the second test case, the minimum number of bulbs is $5$. Initially,\nthe array is $[1, 1, 1, 1, 1]$.\n\n  * After performing the operation with $i = 1$, the array becomes $[\\underline{0}, \\underline{0}, \\underline{0}, \\underline{0}, \\underline{0}]$. \n  * After performing the operation with $i = 2$, the array becomes $[0, \\underline{1}, 0, \\underline{1}, 0]$. \n  * After performing the operation with $i = 3$, the array becomes $[0, 1, \\underline{1}, 1, 0]$. \n  * After performing the operation with $i = 4$, the array becomes $[0, 1, 1, \\underline{0}, 0]$. \n  * After performing the operation with $i = 5$, the array becomes $[0, 1, 1, 0, \\underline{1}]$. \n\nIn the end, there are $k = 3$ bulbs on. We can also show that the answer\ncannot be smaller than $5$."
    },
    {
        "problem_id": "2020C",
        "url": "https://codeforces.com/problemset/problem/2020/C",
        "title": "Bitwise Balancing",
        "rating": 1400,
        "tags": [
            "bitmasks",
            "hashing",
            "implementation",
            "math",
            "schedules",
            "ternary search"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given three non-negative integers $b$, $c$, and $d$.\n\nPlease find a non-negative integer $a \\in [0, 2^{61}]$ such that $(a\\,\n|\\, b)-(a\\, \\&\\, c)=d$, where $|$ and $\\&$ denote the [bitwise OR\noperation](https://en.wikipedia.org/wiki/Bitwise_operation#OR) and the\n[bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND),\nrespectively.\n\nIf such an $a$ exists, print its value. If there is no solution, print a\nsingle integer $-1$. If there are multiple solutions, print any of them.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases\nfollows.\n\nThe only line of each test case contains three positive integers $b$,\n$c$, and $d$ ($0 \\le b, c, d \\le 10^{18}$).",
        "output": "For each test case, output the value of $a$, or $-1$ if there is no\nsolution. Please note that $a$ must be non-negative and cannot exceed\n$2^{61}$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2 2 2\n4 2 6\n10 2 14\n</pre></td>\n    <td><pre>0\n-1\n12\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $(0\\,|\\,2)-(0\\,\\&\\,2)=2-0=2$. So, $a = 0$ is a\ncorrect answer.\n\nIn the second test case, no value of $a$ satisfies the equation.\n\nIn the third test case, $(12\\,|\\,10)-(12\\,\\&\\,2)=14-0=14$. So, $a =\n12$ is a correct answer."
    },
    {
        "problem_id": "2020D",
        "url": "https://codeforces.com/problemset/problem/2020/D",
        "title": "Connect the Dots",
        "rating": 1800,
        "tags": [
            "brute force",
            "dp",
            "dsu",
            "graphs",
            "math",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "One fine evening, Alice sat down to play the classic game \"Connect the Dots\",\nbut with a twist.\n\nTo play the game, Alice draws a straight line and marks $n$ points on it,\nindexed from $1$ to $n$. Initially, there are no arcs between the\npoints, so they are all disjoint. After that, Alice performs $m$\noperations of the following type:\n\n  * She picks three integers $a_i$, $d_i$ ($1 \\le d_i \\le 10$), and $k_i$. \n  * She selects points $a_i, a_i+d_i, a_i+2d_i, a_i+3d_i, \\ldots, a_i+k_i\\cdot d_i$ and connects each pair of these points with arcs. \n\nAfter performing all $m$ operations, she wants to know the number of\nconnected components$^\\dagger$ these points form. Please help her find\nthis number.\n\n$^\\dagger$ Two points are said to be in one connected component if there\nis a path between them via several (possibly zero) arcs and other points.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$).\n\nThe $i$-th of the following $m$ lines contains three integers\n$a_i$, $d_i$, and $k_i$ ($1 \\le a_i \\le a_i + k_i\\cdot d_i \\le\nn$, $1 \\le d_i \\le 10$, $0 \\le k_i \\le n$).\n\nIt is guaranteed that both the sum of $n$ and the sum of $m$ over all\ntest cases do not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output the number of connected components.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n10 2\n1 2 4\n2 2 4\n100 1\n19 2 4\n100 3\n1 2 5\n7 2 6\n17 2 31\n</pre></td>\n    <td><pre>2\n96\n61\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are $n = 10$ points. The first operation\njoins the points $1$, $3$, $5$, $7$, and $9$. The second\noperation joins the points $2$, $4$, $6$, $8$, and $10$.\nThere are thus two connected components: $\\\\{1, 3, 5, 7, 9\\\\}$ and\n$\\\\{2, 4, 6, 8, 10\\\\}$.\n\nIn the second test case, there are $n = 100$ points. The only operation\njoins the points $19$, $21$, $23$, $25$, and $27$. Now all\nof them form a single connected component of size $5$. The other $95$\npoints form single-point connected components. Thus, the answer is $1 + 95 =\n96$.\n\nIn the third test case, there are $n = 100$ points. After the operations,\nall odd points from $1$ to $79$ will be in one connected component of\nsize $40$. The other $60$ points form single-point connected\ncomponents. Thus, the answer is $1 + 60 = 61$."
    },
    {
        "problem_id": "2020E",
        "url": "https://codeforces.com/problemset/problem/2020/E",
        "title": "Expected Power",
        "rating": 2000,
        "tags": [
            "bitmasks",
            "dp",
            "math",
            "probabilities"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "You are given an array of $n$ integers $a_1,a_2,\\ldots,a_n$. You are\nalso given an array $p_1, p_2, \\ldots, p_n$.\n\nLet $S$ denote the random multiset (i. e., it may contain equal elements)\nconstructed as follows:\n\n  * Initially, $S$ is empty. \n  * For each $i$ from $1$ to $n$, insert $a_i$ into $S$ with probability $\\frac{p_i}{10^4}$. Note that each element is inserted independently. \n\nDenote $f(S)$ as the [bitwise\nXOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of all elements of\n$S$. Please calculate the expected value of $(f(S))^2$. Output the\nanswer modulo $10^9 + 7$.\n\nFormally, let $M = 10^9 + 7$. It can be shown that the answer can be\nexpressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and\n$q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer\nequal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer\n$x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$).\n\nThe second line of each test case contains $n$ integers\n$a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le 1023$).\n\nThe third line of each test case contains $n$ integers\n$p_1,p_2,\\ldots,p_n$ ($1 \\le p_i \\le 10^4$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output the expected value of $(f(S))^2$, modulo\n$10^9 + 7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n1 2\n5000 5000\n2\n1 1\n1000 2000\n6\n343 624 675 451 902 820\n6536 5326 7648 2165 9430 5428\n1\n1\n10000\n</pre></td>\n    <td><pre>500000007\n820000006\n280120536\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $a = [1, 2]$ and each element is inserted into\n$S$ with probability $\\frac{1}{2}$, since $p_1 = p_2 = 5000$ and\n$\\frac{p_i}{10^4} = \\frac{1}{2}$. Thus, there are $4$ outcomes for\n$S$, each happening with the same probability of $\\frac{1}{4}$:\n\n  * $S = \\varnothing$. In this case, $f(S) = 0$, $(f(S))^2 = 0$. \n  * $S = \\\\{1\\\\}$. In this case, $f(S) = 1$, $(f(S))^2 = 1$. \n  * $S = \\\\{2\\\\}$. In this case, $f(S) = 2$, $(f(S))^2 = 4$. \n  * $S = \\\\{1,2\\\\}$. In this case, $f(S) = 1 \\oplus 2 = 3$, $(f(S))^2 = 9$. \n\nHence, the answer is $0 \\cdot \\frac{1}{4} + 1 \\cdot \\frac{1}{4} + 4\\cdot\n\\frac{1}{4} + 9 \\cdot \\frac{1}{4} = \\frac{14}{4} = \\frac{7}{2} \\equiv\n500\\,000\\,007 \\pmod{10^9 + 7}$.\n\nIn the second test case, $a = [1, 1]$, $a_1$ is inserted into $S$\nwith probability $0.1$, while $a_2$ is inserted into $S$ with\nprobability $0.2$. There are $3$ outcomes for $S$:\n\n  * $S = \\varnothing$. In this case, $f(S) = 0$, $(f(S))^2 = 0$. This happens with probability $(1-0.1) \\cdot (1-0.2) = 0.72$. \n  * $S = \\\\{1\\\\}$. In this case, $f(S) = 1$, $(f(S))^2 = 1$. This happens with probability $(1-0.1) \\cdot 0.2 + 0.1 \\cdot (1-0.2) = 0.26$. \n  * $S = \\\\{1, 1\\\\}$. In this case, $f(S) = 0$, $(f(S))^2 = 0$. This happens with probability $0.1 \\cdot 0.2 = 0.02$. \n\nHence, the answer is $0 \\cdot 0.72 + 1 \\cdot 0.26 + 0 \\cdot 0.02 = 0.26 =\n\\frac{26}{100} \\equiv 820\\,000\\,006 \\pmod{10^9 + 7}$."
    },
    {
        "problem_id": "2020F",
        "url": "https://codeforces.com/problemset/problem/2020/F",
        "title": "Count Leaves",
        "rating": 2900,
        "tags": [
            "dp",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "Let $n$ and $d$ be positive integers. We build the the divisor tree\n$T_{n,d}$ as follows:\n\n  * The root of the tree is a node marked with number $n$. This is the $0$-th layer of the tree. \n  * For each $i$ from $0$ to $d - 1$, for each vertex of the $i$-th layer, do the following. If the current vertex is marked with $x$, create its children and mark them with all possible distinct divisors$^\\dagger$ of $x$. These children will be in the $(i+1)$-st layer. \n  * The vertices on the $d$-th layer are the leaves of the tree. \n\nFor example, $T_{6,2}$ (the divisor tree for $n = 6$ and $d = 2$)\nlooks like this:\n\n![](CDN_BASE_URL/782ea6d6fe622ee5ec986b0d8cae274d)\n\nDefine $f(n,d)$ as the number of leaves in $T_{n,d}$.\n\nGiven integers $n$, $k$, and $d$, please compute\n$\\sum\\limits_{i=1}^{n} f(i^k,d)$, modulo $10^9+7$.\n\n$^\\dagger$ In this problem, we say that an integer $y$ is a divisor of\n$x$ if $y \\ge 1$ and there exists an integer $z$ such that $x =\ny \\cdot z$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe only line of each test case contains three integers $n$, $k$, and\n$d$ ($1 \\le n \\le 10^9$, $1 \\le k,d \\le 10^5$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^9$.",
        "output": "For each test case, output $\\sum\\limits_{i=1}^{n} f(i^k,d)$, modulo\n$10^9+7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n6 1 1\n1 3 3\n10 1 2\n</pre></td>\n    <td><pre>14\n1\n53\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $n = 6$, $k = 1$, and $d = 1$. Thus, we\nneed to find the total number of leaves in the divisor trees $T_{1,1}$,\n$T_{2,1}$, $T_{3,1}$, $T_{4,1}$, $T_{5,1}$, $T_{6,1}$.\n\n  * $T_{1,1}$ has only one leaf, which is marked with $1$. \n  * $T_{2,1}$ has two leaves, marked with $1$ and $2$. \n  * $T_{3,1}$ has two leaves, marked with $1$ and $3$. \n  * $T_{4,1}$ has three leaves, marked with $1$, $2$, and $4$. \n  * $T_{5,1}$ has two leaves, marked with $1$ and $5$. \n  * $T_{6,1}$ has four leaves, marked with $1$, $2$, $3$, and $6$. \n\nThe total number of leaves is $1 + 2 + 2 + 3 + 2 + 4 = 14$.\n\nIn the second test case, $n = 1$, $k = 3$, $d = 3$. Thus, we need\nto find the number of leaves in $T_{1,3}$, because $1^3 = 1$. This\ntree has only one leaf, so the answer is $1$."
    },
    {
        "problem_id": "2021A",
        "url": "https://codeforces.com/problemset/problem/2021/A",
        "title": "Meaning Mean",
        "rating": 800,
        "tags": [
            "data structures",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Pak Chanek has an array $a$ of $n$ positive integers. Since he is\ncurrently learning how to calculate the floored average of two numbers, he\nwants to practice it on his array $a$.\n\nWhile the array $a$ has at least two elements, Pak Chanek will perform the\nfollowing three-step operation:\n\n  1. Pick two different indices $i$ and $j$ ($1 \\leq i, j \\leq |a|$; $i \\neq j$), note that $|a|$ denotes the current size of the array $a$. \n  2. Append $\\lfloor \\frac{a_i+a_j}{2} \\rfloor$$^{\\text{\u2217}}$ to the end of the array. \n  3. Remove elements $a_i$ and $a_j$ from the array and concatenate the remaining parts of the array. \n\nFor example, suppose that $a=[5,4,3,2,1,1]$. If we choose $i=1$ and\n$j=5$, the resulting array will be $a=[4,3,2,1,3]$. If we choose\n$i=4$ and $j=3$, the resulting array will be $a=[5,4,1,1,2]$.\n\nAfter all operations, the array will consist of a single element $x$. Find\nthe maximum possible value of $x$ if Pak Chanek performs the operations\noptimally.\n\n$^{\\text{\u2217}}$$\\lfloor x \\rfloor$ denotes the floor function of\n$x$, which is the greatest integer that is less than or equal to $x$.\nFor example, $\\lfloor 6 \\rfloor = 6$, $\\lfloor 2.5 \\rfloor=2$,\n$\\lfloor -3.6 \\rfloor=-4$ and $\\lfloor \\pi \\rfloor=3$",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 5000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n\n\\le 50$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array $a$.\n\nDo note that the sum of $n$ over all test cases is not bounded.",
        "output": "For each test case, output a single integer: the maximum possible value of\n$x$ after all numbers have been picked.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5\n1 7 8 4 5\n3\n2 6 5\n5\n5 5 5 5 5\n</pre></td>\n    <td><pre>6\n4\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the array is initially $a=[1,7,8,4,5]$. Pak Chanek\nwill perform the following operations:\n\n  1. Pick $i=1$ and $j=2$, then $a=[8,4,5,4]$. \n  2. Pick $i=3$ and $j=2$, then $a=[8,4,4]$. \n  3. Pick $i=2$ and $j=3$, then $a=[8,4]$. \n  4. Pick $i=1$ and $j=2$, then $a=[6]$. \n\nAfter all the operations, the array consists of a single element $x=6$. It\ncan be proven that there is no series of operations that results in $x$\ngreater than $6$ in the end."
    },
    {
        "problem_id": "2021B",
        "url": "https://codeforces.com/problemset/problem/2021/B",
        "title": "Maximize Mex",
        "rating": 1200,
        "tags": [
            "brute force",
            "greedy",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given an array $a$ of $n$ positive integers and an integer\n$x$. You can do the following two-step operation any (possibly zero)\nnumber of times:\n\n  1. Choose an index $i$ ($1 \\leq i \\leq n$). \n  2. Increase $a_i$ by $x$, in other words $a_i := a_i + x$. \n\nFind the maximum value of the $\\operatorname{MEX}$ of $a$ if you\nperform the operations optimally.\n\nThe $\\operatorname{MEX}$ (minimum excluded value) of an array is the\nsmallest non-negative integer that is not in the array. For example:\n\n  * The $\\operatorname{MEX}$ of $[2,2,1]$ is $0$ because $0$ is not in the array. \n  * The $\\operatorname{MEX}$ of $[3,1,0,1]$ is $2$ because $0$ and $1$ are in the array but $2$ is not. \n  * The $\\operatorname{MEX}$ of $[0,3,1,2]$ is $4$ because $0$, $1$, $2$ and $3$ are in the array but $4$ is not.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 5000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $x$\n($1 \\le n \\le 2 \\cdot 10^5$; $1 \\le x \\le 10^9$) \u2014 the length of the\narray and the integer to be used in the operation.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the given array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the maximum\n$\\operatorname{MEX}$ of $a$ if you perform the operations optimally.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n6 3\n0 3 2 1 5 2\n6 2\n1 3 4 1 0 2\n4 5\n2 5 10 3\n</pre></td>\n    <td><pre>4\n6\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the $\\operatorname{MEX}$ of $a$ is $4$\nwithout performing any operations, which is the maximum.\n\nIn the second test case, the $\\operatorname{MEX}$ of $a$ is $5$\nwithout performing any operations. If we perform two operations both with\n$i=1$, we will have the array $a=[5,3,4,1,0,2]$. Then, the\n$\\operatorname{MEX}$ of $a$ will become $6$, which is the maximum.\n\nIn the third test case, the $\\operatorname{MEX}$ of $a$ is $0$\nwithout performing any operations, which is the maximum."
    },
    {
        "problem_id": "2021C1",
        "url": "https://codeforces.com/problemset/problem/2021/C1",
        "title": "Adjust The Presentation (Easy Version)",
        "rating": 1300,
        "tags": [
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. In the two versions, the constraints\non $q$ and the time limit are different. In this version, $q=0$. You\ncan make hacks only if all the versions of the problem are solved.\n\nA team consisting of $n$ members, numbered from $1$ to $n$, is set\nto present a slide show at a large meeting. The slide show contains $m$\nslides.\n\nThere is an array $a$ of length $n$. Initially, the members are\nstanding in a line in the order of $a_1, a_2, \\ldots, a_n$ from front to\nback. The slide show will be presented in order from slide $1$ to slide\n$m$. Each section will be presented by the member at the front of the\nline. After each slide is presented, you can move the member at the front of\nthe line to any position in the lineup (without changing the order of the rest\nof the members). For example, suppose the line of members is\n$[\\color{red}{3},1,2,4]$. After member $3$ presents the current slide,\nyou can change the line of members into either $[\\color{red}{3},1,2,4]$,\n$[1,\\color{red}{3},2,4]$, $[1,2,\\color{red}{3},4]$ or\n$[1,2,4,\\color{red}{3}]$.\n\nThere is also an array $b$ of length $m$. The slide show is considered\ngood if it is possible to make member $b_i$ present slide $i$ for all\n$i$ from $1$ to $m$ under these constraints.\n\nHowever, your annoying boss wants to make $q$ updates to the array\n$b$. In the $i$-th update, he will choose a slide $s_i$ and a\nmember $t_i$ and set $b_{s_i} := t_i$. Note that these updates are\npersistent, that is changes made to the array $b$ will apply when\nprocessing future updates.\n\nFor each of the $q+1$ states of array $b$, the initial state and after\neach of the $q$ updates, determine if the slideshow is good.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $n$, $m$ and\n$q$ ($1 \\le n, m \\le 2 \\cdot 10^5$; $q=0$) \u2014 the number of\nmembers, the number of sections and the number of updates.\n\nThe second line of each test case contains $n$ integers\n$a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$) \u2014 the initial order of the\nmembers from front to back. It is guaranteed that each integer from $1$ to\n$n$ appears exactly once in $a$.\n\nThe third line of each test case contains $m$ integers $b_1, b_2,\n\\ldots, b_m$ ($1 \\le b_i \\le n$) \u2014 the members who should present each\nsection.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ over all test\ncases do not exceed $2 \\cdot 10^5$ respectively.",
        "output": "For each test case, output $q+1$ lines corresponding to the $q+1$\nstates of the array $b$. Output \"YA\" if the slide show is good, and\n\"TIDAK\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yA\", \"Ya\", \"ya\", and \"YA\" will be recognized as positive responses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4 2 0\n1 2 3 4\n1 1\n3 6 0\n1 2 3\n1 1 2 3 3 2\n4 6 0\n3 1 4 2\n3 1 1 2 3 4\n</pre></td>\n    <td><pre>YA\nYA\nTIDAK\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, you do not need to move the members as both slides\nare presented by member $1$, who is already at the front of the line.\n\nFor the second test case, the following is a possible way to move members so\nthat the presentation is good:\n\n  1. $[1,2,3]$, do not move member $1$. \n  2. $[1,2,3]$, move member $1$ after member $3$. \n  3. $[2,3,1]$, move member $2$ after member $3$. \n  4. $[3,2,1]$, do not move member $3$. \n  5. $[3,2,1]$, move member $3$ after member $1$. \n  6. $[2,1,3]$, do not move member $2$."
    },
    {
        "problem_id": "2021C2",
        "url": "https://codeforces.com/problemset/problem/2021/C2",
        "title": "Adjust The Presentation (Hard Version)",
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. In the two versions, the constraints\non $q$ and the time limit are different. In this version, $0 \\leq q \\leq\n2 \\cdot 10^5$. You can make hacks only if all the versions of the problem\nare solved.\n\nA team consisting of $n$ members, numbered from $1$ to $n$, is set\nto present a slide show at a large meeting. The slide show contains $m$\nslides.\n\nThere is an array $a$ of length $n$. Initially, the members are\nstanding in a line in the order of $a_1, a_2, \\ldots, a_n$ from front to\nback. The slide show will be presented in order from slide $1$ to slide\n$m$. Each section will be presented by the member at the front of the\nline. After each slide is presented, you can move the member at the front of\nthe line to any position in the lineup (without changing the order of the rest\nof the members). For example, suppose the line of members is\n$[\\color{red}{3},1,2,4]$. After member $3$ presents the current slide,\nyou can change the line of members into either $[\\color{red}{3},1,2,4]$,\n$[1,\\color{red}{3},2,4]$, $[1,2,\\color{red}{3},4]$ or\n$[1,2,4,\\color{red}{3}]$.\n\nThere is also an array $b$ of length $m$. The slide show is considered\ngood if it is possible to make member $b_i$ present slide $i$ for all\n$i$ from $1$ to $m$ under these constraints.\n\nHowever, your annoying boss wants to make $q$ updates to the array\n$b$. In the $i$-th update, he will choose a slide $s_i$ and a\nmember $t_i$ and set $b_{s_i} := t_i$. Note that these updates are\npersistent, that is changes made to the array $b$ will apply when\nprocessing future updates.\n\nFor each of the $q+1$ states of array $b$, the initial state and after\neach of the $q$ updates, determine if the slideshow is good.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $n$, $m$ and\n$q$ ($1 \\le n, m \\le 2 \\cdot 10^5$; $0 \\leq q \\leq 2 \\cdot 10^5$)\n\u2014 the number of members and the number of sections.\n\nThe second line of each test case contains $n$ integers\n$a_1,a_2,\\ldots,a_n$ ($1 \\le a_i \\le n$) \u2014 the initial order of the\nmembers from front to back. It is guaranteed that each integer from $1$ to\n$n$ appears exactly once in $a$.\n\nThe third line of each test case contains $m$ integers $b_1, b_2,\n\\ldots, b_m$ ($1 \\le b_i \\le n$) \u2014 the members who should present each\nsection.\n\nEach of the next $q$ lines contains two integers $s_i$ and $t_i$\n($1 \\le s_i \\le m$, $1 \\le t_i \\le n$) \u2014 parameters of an update.\n\nIt is guaranteed that the sum of $n$, the sum of $m$ and the sum of\n$q$ over all test cases do not exceed $2 \\cdot 10^5$ respectively.",
        "output": "For each test case, output $q+1$ lines corresponding to the $q+1$\nstates of the array $b$. Output \"YA\" if the slide show is good, and\n\"TIDAK\" otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yA\", \"Ya\", \"ya\", and \"YA\" will be recognized as positive responses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4 2 2\n1 2 3 4\n1 1\n1 2\n1 1\n3 6 2\n1 2 3\n1 1 2 3 3 2\n3 3\n2 2\n4 6 2\n3 1 4 2\n3 1 1 2 3 4\n3 4\n4 2\n</pre></td>\n    <td><pre>YA\nTIDAK\nYA\nYA\nTIDAK\nYA\nTIDAK\nYA\nYA\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, you do not need to move the members as both slides\nare presented by member $1$, who is already at the front of the line.\nAfter that, set $b_1 := 2$, now slide $1$ must be presented by member\n$2$ which is impossible as member $1$ will present slide $1$\nfirst. Then, set $b_1 = 1$, the $b$ is the same as the initial\n$b$, making a good presentation possible."
    },
    {
        "problem_id": "2021D",
        "url": "https://codeforces.com/problemset/problem/2021/D",
        "title": "Boss, Thirsty",
        "rating": 2500,
        "tags": [
            "dp",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Pak Chanek has a friend who runs a drink stall in a canteen. His friend will\nsell drinks for $n$ days, numbered from day $1$ to day $n$. There\nare also $m$ types of drinks, numbered from $1$ to $m$.\n\nThe profit gained from selling a drink on a particular day can vary. On day\n$i$, the projected profit from selling drink of type $j$ is $A_{i,\nj}$. Note that $A_{i, j}$ can be negative, meaning that selling the\ndrink would actually incur a loss.\n\nPak Chanek wants to help his friend plan the sales over the $n$ days. On\nday $i$, Pak Chanek must choose to sell at least one type of drink.\nFurthermore, the types of drinks sold on a single day must form a subarray. In\nother words, in each day, Pak Chanek will select $i$ and $j$ such that\n$1 \\leq i \\leq j \\leq m$. Then all types of drinks between $i$ and\n$j$ (inclusive) will be sold.\n\nHowever, to ensure that customers from the previous day keep returning, the\nselection of drink types sold on day $i$ ($i>1$) must meet the\nfollowing conditions:\n\n  * At least one drink type sold on day $i$ must also have been sold on day $i-1$. \n  * At least one drink type sold on day $i$ must not have been sold on day $i-1$. \n\nThe daily profit is the sum of the profits from all drink types sold on that\nday. The total profit from the sales plan is the sum of the profits over\n$n$ days. What is the maximum total profit that can be achieved if Pak\nChanek plans the sales optimally?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\leq n \\leq 2 \\cdot 10^5$; $3 \\leq m \\leq 2 \\cdot 10^5$; $n\n\\cdot m \\leq 2 \\cdot 10^5$) \u2014 the number of rows and columns in a grid.\n\nThe next $n$ lines of each test case contain $m$ integers each, where\nthe $i$-th line contains the integers $A_{i,1} A_{i,2}, \\ldots,\nA_{i,m}$ ($-10^9 \\leq A_{i,j} \\leq 10^9$) \u2014 project profits of each\ndrink type on the $i$-th day.\n\nIt is guaranteed that the sum of $n \\cdot m$ over all test cases does not\nexceed $2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer: the maximum profit that Pak\nChanek can achieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1\n3 6\n79 20 49 5 -1000 500\n-105 9 109 24 -98 -499\n14 47 12 39 23 50\n</pre></td>\n    <td><pre>475\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Here is Pak Chanek's optimal plan:\n\n![](CDN_BASE_URL/4277bb4b771ce557c9df4ba84c32fcb1)|\n![](CDN_BASE_URL/9da16237201d15894364e851ed195f46)|\n![](CDN_BASE_URL/3b7487c42d65f64db69a0a6a263bbf48)  \n---|---|---  \n  \n  * On day $1$, Pak Chanek sells drink types $1$ to $3$. Generating a profit of $79+20+49 = 148$. \n  * On day $2$, Pak Chanek sells drink types $2$ to $4$. Generating a profit of $9+109+24 = 142$ \n  * On day $3$, Pak Chanek sells drink types $1$ to $6$. Generating a profit of $185$. \n\nSo, the total profit of Pak Chanek's plan is $148 + 142 + 185 = 475$."
    },
    {
        "problem_id": "2021E1",
        "url": "https://codeforces.com/problemset/problem/2021/E1",
        "title": "Digital Village (Easy Version)",
        "rating": 2300,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "fft",
            "graphs",
            "greedy",
            "implementation",
            "math",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. In the three versions, the\nconstraints on $n$ and $m$ are different. You can make hacks only if\nall the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The\nvillage can be represented as a connected simple graph with $n$ houses and\n$m$ internet cables connecting house $u_i$ and house $v_i$, each\nwith a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers\nin at most $k$ of the houses. The houses that need internet will then be\nconnected to one of the servers. However, since each cable has its latency,\nthe latency experienced by house $s_i$ requiring internet will be the\nmaximum latency of the cables between that house and the server it is\nconnected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total\nlatency that can be achieved for all the houses requiring internet.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 100$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $n$, $m$,\n$p$ ($2 \\le n \\le 400$; $n-1 \\le m \\le 400$; $1 \\le p \\le n$)\n\u2014 the number of houses, the number of cables and the number of houses that\nneed internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2,\n\\ldots, s_p$ ($1 \\le s_i \\le n$) \u2014 the houses that need internet. It is\nguaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three\nintegers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$;\n$1 \\le w_i \\le 10^9$) \u2014 the internet cable connecting house $u_i$ and\nhouse $v_i$ with latency of $w_i$. It is guaranteed that the given\nedges form a connected simple graph.\n\nIt is guaranteed that the sum of $n^3$ and the sum of $m^3$ do not\nexceed $10^8$.",
        "output": "For each test case, output $n$ integers: the minimum total latency that\ncan be achieved for all the houses requiring internet for each $k =\n1,2,\\ldots,n$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n9 8 5\n2 5 6 8 9\n1 2 1\n1 3 2\n3 4 10\n4 5 3\n4 6 5\n1 7 10\n7 8 4\n7 9 2\n3 3 2\n3 1\n1 2 1\n2 3 3\n1 3 2\n</pre></td>\n    <td><pre>34 19 9 4 0 0 0 0 0\n2 0 0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case for $k=3$, a possible optimal solution is to\ninstall servers at vertices $2$, $6$ and $8$ and obtain the\nfollowing latency:\n\n  * $\\text{latency}(2) = 0$ \n  * $\\text{latency}(5) = \\max(3, 5) = 5$ \n  * $\\text{latency}(6) = 0$ \n  * $\\text{latency}(8) = 0$ \n  * $\\text{latency}(9) = \\max(2, 4) = 4$ \n\nSo the total latency is $9$."
    },
    {
        "problem_id": "2021E2",
        "url": "https://codeforces.com/problemset/problem/2021/E2",
        "title": "Digital Village (Hard Version)",
        "rating": 2500,
        "tags": [
            "data structures",
            "dp",
            "dsu",
            "graphs",
            "math",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. In the three versions, the\nconstraints on $n$ and $m$ are different. You can make hacks only if\nall the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The\nvillage can be represented as a connected simple graph with $n$ houses and\n$m$ internet cables connecting house $u_i$ and house $v_i$, each\nwith a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers\nin at most $k$ of the houses. The houses that need internet will then be\nconnected to one of the servers. However, since each cable has its latency,\nthe latency experienced by house $s_i$ requiring internet will be the\nmaximum latency of the cables between that house and the server it is\nconnected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total\nlatency that can be achieved for all the houses requiring internet.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 2000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $n$, $m$,\n$p$ ($2 \\le n \\le 5000$; $n-1 \\le m \\le 5000$; $1 \\le p \\le\nn$) \u2014 the number of houses, the number of cables, and the number of houses\nthat need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2,\n\\ldots, s_p$ ($1 \\le s_i \\le n$) \u2014 the houses that need internet. It is\nguaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three\nintegers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$;\n$1 \\le w_i \\le 10^9$) \u2014 the internet cable connecting house $u_i$ and\nhouse $v_i$ with latency of $w_i$. It is guaranteed that the given\nedges form a connected simple graph.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ do not exceed\n$5000$.",
        "output": "For each test case, output $n$ integers: the minimum total latency that\ncan be achieved for all the houses requiring internet for each $k =\n1,2,\\ldots,n$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n9 8 5\n2 5 6 8 9\n1 2 1\n1 3 2\n3 4 10\n4 5 3\n4 6 5\n1 7 10\n7 8 4\n7 9 2\n3 3 2\n3 1\n1 2 1\n2 3 3\n1 3 2\n</pre></td>\n    <td><pre>34 19 9 4 0 0 0 0 0\n2 0 0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case for $k=3$, a possible optimal solution is to\ninstall servers at vertices $2$, $6$ and $8$ and obtain the\nfollowing latency:\n\n  * $\\text{latency}(2) = 0$ \n  * $\\text{latency}(5) = \\max(3, 5) = 5$ \n  * $\\text{latency}(6) = 0$ \n  * $\\text{latency}(8) = 0$ \n  * $\\text{latency}(9) = \\max(2, 4) = 4$ \n\nSo the total latency is $9$."
    },
    {
        "problem_id": "2021E3",
        "url": "https://codeforces.com/problemset/problem/2021/E3",
        "title": "Digital Village (Extreme Version)",
        "rating": 2800,
        "tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "graphs",
            "greedy",
            "math",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the extreme version of the problem. In the three versions, the\nconstraints on $n$ and $m$ are different. You can make hacks only if\nall the versions of the problem are solved.\n\nPak Chanek is setting up internet connections for the village of Khuntien. The\nvillage can be represented as a connected simple graph with $n$ houses and\n$m$ internet cables connecting house $u_i$ and house $v_i$, each\nwith a latency of $w_i$.\n\nThere are $p$ houses that require internet. Pak Chanek can install servers\nin at most $k$ of the houses. The houses that need internet will then be\nconnected to one of the servers. However, since each cable has its latency,\nthe latency experienced by house $s_i$ requiring internet will be the\nmaximum latency of the cables between that house and the server it is\nconnected to.\n\nFor each $k = 1,2,\\ldots,n$, help Pak Chanek determine the minimum total\nlatency that can be achieved for all the houses requiring internet.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains 3 integers $n$, $m$, $p$\n($2 \\le n \\le 2 \\cdot 10^5$; $n-1 \\le m \\le 2 \\cdot 10^5$; $1 \\le p\n\\le n$) \u2014 the number of houses, the number of cables, and the number of\nhouses that need internet.\n\nThe second line of each test case contains $p$ integers $s_1, s_2,\n\\ldots, s_p$ ($1 \\le s_i \\le n$) \u2014 the houses that need internet. It is\nguaranteed that all elements of $s$ are distinct.\n\nThe $i$-th of the next $m$ lines of each test case contains three\nintegers $u_i$, $v_i$, and $w_i$ ($1 \\le u_i < v_i \\le n$;\n$1 \\le w_i \\le 10^9$) \u2014 the internet cable connecting house $u_i$ and\nhouse $v_i$ with latency of $w_i$. It is guaranteed that the given\nedges form a connected simple graph.\n\nIt is guaranteed that the sum of $n$ and the sum of $m$ do not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $n$ integers: the minimum total latency that\ncan be achieved for all the houses requiring internet for each $k =\n1,2,\\ldots,n$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n9 8 5\n2 5 6 8 9\n1 2 1\n1 3 2\n3 4 10\n4 5 3\n4 6 5\n1 7 10\n7 8 4\n7 9 2\n3 3 2\n3 1\n1 2 1\n2 3 3\n1 3 2\n</pre></td>\n    <td><pre>34 19 9 4 0 0 0 0 0\n2 0 0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case for $k=3$, a possible optimal solution is to\ninstall servers at vertices $2$, $6$ and $8$ and obtain the\nfollowing latency:\n\n  * $\\text{latency}(2) = 0$ \n  * $\\text{latency}(5) = \\max(3, 5) = 5$ \n  * $\\text{latency}(6) = 0$ \n  * $\\text{latency}(8) = 0$ \n  * $\\text{latency}(9) = \\max(2, 4) = 4$ \n\nSo the total latency is $9$."
    },
    {
        "problem_id": "2022A",
        "url": "https://codeforces.com/problemset/problem/2022/A",
        "title": "Bus to P\u00e9njamo",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Ya vamos llegando a P\u00e9eeenjamoo \u266b\u266b\u266b\n\nThere are $n$ families travelling to P\u00e9njamo to witness Mexico's largest-\never \"walking a chicken on a leash\" marathon. The $i$-th family has\n$a_i$ family members. All families will travel using a single bus\nconsisting of $r$ rows with $2$ seats each.\n\nA person is considered happy if:\n\n  * Another family member is seated in the same row as them, or \n  * They are sitting alone in their row (with an empty seat next to them). \n\nDetermine the maximum number of happy people in an optimal seating\narrangement. Note that everyone must be seated in the bus.\n\nIt is guaranteed that all family members will fit on the bus. Formally, it is\nguaranteed that $\\displaystyle\\sum_{i=1}^{n}a_i \\le 2r$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $r$\n($1 \\le n \\le 100$; $1 \\le r \\le 500$) \u2014 the number of families and\nthe number of rows in the bus.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\le a_i \\le 10$) \u2014 the number of family members in each family.",
        "output": "For each test case, output the maximum number of happy people in an optimal\nseating arrangement.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3 3\n2 3 1\n3 3\n2 2 2\n4 5\n1 1 2 2\n4 5\n3 1 1 3\n</pre></td>\n    <td><pre>4\n6\n6\n6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the two members of the first family can sit together\nin the first row, while the two members of the second family can sit together\nin the second row. The remaining member of the second family can sit in the\nthird row along with a member of the third family. This seating arrangement is\nshown below, where the $4$ happy people are colored green.\n\n$\\color{green}{1}$| $\\color{green}{1}$  \n---|---  \n$\\color{green}{2}$| $\\color{green}{2}$  \n$2$| $3$  \n  \nIn the second test case, a possible seating arrangement with $6$ happy\npeople is shown below.\n\n$\\color{green}{3}$| $\\color{green}{3}$  \n---|---  \n$\\color{green}{1}$| $\\color{green}{1}$  \n$\\color{green}{2}$| $\\color{green}{2}$  \n  \nIn the third test case, a possible seating arrangement with $6$ happy\npeople is shown below.\n\n$\\color{green}{4}$| $\\color{green}{4}$  \n---|---  \n$\\color{green}{}$| $\\color{green}{2}$  \n$\\color{green}{3}$| $\\color{green}{3}$  \n$\\color{green}{1}$| $\\color{green}{}$  \n$\\color{green}{}$| $\\color{green}{}$"
    },
    {
        "problem_id": "2022B",
        "url": "https://codeforces.com/problemset/problem/2022/B",
        "title": "Kar Salesman",
        "rating": 1300,
        "tags": [
            "binary search",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Karel is a salesman in a car dealership. The dealership has $n$ different\nmodels of cars. There are $a_i$ cars of the $i$-th model. Karel is an\nexcellent salesperson and can convince customers to buy up to $x$ cars (of\nKarel's choice), as long as the cars are from different models.  \n  \nDetermine the minimum number of customers Karel has to bring in to sell all\nthe cars.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $x$\n($1 \\le n \\le 5 \\cdot 10^5$; $1 \\le x \\le 10$) \u2014 the number of\ndifferent models of cars and the maximum number of cars Karel can convince a\ncustomer to buy.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\le a_i \\le 10^9$) \u2014 the number of cars of each model.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case, output the minimum possible number of customers needed to\nsell all the cars.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3 2\n3 1 2\n3 3\n2 1 3\n5 3\n2 2 1 9 2\n7 4\n2 5 3 3 5 2 5\n</pre></td>\n    <td><pre>3\n3\n9\n7\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first case, Karel only needs to lure in $3$ customers. He will\nconvince the customers to buy the following models of cars:\n\n  * Customer $1$ buys $2$ cars with model $1$ and $3$. \n  * Customer $2$ buys $2$ cars with model $1$ and $2$. \n  * Customer $3$ buys $2$ cars with model $1$ and $3$. \n\nFor the second case, Karel only needs to lure in $3$ customers. He will\nconvince the customers to buy the following models of cars:\n\n  * Customer $1$ buys $2$ cars with model $1$ and $3$. \n  * Customer $2$ buys $3$ cars with model $1$, $2$ and $3$. \n  * Customer $3$ buys $1$ car with model $3$."
    },
    {
        "problem_id": "2022C",
        "url": "https://codeforces.com/problemset/problem/2022/C",
        "title": "Gerrymandering",
        "rating": 1800,
        "tags": [
            "dp",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "We all steal a little bit. But I have only one hand, while my adversaries have\ntwo.\n\n\u00c1lvaro Obreg\u00f3n\n\n\u00c1lvaro and Jos\u00e9 are the only candidates running for the presidency of Tepito,\na rectangular grid of $2$ rows and $n$ columns, where each cell\nrepresents a house. It is guaranteed that $n$ is a multiple of $3$.\n\nUnder the voting system of Tepito, the grid will be split into districts,\nwhich consist of any $3$ houses that are connected$^{\\text{\u2217}}$. Each\nhouse will belong to exactly one district.\n\nEach district will cast a single vote. The district will vote for \u00c1lvaro or\nJos\u00e9 respectively if at least $2$ houses in that district select them.\nTherefore, a total of $\\frac{2n}{3}$ votes will be cast.\n\nAs \u00c1lvaro is the current president, he knows exactly which candidate each\nhouse will select. If \u00c1lvaro divides the houses into districts optimally,\ndetermine the maximum number of votes he can get.\n\n$^{\\text{\u2217}}$A set of cells is connected if there is a path between any\n$2$ cells that requires moving only up, down, left and right through cells\nin the set.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains one integer $n$ ($3 \\le n \\le\n10^5$; $n$ is a multiple of $3$) \u2014 the number of columns of Tepito.\n\nThe following two lines each contain a string of length $n$. The\n$i$-th line contains the string $s_i$, consisting of the characters\n$\\texttt{A}$ and $\\texttt{J}$. If $s_{i,j}=\\texttt{A}$, the house\nin the $i$-th row and $j$-th column will select \u00c1lvaro. Otherwise if\n$s_{i,j}=\\texttt{J}$, the house will select Jos\u00e9.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single integer \u2014 the maximum number of districts\n\u00c1lvaro can win by optimally dividing the houses into districts.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\nAAA\nAJJ\n6\nJAJAJJ\nJJAJAJ\n6\nAJJJAJ\nAJJAAA\n9\nAJJJJAJAJ\nJAAJJJJJA\n</pre></td>\n    <td><pre>2\n2\n3\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The image below showcases the optimal arrangement of districts \u00c1lvaro can use\nfor each test case in the example.\n\n![](CDN_BASE_URL/5f1f1034d2d521a09ea4a9a366636fd8)"
    },
    {
        "problem_id": "2022D1",
        "url": "https://codeforces.com/problemset/problem/2022/D1",
        "title": "Asesino (Easy Version)",
        "rating": 1900,
        "tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "implementation",
            "interactive"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2500,
        "memory_limit_mb": 256,
        "description": "This is the easy version of the problem. In this version, you can ask at most\n$n+69$ questions. You can make hacks only if both versions of the problem\nare solved.\n\nThis is an interactive problem.\n\nIt is a tradition in Mexico's national IOI trainings to play the game\n\"Asesino\", which is similar to \"Among Us\" or \"Mafia\".\n\nToday, $n$ players, numbered from $1$ to $n$, will play \"Asesino\"\nwith the following three roles:\n\n  * Knight: a Knight is someone who always tells the truth. \n  * Knave: a Knave is someone who always lies. \n  * Impostor: an Impostor is someone everybody thinks is a Knight, but is secretly a Knave. \n\nEach player will be assigned a role in the game. There will be exactly one\nImpostor but there can be any (possible zero) number of Knights and Knaves.\n\nAs the game moderator, you have accidentally forgotten the roles of everyone,\nbut you need to determine the player who is the Impostor.\n\nTo determine the Impostor, you will ask some questions. In each question, you\nwill pick two players $i$ and $j$ ($1 \\leq i, j \\leq n$; $i \\neq\nj$) and ask if player $i$ thinks that player $j$ is a Knight. The\nresults of the question is shown in the table below.\n\n| Knight| Knave| Impostor  \n---|---|---|---  \nKnight| Yes| No| Yes  \nKnave| No| Yes| No  \nImpostor| No| Yes| \u2014  \nThe response of the cell in row $a$ and column $b$ is the result of\nasking a question when $i$ has role $a$ and $j$ has row $b$.\nFor example, the \"Yes\" in the top right cell belongs to row \"Knight\" and\ncolumn \"Impostor\", so it is the response when $i$ is a Knight and $j$\nis an Impostor.\n\nFind the Impostor in at most $n + 69$ questions.\n\nNote: the grader is adaptive: the roles of the players are not fixed in the\nbeginning and may change depending on your questions. However, it is\nguaranteed that there exists an assignment of roles that is consistent with\nall previously asked questions under the constraints of this problem.",
        "input": "The first line of input contains a single integer $t$ ($1 \\leq t \\leq\n10^3$) \u2014 the number of test cases. The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n\n\\le 10^5$) \u2014 the number of people playing the game.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "",
        "interaction": "To ask a question, output a line in the following format:\n\n  * \"? i j\" ($1 \\leq i,j \\leq n$; $i \\neq j$) \u2014 to ask player $i$ if they think player $j$ is a Knight. \n\nThe jury will output a \"1\" if player $i$ thinks player $j$ is a\nKnight, and \"0\" otherwise.\n\nWhen you have determined which player the Impostor is, output a line in the\nfollowing format:\n\n  * \"! i\" ($1 \\leq i \\leq n$) \u2014 the Impostor is player $i$. \n\nNote that answering does not count to your limit of $n+69$ questions.\n\nIf you have made an invalid output, used more than $n+69$ questions or\nwrongly determined the Impostor, the jury will respond with \"-1\" and you will\nreceive a Wrong Answer verdict. Upon receiving \"-1\", your program must\nterminate immediately. Otherwise, you may receive an arbitrary verdict because\nyour solution might be reading from a closed stream.\n\nAfter printing a query do not forget to output the end of the line and flush\nthe output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * sys.stdout.flush() in Python; \n  * std::io::stdout().flush() in Rust; \n  * see the documentation for other languages. \n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ \u2014 the number of test\ncases.\n\nThe first line of each test case should contain the integer $n$ followed\nby the string \"manual\".\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1\n\\le a_i \\le 1$) \u2014 the roles of each player. $1$ denotes a Knight,\n$0$ denotes a Knave, and $-1$ dentoes an Impostor. There must be\nexactly one Impostor, that is there must be exactly one index $i$ such\nthat $a_i=-1$.\n\nAs an example, the hack format for the example input is:\n\n    \n    \n    2\n    7 manual\n    0 1 0 -1 0 1 0\n    4 manual\n    0 1 -1 0",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n7\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n4\n\n0\n\n1\n\n1\n\n1\n</pre></td>\n    <td><pre>\n\n? 1 3\n\n? 7 6\n\n? 2 5\n\n? 6 2\n\n? 4 5\n\n? 4 6\n\n? 1 4\n\n? 2 4\n\n! 4\n\n? 1 2\n\n? 2 3\n\n? 3 4\n\n? 4 1\n\n! 3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Note that the example test cases do not represent an optimal strategy for\nasking questions and are only shown for the sake of demonstrating the\ninteraction format. Specifically, we cannot determine which player is the\nImpostor from the questions asked in the examples.\n\nIn the first test case of the example, players at indices $2$ and $6$\nare Knights, players at indices $1$, $3$, $5$, and $7$ are\nKnaves, and the Impostor is at index $4$. The following is an explanation\nof the questions asked:\n\n  * In the first query, player $i$ is a Knave and player $j$ is a Knave. The answer is \"yes\" since Knaves always lie.\n  * In the second query, player $i$ is a Knave and player $j$ is a Knight. The answer is \"no\" since Knaves always lie.\n  * In the third query, player $i$ is a Knight and player $j$ is a Knave. The answer is \"no\" since Knights always tell the truth.\n  * In the fourth query, player $i$ is a Knight and player $j$ is a Knight. The answer is \"yes\" since Knights always tell the truth.\n  * In the fifth query, player $i$ is a Impostor and player $j$ is a Knave. The answer is \"yes\" since the Impostor always lies.\n  * In the sixth query, player $i$ is a Impostor and player $j$ is a Knight. The answer is \"no\" since the Impostor always lies.\n  * In the seventh query, player $i$ is a Knave and player $j$ is a Impostor. The answer is \"no\" since Knaves always lie and Knaves thinks that the Impostor is a Knight.\n  * In the eighth query, player $i$ is a Knight and player $j$ is a Impostor. The answer is \"yes\" since Knights always tell the truth and Knights think that the Impostor is a Knight."
    },
    {
        "problem_id": "2022D2",
        "url": "https://codeforces.com/problemset/problem/2022/D2",
        "title": "Asesino (Hard Version)",
        "rating": 2700,
        "tags": [
            "constructive algorithms",
            "dp",
            "interactive"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2500,
        "memory_limit_mb": 256,
        "description": "This is the hard version of the problem. In this version, you must use the\nminimum number of queries possible. You can make hacks only if both versions\nof the problem are solved.\n\nThis is an interactive problem.\n\nIt is a tradition in Mexico's national IOI trainings to play the game\n\"Asesino\", which is similar to \"Among Us\" or \"Mafia\".\n\nToday, $n$ players, numbered from $1$ to $n$, will play \"Asesino\"\nwith the following three roles:\n\n  * Knight: a Knight is someone who always tells the truth. \n  * Knave: a Knave is someone who always lies. \n  * Impostor: an Impostor is someone everybody thinks is a Knight, but is secretly a Knave. \n\nEach player will be assigned a role in the game. There will be exactly one\nImpostor but there can be any (possible zero) number of Knights and Knaves.\n\nAs the game moderator, you have accidentally forgotten the roles of everyone,\nbut you need to determine the player who is the Impostor.\n\nTo determine the Impostor, you will ask some questions. In each question, you\nwill pick two players $i$ and $j$ ($1 \\leq i, j \\leq n$; $i \\neq\nj$) and ask if player $i$ thinks that player $j$ is a Knight. The\nresults of the question is shown in the table below.\n\n| Knight| Knave| Impostor  \n---|---|---|---  \nKnight| Yes| No| Yes  \nKnave| No| Yes| No  \nImpostor| No| Yes| \u2014  \nThe response of the cell in row $a$ and column $b$ is the result of\nasking a question when $i$ has role $a$ and $j$ has row $b$.\nFor example, the \"Yes\" in the top right cell belongs to row \"Knight\" and\ncolumn \"Impostor\", so it is the response when $i$ is a Knight and $j$\nis an Impostor.\n\nFind the Impostor in the minimum number of queries possible. That is, let\n$f(n)$ be the minimum integer such that for $n$ players, there exists\na strategy that can determine the Impostor using at most $f(n)$ questions.\nThen, you should use at most $f(n)$ questions to determine the Impostor.\n\nNote: the grader is adaptive: the roles of the players are not fixed in the\nbeginning and may change depending on your questions. However, it is\nguaranteed that there exists an assignment of roles that is consistent with\nall previously asked questions under the constraints of this problem.",
        "input": "The first line of input contains a single integer $t$ ($1 \\leq t \\leq\n10^3$) \u2014 the number of test cases. The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n\n\\le 10^5$) \u2014 the number of people playing the game.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "",
        "interaction": "To ask a question, output a line in the following format:\n\n  * \"? i j\" ($1 \\leq i,j \\leq n$; $i \\neq j$) \u2014 to ask player $i$ if they think player $j$ is a Knight. \n\nThe jury will output a \"1\" if player $i$ thinks player $j$ is a\nKnight, and \"0\" otherwise.\n\nWhen you have determined which player the Impostor is, output a line in the\nfollowing format:\n\n  * \"! i\" ($1 \\leq i \\leq n$) \u2014 the Impostor is player $i$. \n\nNote that answering does not count to your limit of $f(n)$ questions.\n\nIf you have made an invalid output, used more than $f(n)$ questions or\nwrongly determined the Impostor, the jury will respond with \"-1\" and you will\nreceive a Wrong Answer verdict. Upon receiving \"-1\", your program must\nterminate immediately. Otherwise, you may receive an arbitrary verdict because\nyour solution might be reading from a closed stream.\n\nAfter printing a query do not forget to output the end of the line and flush\nthe output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * sys.stdout.flush() in Python; \n  * std::io::stdout().flush() in Rust; \n  * see the documentation for other languages. \n\nHack format\n\nFor hacks, use the following format.\n\nThe first line should contain a single integer $t$ \u2014 the number of test\ncases.\n\nThe first line of each test case should contain the integer $n$ followed\nby the string \"manual\".\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1\n\\le a_i \\le 1$) \u2014 the roles of each player. $1$ denotes a Knight,\n$0$ denotes a Knave, and $-1$ dentoes an Impostor. There must be\nexactly one Impostor, that is there must be exactly one index $i$ such\nthat $a_i=-1$.\n\nAs an example, the hack format for the example input is:\n\n    \n    \n    2\n    7 manual\n    0 1 0 -1 0 1 0\n    4 manual\n    0 1 -1 0",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n7\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n4\n\n0\n\n1\n\n1\n\n1\n</pre></td>\n    <td><pre>\n\n? 1 3\n\n? 7 6\n\n? 2 5\n\n? 6 2\n\n? 4 5\n\n? 4 6\n\n? 1 4\n\n! 4\n\n? 1 2\n\n? 2 3\n\n? 3 4\n\n? 4 1\n\n! 3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Note that the example test cases do not represent an optimal strategy for\nasking questions and are only shown for the sake of demonstrating the\ninteraction format. Specifically, we cannot determine which player is the\nImpostor from the questions asked in the examples.\n\nIn the first test case of the example, players at indices $2$ and $6$\nare Knights, players at indices $1$, $3$, $5$, and $7$ are\nKnaves, and the Impostor is at index $4$. The following is an explanation\nof the questions asked:\n\n  * In the first query, player $i$ is a Knave and player $j$ is a Knave. The answer is \"yes\" since Knaves always lie.\n  * In the second query, player $i$ is a Knave and player $j$ is a Knight. The answer is \"no\" since Knaves always lie.\n  * In the third query, player $i$ is a Knight and player $j$ is a Knave. The answer is \"no\" since Knights always tell the truth.\n  * In the fourth query, player $i$ is a Knight and player $j$ is a Knight. The answer is \"yes\" since Knights always tell the truth.\n  * In the fifth query, player $i$ is a Impostor and player $j$ is a Knave. The answer is \"yes\" since the Impostor always lies.\n  * In the sixth query, player $i$ is a Impostor and player $j$ is a Knight. The answer is \"no\" since the Impostor always lies.\n  * In the seventh query, player $i$ is a Knave and player $j$ is a Impostor. The answer is \"no\" since Knaves always lie and Knaves thinks that the Impostor is a Knight."
    },
    {
        "problem_id": "2022E1",
        "url": "https://codeforces.com/problemset/problem/2022/E1",
        "title": "Billetes MX (Easy Version)",
        "rating": 2500,
        "tags": [
            "2-sat",
            "binary search",
            "combinatorics",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "This is the easy version of the problem. In this version, it is guaranteed\nthat $q = 0$. You can make hacks only if both versions of the problem are\nsolved.\n\nAn integer grid $A$ with $p$ rows and $q$ columns is called\nbeautiful if:\n\n  * All elements of the grid are integers between $0$ and $2^{30}-1$, and \n  * For any subgrid, the XOR of the values at the corners is equal to $0$. Formally, for any four integers $i_1$, $i_2$, $j_1$, $j_2$ ($1 \\le i_1 < i_2 \\le p$; $1 \\le j_1 < j_2 \\le q$), $A_{i_1, j_1} \\oplus A_{i_1, j_2} \\oplus A_{i_2, j_1} \\oplus A_{i_2, j_2} = 0$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR). \n\nThere is a partially filled integer grid $G$ with $n$ rows and $m$\ncolumns where only $k$ cells are filled. Polycarp wants to know how many\nways he can assign integers to the unfilled cells so that the grid is\nbeautiful.\n\nHowever, Monocarp thinks that this problem is too easy. Therefore, he will\nperform $q$ updates on the grid. In each update, he will choose an\nunfilled cell and assign an integer to it. Note that these updates are\npersistent. That is, changes made to the grid will apply when processing\nfuture updates.\n\nFor each of the $q + 1$ states of the grid, the initial state and after\neach of the $q$ queries, determine the number of ways Polycarp can assign\nintegers to the unfilled cells so that the grid is beautiful. Since this\nnumber can be very large, you are only required to output their values modulo\n$10^9+7$.",
        "input": "The first line contains $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test\ncases.\n\nThe first line of each test case contains four integers $n$, $m$,\n$k$ and $q$ ($2 \\le n, m \\le 10^5$; $0 \\le k \\le 10^5$; $q =\n0$) \u2014 the number of rows, the number of columns, the number of fixed cells,\nand the number of updates.\n\nThe following $k$ lines contain three integers $r$, $c$ and\n$v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) \u2014\nindicating that $G_{r, c}$ is assigned the integer $v$.\n\nThe following $q$ lines contain three integers $r$, $c$ and\n$v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$) \u2014\nindicating that $G_{r, c}$ is assigned the integer $v$.\n\nIt is guaranteed that the pairs $(r,c)$ over all assignments are distinct.\n\nIt is guaranteed that the sum of $n$, $m$, $k$ and $q$ over\nall test cases does not exceed $10^5$ respectively.",
        "output": "For each test case, output $q + 1$ lines. The $i$-th line of output\nshould contain the answer of the $i$-th state of the grid modulo $10^9 +\n7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3 3 8 0\n2 1 6\n3 2 12\n1 2 6\n2 2 0\n1 3 10\n1 1 0\n2 3 12\n3 1 10\n2 5 2 0\n1 1 10\n1 2 30\n</pre></td>\n    <td><pre>1\n489373567\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case of the example, we have the following grid:\n\n$0$| $6$| $10$  \n---|---|---  \n$6$| $0$| $12$  \n$10$| $12$| $?$  \n  \nIt can be proven that the only valid value for tile $(3, 3)$ is $0$."
    },
    {
        "problem_id": "2022E2",
        "url": "https://codeforces.com/problemset/problem/2022/E2",
        "title": "Billetes MX (Hard Version)",
        "rating": 2600,
        "tags": [
            "binary search",
            "combinatorics",
            "data structures",
            "dsu",
            "graphs"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "This is the hard version of the problem. In this version, it is guaranteed\nthat $q \\leq 10^5$. You can make hacks only if both versions of the\nproblem are solved.\n\nAn integer grid $A$ with $p$ rows and $q$ columns is called\nbeautiful if:\n\n  * All elements of the grid are integers between $0$ and $2^{30}-1$, and \n  * For any subgrid, the XOR of the values at the corners is equal to $0$. Formally, for any four integers $i_1$, $i_2$, $j_1$, $j_2$ ($1 \\le i_1 < i_2 \\le p$; $1 \\le j_1 < j_2 \\le q$), $A_{i_1, j_1} \\oplus A_{i_1, j_2} \\oplus A_{i_2, j_1} \\oplus A_{i_2, j_2} = 0$, where $\\oplus$ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR). \n\nThere is a partially filled integer grid $G$ with $n$ rows and $m$\ncolumns where only $k$ cells are filled. Polycarp wants to know how many\nways he can assign integers to the unfilled cells so that the grid is\nbeautiful.\n\nHowever, Monocarp thinks that this problem is too easy. Therefore, he will\nperform $q$ updates on the grid. In each update, he will choose an\nunfilled cell and assign an integer to it. Note that these updates are\npersistent. That is, changes made to the grid will apply when processing\nfuture updates.\n\nFor each of the $q + 1$ states of the grid, the initial state and after\neach of the $q$ queries, determine the number of ways Polycarp can assign\nintegers to the unfilled cells so that the grid is beautiful. Since this\nnumber can be very large, you are only required to output their values modulo\n$10^9+7$.",
        "input": "The first line contains $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test\ncases.\n\nThe first line of each test case contains four integers $n$, $m$,\n$k$ and $q$ ($2 \\le n, m \\le 10^5$; $0 \\le k, q \\leq 10^5$) \u2014\nthe number of rows, the number of columns, the number of fixed cells, and the\nnumber of updates.\n\nThe following $k$ lines contain three integers $r$, $c$ and\n$v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$)\nindicating that $G_{r, c}$ is assigned the integer $v$.\n\nThe following $q$ lines contain three integers $r$, $c$ and\n$v$ ($1 \\le r \\le n, 1 \\le c \\le m$; $0 \\le v < 2^{30}$)\nindicating that $G_{r, c}$ is assigned the integer $v$.\n\nIt is guaranteed that the pairs $(r,c)$ over all assignments are distinct.\n\nIt is guaranteed that the sum of $n$, $m$, $k$ and $q$ over\nall test cases does not exceed $10^5$ respectively.",
        "output": "For each test case, output $q + 1$ lines. The $i$-th line of output\nshould contain the answer of the $i$-th state of the grid modulo $10^9 +\n7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3 3 8 1\n2 1 6\n3 2 12\n1 2 6\n2 2 0\n1 3 10\n1 1 0\n2 3 12\n3 1 10\n3 3 1\n2 5 2 0\n1 1 10\n1 2 30\n2 5 0 2\n1 1 10\n1 2 30\n</pre></td>\n    <td><pre>1\n0\n489373567\n651321892\n769740174\n489373567\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case of the example, we initially have the following grid:\n\n$0$| $6$| $10$  \n---|---|---  \n$6$| $0$| $12$  \n$10$| $12$| $?$  \n  \nIt can be proven that the only valid value for tile $(3, 3)$ is $0$,\nso the first answer is $1$. For the second query, the grid does not\nsatisfy the condition, and thus the answer is $0$."
    },
    {
        "problem_id": "2023A",
        "url": "https://codeforces.com/problemset/problem/2023/A",
        "title": "Concatenation of Arrays",
        "rating": 1300,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given $n$ arrays $a_1$, $\\ldots$, $a_n$. The length of\neach array is two. Thus, $a_i = [a_{i, 1}, a_{i, 2}]$. You need to\nconcatenate the arrays into a single array of length $2n$ such that the\nnumber of inversions$^{\\dagger}$ in the resulting array is minimized. Note\nthat you do not need to count the actual number of inversions.\n\nMore formally, you need to choose a permutation$^{\\ddagger}$ $p$ of\nlength $n$, so that the array $b = [a_{p_1,1}, a_{p_1,2}, a_{p_2, 1},\na_{p_2, 2}, \\ldots, a_{p_n,1}, a_{p_n,2}]$ contains as few inversions as\npossible.\n\n$^{\\dagger}$The number of inversions in an array $c$ is the number of\npairs of indices $i$ and $j$ such that $i < j$ and $c_i >\nc_j$.\n\n$^{\\ddagger}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 10^5$) \u2014 the number of arrays.\n\nEach of the following $n$ lines contains two integers $a_{i,1}$ and\n$a_{i,2}$ ($1 \\le a_{i,j} \\le 10^9$) \u2014 the elements of the $i$-th\narray.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output $2n$ integers \u2014 the elements of the array you\nobtained. If there are multiple solutions, output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n1 4\n2 3\n3\n3 2\n4 3\n2 1\n5\n5 10\n2 3\n9 6\n4 1\n8 7\n1\n10 20\n</pre></td>\n    <td><pre>2 3 1 4\n2 1 3 2 4 3\n4 1 2 3 5 10 8 7 9 6\n10 20\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we concatenated the arrays in the order $2, 1$.\nLet's consider the inversions in the resulting array $b = [2, 3, 1, 4]$:\n\n  * $i = 1$, $j = 3$, since $b_1 = 2 > 1 = b_3$;\n  * $i = 2$, $j = 3$, since $b_2 = 3 > 1 = b_3$. \n\nThus, the number of inversions is $2$. It can be proven that this is the\nminimum possible number of inversions.\n\nIn the second test case, we concatenated the arrays in the order $3, 1,\n2$. Let's consider the inversions in the resulting array $b = [2, 1, 3, 2,\n4, 3]$:\n\n  * $i = 1$, $j = 2$, since $b_1 = 2 > 1 = b_2$;\n  * $i = 3$, $j = 4$, since $b_3 = 3 > 2 = b_4$;\n  * $i = 5$, $j = 6$, since $b_5 = 4 > 3 = b_6$. \n\nThus, the number of inversions is $3$. It can be proven that this is the\nminimum possible number of inversions.\n\nIn the third test case, we concatenated the arrays in the order $4, 2, 1, 5,\n3$."
    },
    {
        "problem_id": "2023B",
        "url": "https://codeforces.com/problemset/problem/2023/B",
        "title": "Skipping",
        "rating": 1700,
        "tags": [
            "binary search",
            "dp",
            "graphs",
            "shortest paths"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "It is already the year $3024$, ideas for problems have long run out, and\nthe olympiad now takes place in a modified individual format. The olympiad\nconsists of $n$ problems, numbered from $1$ to $n$. The $i$-th\nproblem has its own score $a_i$ and a certain parameter $b_i$ ($1\n\\le b_i \\le n$).\n\nInitially, the testing system gives the participant the first problem. When\nthe participant is given the $i$-th problem, they have two options:\n\n  * They can submit the problem and receive $a_i$ points; \n  * They can skip the problem, in which case they will never be able to submit it. \n\nThen, the testing system selects the next problem for the participant from\nproblems with indices $j$, such that:\n\n  * If he submitted the $i$-th problem, it looks at problems with indices $j < i$; \n  * If he skipped the $i$-th problem, it looks at problems with indices $j \\leq b_i$. \n\nAmong these problems, it selects the problem with the maximum index that it\nhas not previously given to the participant (he has neither submitted nor\nskipped it before). If there is no such problem, then the competition for the\nparticipant ends, and their result is equal to the sum of points for all\nsubmitted problems. In particular, if the participant submits the first\nproblem, then the competition for them ends. Note that the participant\nreceives each problem at most once.\n\nProkhor has prepared thoroughly for the olympiad, and now he can submit any\nproblem. Help him determine the maximum number of points he can achieve.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^5$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq\nn \\leq 4 \\cdot 10^5$) \u2014 the number of problems in the olympiad.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 the scores of the problems.\n\nThe third line of each test case contains $n$ integers $b_1, b_2,\n\\ldots, b_n$ ($1 \\leq b_i \\leq n$) \u2014 the parameters of the problems.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$4 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the maximum number of points\nthat Prokhor can achieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n15 16\n2 1\n5\n10 10 100 100 1000\n3 4 1 1 1\n3\n100 49 50\n3 2 2\n4\n100 200 300 1000\n2 3 4 1\n</pre></td>\n    <td><pre>16\n200\n100\n1000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Prokhor can skip the first problem; then he will\nreceive the problem with index $b_1 = 2$. Prokhor can submit it and\nreceive $a_2 = 16$ points. After that, the competition will end because\nProkhor has already received all problems. Note that if Prokhor submits the\nfirst problem, he will receive $a_1 = 15$ points, but the competition will\nend immediately.\n\nIn the second test case, Prokhor can skip the first problem; then he will\nreceive the problem with index $b_1 = 3$. Prokhor can submit it and\nreceive $a_3 = 100$ points. After that, Prokhor will receive the second\nproblem, which he can skip to receive the problem with index $b_2 = 4$.\nProkhor can submit the fourth problem and receive another $a_4 = 100$\npoints. After that, the competition ends because Prokhor has already received\nall problems with indices not exceeding $4$. Thus, Prokhor will receive a\ntotal of $200$ points.\n\nIn the third test case, Prokhor can submit the first problem and receive\n$100$ points, after which the competition will end immediately."
    },
    {
        "problem_id": "2023C",
        "url": "https://codeforces.com/problemset/problem/2023/C",
        "title": "C+K+S",
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "greedy",
            "hashing",
            "implementation",
            "strings"
        ],
        "div": "Div. 1",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "You are given two strongly connected$^{\\dagger}$ directed graphs, each\nwith exactly $n$ vertices, but possibly different numbers of edges. Upon\ncloser inspection, you noticed an important feature \u2014 the length of any cycle\nin these graphs is divisible by $k$.\n\nEach of the $2n$ vertices belongs to exactly one of two types: incoming or\noutgoing. For each vertex, its type is known to you.\n\nYou need to determine whether it is possible to draw exactly $n$ directed\nedges between the source graphs such that the following four conditions are\nmet:\n\n  * The ends of any added edge lie in different graphs. \n  * From each outgoing vertex, exactly one added edge originates. \n  * Into each incoming vertex, exactly one added edge enters. \n  * In the resulting graph, the length of any cycle is divisible by $k$. \n\n$^{\\dagger}$A strongly connected graph is a graph in which there is a path\nfrom every vertex to every other vertex.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$\n($2 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in each graph\nand the value by which the length of each cycle is divisible.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($a_i \\in \\\\{0, 1\\\\}$). If $a_i = 0$, then vertex\n$i$ of the first graph is incoming. If $a_i = 1$, then vertex $i$\nof the first graph is outgoing.\n\nThe third line of each test case contains a single integer $m_1$ ($1 \\le\nm_1 \\le 5 \\cdot 10^5$) \u2014 the number of edges in the first graph.\n\nThe next $m_1$ lines contain descriptions of the edges of the first graph.\nThe $i$-th of them contains two integers $v_i$ and $u_i$ ($1 \\le\nv_i, u_i \\le n$) \u2014 an edge in the first graph leading from vertex $v_i$\nto vertex $u_i$.\n\nNext, in the same format, follows the description of the second graph.\n\nThe next line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($b_i\n\\in \\\\{0, 1\\\\}$). If $b_i = 0$, then vertex $i$ of the second graph\nis incoming. If $b_i = 1$, then vertex $i$ of the second graph is\noutgoing.\n\nThe next line contains a single integer $m_2$ ($1 \\le m_2 \\le 5 \\cdot\n10^5$) \u2014 the number of edges in the second graph.\n\nThe next $m_2$ lines contain descriptions of the edges of the second\ngraph. The $i$-th of them contains two integers $v_i$ and $u_i$\n($1 \\le v_i, u_i \\le n$) \u2014 an edge in the second graph leading from vertex\n$v_i$ to vertex $u_i$.\n\nIt is guaranteed that both graphs are strongly connected, and the lengths of\nall cycles are divisible by $k$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$. It is guaranteed that the sum of $m_1$ and the sum of\n$m_2$ over all test cases does not exceed $5 \\cdot 10^5$.",
        "output": "For each test case, output \"YES\" (without quotes) if it is possible to draw\n$n$ new edges such that all conditions are met, and \"NO\" (without quotes)\notherwise.\n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4 2\n1 0 0 1\n4\n1 2\n2 3\n3 4\n4 1\n1 0 0 1\n4\n1 3\n3 2\n2 4\n4 1\n3 3\n0 0 0\n3\n1 2\n2 3\n3 1\n1 1 0\n3\n1 2\n2 3\n3 1\n4 2\n1 1 1 1\n4\n1 2\n2 3\n3 4\n4 1\n0 0 0 0\n6\n1 2\n2 1\n1 3\n3 1\n1 4\n4 1\n</pre></td>\n    <td><pre>YES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it is possible to draw edges from the first graph to\nthe second graph as $(1, 3)$ and $(4, 2)$ (the first number in the\npair is the vertex number in the first graph, and the second number in the\npair is the vertex number in the second graph), and from the second graph to\nthe first graph as $(1, 2)$, $(4, 3)$ (the first number in the pair is\nthe vertex number in the second graph, and the second number in the pair is\nthe vertex number in the first graph).\n\nIn the second test case, there are a total of $4$ incoming vertices and\n$2$ outgoing vertices, so it is not possible to draw $3$ edges."
    },
    {
        "problem_id": "2023D",
        "url": "https://codeforces.com/problemset/problem/2023/D",
        "title": "Many Games",
        "rating": 2900,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "math",
            "probabilities"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Recently, you received a rare ticket to the only casino in the world where you\ncan actually earn something, and you want to take full advantage of this\nopportunity.\n\nThe conditions in this casino are as follows:\n\n  * There are a total of $n$ games in the casino. \n  * You can play each game at most once. \n  * Each game is characterized by two parameters: $p_i$ ($1 \\le p_i \\le 100$) and $w_i$ \u2014 the probability of winning the game in percentage and the winnings for a win. \n  * If you lose in any game you decide to play, you will receive nothing at all (even for the games you won). \n\nYou need to choose a set of games in advance that you will play in such a way\nas to maximize the expected value of your winnings.\n\nIn this case, if you choose to play the games with indices $i_1 < i_2 <\n\\ldots < i_k$, you will win in all of them with a probability of\n$\\prod\\limits_{j=1}^k \\frac{p_{i_j}}{100}$, and in that case, your\nwinnings will be equal to $\\sum\\limits_{j=1}^k w_{i_j}$.\n\nThat is, the expected value of your winnings will be\n$\\left(\\prod\\limits_{j=1}^k \\frac{p_{i_j}}{100}\\right) \\cdot\n\\left(\\sum\\limits_{j=1}^k w_{i_j}\\right)$.\n\nTo avoid going bankrupt, the casino owners have limited the expected value of\nwinnings for each individual game. Thus, for all $i$ ($1 \\le i \\le\nn$), it holds that $w_i \\cdot p_i \\le 2 \\cdot 10^5$.\n\nYour task is to find the maximum expected value of winnings that can be\nobtained by choosing some set of games in the casino.",
        "input": "The first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot\n10^5$) \u2014 the number of games offered to play.\n\nThe $i$-th of the following $n$ lines contains two integers $p_i$\nand $w_i$ ($1 \\leq p_i \\leq 100$, $1 \\leq w_i, p_i \\cdot w_i \\leq 2\n\\cdot 10^5$) \u2014 the probability of winning and the size of the winnings in\nthe $i$-th game.",
        "output": "Output a single number \u2014 the maximum expected value of winnings in the casino\nthat can be obtained by choosing some subset of games.\n\nYour answer will be accepted if the relative or absolute error does not exceed\n$10^{-6}$. Formally, if $a$ is your answer and $b$ is the jury's\nanswer, it will be accepted if $\\frac{|a-b|}{\\max(b, 1)} \\le 10^{-6}$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n80 80\n70 100\n50 200\n</pre></td>\n    <td><pre>112.00000000\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n100 1\n100 1\n</pre></td>\n    <td><pre>2.00000000\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 100\n2 1000\n2 100\n3 1\n</pre></td>\n    <td><pre>20.00000000\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n34 804\n78 209\n99 191\n61 439\n90 79\n</pre></td>\n    <td><pre>395.20423800\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, you can choose the first and third games. In this case,\nthe expected value of winnings will be $\\left(\\frac{p_1}{100}\\cdot\n\\frac{p_3}{100}\\right) \\cdot (w_1 + w_3) = \\left(\\frac{80}{100}\\cdot\n\\frac{50}{100}\\right) \\cdot (80 + 200) = 112$.\n\nIn the second example, you can choose the first and second games. In this\ncase, the expected value of winnings will be $\\left(\\frac{p_1}{100}\\cdot\n\\frac{p_2}{100}\\right) \\cdot (w_1 + w_2) = \\left(\\frac{100}{100}\\cdot\n\\frac{100}{100}\\right) \\cdot (1 + 1) = 2$.\n\nIn the third example, you can choose only the second game. In this case, the\nexpected value of winnings will be $\\frac{p_2}{100} \\cdot w_2 =\n\\frac{2}{100} \\cdot 1000 = 20$."
    },
    {
        "problem_id": "2023E",
        "url": "https://codeforces.com/problemset/problem/2023/E",
        "title": "Tree of Life",
        "rating": 3300,
        "tags": [
            "dp",
            "greedy",
            "trees"
        ],
        "div": "Div. 1",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "In the heart of an ancient kingdom grows the legendary Tree of Life \u2014 the only\none of its kind and the source of magical power for the entire world. The tree\nconsists of $n$ nodes. Each node of this tree is a magical source,\nconnected to other such sources through magical channels (edges). In total,\nthere are $n-1$ channels in the tree, with the $i$-th channel\nconnecting nodes $v_i$ and $u_i$. Moreover, there exists a unique\nsimple path through the channels between any two nodes in the tree.\n\nHowever, the magical energy flowing through these channels must be balanced;\notherwise, the power of the Tree of Life may disrupt the natural order and\ncause catastrophic consequences. The sages of the kingdom discovered that when\ntwo magical channels converge at a single node, a dangerous \"magical resonance\nvibration\" occurs between them. To protect the Tree of Life and maintain its\nbalance, it is necessary to select several paths and perform special rituals\nalong them. A path is a sequence of distinct nodes $v_1, v_2, \\ldots,\nv_k$, where each pair of adjacent nodes $v_i$ and $v_{i+1}$ is\nconnected by a channel. When the sages perform a ritual along such a path, the\nresonance vibration between the channels $(v_i, v_{i+1})$ and $(v_{i+1},\nv_{i+2})$ is blocked for each $1 \\leq i \\leq k - 2$.\n\nThe sages' task is to select the minimum number of paths and perform rituals\nalong them to block all resonance vibrations. This means that for every pair\nof channels emanating from a single node, there must exist at least one\nselected path that contains both of these channels.\n\nHelp the sages find the minimum number of such paths so that the magical\nbalance of the Tree of Life is preserved, and its power continues to nourish\nthe entire world!",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 4 \\cdot 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq\nn \\leq 5 \\cdot 10^5$) \u2014 the number of nodes in the Tree of Life.\n\nThe $i$-th of the following $n - 1$ lines of each test case contains\ntwo integers $v_i$ and $u_i$ ($1 \\leq v_i < u_i \\leq n$) \u2014 the\nchannel connecting nodes $v_i$ and $u_i$.\n\nIt is guaranteed that there exists a unique simple path through the channels\nbetween any two nodes.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of paths that\nthe sages need to select to prevent a catastrophe.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n4\n1 2\n2 3\n3 4\n2\n1 2\n4\n1 2\n1 3\n1 4\n8\n3 7\n2 4\n1 2\n2 5\n3 6\n1 3\n3 8\n6\n2 3\n1 2\n3 6\n1 5\n1 4\n</pre></td>\n    <td><pre>1\n0\n3\n7\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are two pairs of channels emanating from a\nsingle node: $(1, 2)$ and $(2, 3)$, $(2, 3)$ and $(3, 4)$. It\nis sufficient to perform the ritual along the path $1-2-3-4$. Thus, the\nanswer is $1$.\n\nIn the second test case, there are no pairs of channels emanating from a\nsingle node, so the answer is $0$.\n\nIn the third test case, rituals can be performed along the paths $2-1-3$,\n$2-1-4$, and $3-1-4$."
    },
    {
        "problem_id": "2023F",
        "url": "https://codeforces.com/problemset/problem/2023/F",
        "title": "Hills and Pits",
        "rating": 3500,
        "tags": [
            "data structures",
            "greedy",
            "math",
            "matrices"
        ],
        "div": "Div. 1",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "In a desert city with a hilly landscape, the city hall decided to level the\nroad surface by purchasing a dump truck. The road is divided into $n$\nsections, numbered from $1$ to $n$ from left to right. The height of\nthe surface in the $i$-th section is equal to $a_i$. If the height of\nthe $i$-th section is greater than $0$, then the dump truck must take\nsand from the $i$-th section of the road, and if the height of the\n$i$-th section is less than $0$, the dump truck must fill the pit in\nthe $i$-th section of the road with sand. It is guaranteed that the\ninitial heights are not equal to $0$.\n\nWhen the dump truck is in the $i$-th section of the road, it can either\ntake away $x$ units of sand, in which case the height of the surface in\nthe $i$-th section will decrease by $x$, or it can fill in $x$\nunits of sand (provided that it currently has at least $x$ units of sand\nin its bed), in which case the height of the surface in the $i$-th section\nof the road will increase by $x$.\n\nThe dump truck can start its journey from any section of the road. Moving to\nan adjacent section on the left or right takes $1$ minute, and the time\nfor loading and unloading sand can be neglected. The dump truck has an\ninfinite capacity and is initially empty.\n\nYou need to find the minimum time required for the dump truck to level the\nsand so that the height in each section becomes equal to $0$. Note that\nafter all movements, the dump truck may still have sand left in its bed. You\nneed to solve this problem independently for the segments numbered from\n$l_i$ to $r_i$. Sand outside the segment cannot be used.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$\n($1 \\le n, q \\le 3 \\cdot 10^5$) \u2014 the number of sections and the number of\nqueries.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($-10^9 \\le a_i \\le 10^9$, $a_i \\neq 0$) \u2014 the initial\nheight in each section.\n\nThe $i$-th of the following $q$ lines contains two integers $l_i$\nand $r_i$ ($1 \\le l_i \\le r_i \\le n$) \u2014 the boundaries of the segment\nof sections for which the minimum time needs to be determined.\n\nIt is guaranteed that the sum of $n$ over all test cases and the sum of\n$q$ over all test cases do not exceed $3 \\cdot 10^5$.",
        "output": "For each query, output the minimum time required to level the sand in the\nsegment $[l_i, r_i]$, or $-1$ if it is impossible.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1 1\n-179\n1 1\n5 3\n-2 2 -1 3 -1\n2 4\n1 5\n1 3\n7 1\n1 1 1 -4 1 1 1\n1 7\n7 2\n2 -2 2 -2 1 2 -1\n1 7\n2 7\n4 4\n1000000000 1000000000 999999999 -1000000000\n2 4\n3 4\n2 3\n1 3\n</pre></td>\n    <td><pre>-1\n2\n5\n-1\n8\n6\n6\n2\n-1\n1\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $179$ units of sand need to be added to the only\nsection. However, there is nowhere to take it from, so this is impossible.\n\nIn the second test case:\n\n  * In the first query, the dump truck can start its journey at the second section. It can take $2$ units of sand, after which the height in the second section will become $0$. Then the dump truck can move to the third section. It can pour $1$ unit of sand there, after which the height in the third section will become $0$. Then the dump truck can move to the fourth section. There it can take $3$ units of sand, after which the height in the fourth section will become $0$. In total, the dump truck will spend $2$ minutes on movements.\n  * In the second query, the dump truck can start its journey at the fourth section. It can take $3$ units of sand, after which the height in the fourth section will become $0$. Then the dump truck can move to the fifth section. It can pour $1$ unit of sand there, after which the height in the fifth section will become $0$. Then the dump truck can move back to the fourth section and then to the third. It can pour $1$ unit of sand there, after which the height in the third section will become $0$. Then the dump truck can move to the second section. It can take $2$ units of sand. Then it can move to the first section. It can pour $2$ units of sand there, after which the height in the first section will become $0$. In total, the dump truck will spend $5$ minutes on movements.\n  * In the third query, the dump truck will not be able to make the height in each section equal to $0$."
    },
    {
        "problem_id": "2024A",
        "url": "https://codeforces.com/problemset/problem/2024/A",
        "title": "Profitable Interest Rate",
        "rating": 800,
        "tags": [
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice has $a$ coins. She can open a bank deposit called \"Profitable\", but\nthe minimum amount required to open this deposit is $b$ coins.\n\nThere is also a deposit called \"Unprofitable\", which can be opened with any\namount of coins. Alice noticed that if she opens the \"Unprofitable\" deposit\nwith $x$ coins, the minimum amount required to open the \"Profitable\"\ndeposit decreases by $2x$ coins. However, these coins cannot later be\ndeposited into the \"Profitable\" deposit.\n\nHelp Alice determine the maximum number of coins she can deposit into the\n\"Profitable\" deposit if she first deposits some amount of coins (possibly\n$0$) into the \"Unprofitable\" deposit. If Alice can never open the\n\"Profitable\" deposit, output $0$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nA single line of each test case contains two integers $a$ and $b$\n($1 \\le a, b \\le 10^9$) \u2014 the number of coins Alice has and the initial\nminimum amount required to open the \"Profitable\" deposit.",
        "output": "For each test case, output a single integer \u2014 the maximum number of coins that\nAlice can deposit into the \"Profitable\" deposit. If Alice can never open the\n\"Profitable\" deposit, output $0$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n10 5\n7 9\n5 100\n1 1\n1 2\n</pre></td>\n    <td><pre>10\n5\n0\n1\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $a \\ge b$, so Alice can immediately open the\n\"Profitable\" deposit with all $10$ coins.\n\nIn the second test case, Alice can open the \"Unprofitable\" deposit with\n$2$ coins. Then she will have $5$ coins left, but the minimum amount\nrequired to open the \"Profitable\" deposit will decrease by $4$ coins,\nmaking it equal to $5$ coins. Thus, Alice will be able to open the\n\"Profitable\" deposit with $5$ coins.\n\nIn the third test case, Alice will not be able to open the \"Profitable\"\ndeposit."
    },
    {
        "problem_id": "2024B",
        "url": "https://codeforces.com/problemset/problem/2024/B",
        "title": "Buying Lemonade",
        "rating": 1100,
        "tags": [
            "binary search",
            "constructive algorithms",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "There is a vending machine that sells lemonade. The machine has a total of\n$n$ slots. You know that initially, the $i$-th slot contains $a_i$\ncans of lemonade. There are also $n$ buttons on the machine, each button\ncorresponds to a slot, with exactly one button corresponding to each slot.\nUnfortunately, the labels on the buttons have worn off, so you do not know\nwhich button corresponds to which slot.\n\nWhen you press the button corresponding to the $i$-th slot, one of two\nevents occurs:\n\n  * If there is a can of lemonade in the $i$-th slot, it will drop out and you will take it. At this point, the number of cans in the $i$-th slot decreases by $1$.\n  * If there are no cans of lemonade left in the $i$-th slot, nothing will drop out. \n\nAfter pressing, the can drops out so quickly that it is impossible to track\nfrom which slot it fell. The contents of the slots are hidden from your view,\nso you cannot see how many cans are left in each slot. The only thing you know\nis the initial number of cans in the slots: $a_1, a_2, \\ldots, a_n$.\n\nDetermine the minimum number of button presses needed to guarantee that you\nreceive at least $k$ cans of lemonade.\n\nNote that you can adapt your strategy during the button presses based on\nwhether you received a can or not. It is guaranteed that there are at least\n$k$ cans of lemonade in total in the machine. In other words, $k \\leq\na_1 + a_2 + \\ldots + a_n$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\le n \\le 2 \\cdot 10^5$, $1 \\leq k \\leq 10^9$) \u2014 the number of\nslots in the machine and the required number of cans of lemonade.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the number of cans in the slots.\n\nIt is guaranteed that $k \\leq a_1 + a_2 + \\ldots + a_n$, meaning there are\nat least $k$ cans of lemonade in the machine.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of button\npresses needed to guarantee that you receive at least $k$ cans of\nlemonade.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2 1\n1 1\n2 2\n1 2\n3 4\n2 1 3\n10 50\n1 1 3 8 8 9 12 13 27 27\n2 1000000000\n1000000000 500000000\n</pre></td>\n    <td><pre>1\n2\n5\n53\n1000000000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we can simply press the first button and receive one\ncan of lemonade.\n\nIn the second test case, we can press each button once and guarantee that we\nreceive $2$ cans of lemonade. Note that if we simply press one button\ntwice, we might not be lucky, and that button could correspond to the first\nslot, in which case we would only receive $1$ can of lemonade for two\npresses.\n\nIn the third test case, one of the optimal strategies is as follows:\n\nPress the first button twice. After the first press, a can of lemonade will\ndefinitely drop out. Then there are two options:\n\n  * If no can of lemonade drops after the second press, we know that this button must correspond to the second slot, since $a_2 = 1$ and $a_1, a_3 > 1$. Then we can press the second button twice and the third button once. Since $a_1, a_3 \\geq 2$, we will definitely receive three cans of lemonade for these three presses. Thus, after $5$ presses, we will have $4$ cans of lemonade.\n  * If a can of lemonade drops after the second press, we can make one press on the second button and one press on the third button. After each of these presses, we will definitely receive a can of lemonade. Thus, after $4$ presses, we will have $4$ cans of lemonade.\n\nIt can be shown that it is impossible to guarantee receiving $4$ cans of\nlemonade with only $4$ presses, so the answer is $5$."
    },
    {
        "problem_id": "2024C",
        "url": "https://codeforces.com/problemset/problem/2024/C",
        "title": "Concatenation of Arrays",
        "rating": 1300,
        "tags": [
            "constructive algorithms",
            "greedy",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given $n$ arrays $a_1$, $\\ldots$, $a_n$. The length of\neach array is two. Thus, $a_i = [a_{i, 1}, a_{i, 2}]$. You need to\nconcatenate the arrays into a single array of length $2n$ such that the\nnumber of inversions$^{\\dagger}$ in the resulting array is minimized. Note\nthat you do not need to count the actual number of inversions.\n\nMore formally, you need to choose a permutation$^{\\ddagger}$ $p$ of\nlength $n$, so that the array $b = [a_{p_1,1}, a_{p_1,2}, a_{p_2, 1},\na_{p_2, 2}, \\ldots, a_{p_n,1}, a_{p_n,2}]$ contains as few inversions as\npossible.\n\n$^{\\dagger}$The number of inversions in an array $c$ is the number of\npairs of indices $i$ and $j$ such that $i < j$ and $c_i >\nc_j$.\n\n$^{\\ddagger}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 10^5$) \u2014 the number of arrays.\n\nEach of the following $n$ lines contains two integers $a_{i,1}$ and\n$a_{i,2}$ ($1 \\le a_{i,j} \\le 10^9$) \u2014 the elements of the $i$-th\narray.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output $2n$ integers \u2014 the elements of the array you\nobtained. If there are multiple solutions, output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n1 4\n2 3\n3\n3 2\n4 3\n2 1\n5\n5 10\n2 3\n9 6\n4 1\n8 7\n1\n10 20\n</pre></td>\n    <td><pre>2 3 1 4\n2 1 3 2 4 3\n4 1 2 3 5 10 8 7 9 6\n10 20\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we concatenated the arrays in the order $2, 1$.\nLet's consider the inversions in the resulting array $b = [2, 3, 1, 4]$:\n\n  * $i = 1$, $j = 3$, since $b_1 = 2 > 1 = b_3$;\n  * $i = 2$, $j = 3$, since $b_2 = 3 > 1 = b_3$. \n\nThus, the number of inversions is $2$. It can be proven that this is the\nminimum possible number of inversions.\n\nIn the second test case, we concatenated the arrays in the order $3, 1,\n2$. Let's consider the inversions in the resulting array $b = [2, 1, 3, 2,\n4, 3]$:\n\n  * $i = 1$, $j = 2$, since $b_1 = 2 > 1 = b_2$;\n  * $i = 3$, $j = 4$, since $b_3 = 3 > 2 = b_4$;\n  * $i = 5$, $j = 6$, since $b_5 = 4 > 3 = b_6$. \n\nThus, the number of inversions is $3$. It can be proven that this is the\nminimum possible number of inversions.\n\nIn the third test case, we concatenated the arrays in the order $4, 2, 1, 5,\n3$."
    },
    {
        "problem_id": "2024D",
        "url": "https://codeforces.com/problemset/problem/2024/D",
        "title": "Skipping",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "data structures",
            "divide and conquer",
            "dp",
            "flows",
            "graphs",
            "greedy",
            "implementation",
            "shortest paths"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "It is already the year $3024$, ideas for problems have long run out, and\nthe olympiad now takes place in a modified individual format. The olympiad\nconsists of $n$ problems, numbered from $1$ to $n$. The $i$-th\nproblem has its own score $a_i$ and a certain parameter $b_i$ ($1\n\\le b_i \\le n$).\n\nInitially, the testing system gives the participant the first problem. When\nthe participant is given the $i$-th problem, they have two options:\n\n  * They can submit the problem and receive $a_i$ points; \n  * They can skip the problem, in which case they will never be able to submit it. \n\nThen, the testing system selects the next problem for the participant from\nproblems with indices $j$, such that:\n\n  * If he submitted the $i$-th problem, it looks at problems with indices $j < i$; \n  * If he skipped the $i$-th problem, it looks at problems with indices $j \\leq b_i$. \n\nAmong these problems, it selects the problem with the maximum index that it\nhas not previously given to the participant (he has neither submitted nor\nskipped it before). If there is no such problem, then the competition for the\nparticipant ends, and their result is equal to the sum of points for all\nsubmitted problems. In particular, if the participant submits the first\nproblem, then the competition for them ends. Note that the participant\nreceives each problem at most once.\n\nProkhor has prepared thoroughly for the olympiad, and now he can submit any\nproblem. Help him determine the maximum number of points he can achieve.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\leq t \\leq 10^5$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq\nn \\leq 4 \\cdot 10^5$) \u2014 the number of problems in the olympiad.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 the scores of the problems.\n\nThe third line of each test case contains $n$ integers $b_1, b_2,\n\\ldots, b_n$ ($1 \\leq b_i \\leq n$) \u2014 the parameters of the problems.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$4 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the maximum number of points\nthat Prokhor can achieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n15 16\n2 1\n5\n10 10 100 100 1000\n3 4 1 1 1\n3\n100 49 50\n3 2 2\n4\n100 200 300 1000\n2 3 4 1\n</pre></td>\n    <td><pre>16\n200\n100\n1000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Prokhor can skip the first problem; then he will\nreceive the problem with index $b_1 = 2$. Prokhor can submit it and\nreceive $a_2 = 16$ points. After that, the competition will end because\nProkhor has already received all problems. Note that if Prokhor submits the\nfirst problem, he will receive $a_1 = 15$ points, but the competition will\nend immediately.\n\nIn the second test case, Prokhor can skip the first problem; then he will\nreceive the problem with index $b_1 = 3$. Prokhor can submit it and\nreceive $a_3 = 100$ points. After that, Prokhor will receive the second\nproblem, which he can skip to receive the problem with index $b_2 = 4$.\nProkhor can submit the fourth problem and receive another $a_4 = 100$\npoints. After that, the competition ends because Prokhor has already received\nall problems with indices not exceeding $4$. Thus, Prokhor will receive a\ntotal of $200$ points.\n\nIn the third test case, Prokhor can submit the first problem and receive\n$100$ points, after which the competition will end immediately."
    },
    {
        "problem_id": "2024E",
        "url": "https://codeforces.com/problemset/problem/2024/E",
        "title": "C+K+S",
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "graphs",
            "hashing",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "You are given two strongly connected$^{\\dagger}$ directed graphs, each\nwith exactly $n$ vertices, but possibly different numbers of edges. Upon\ncloser inspection, you noticed an important feature \u2014 the length of any cycle\nin these graphs is divisible by $k$.\n\nEach of the $2n$ vertices belongs to exactly one of two types: incoming or\noutgoing. For each vertex, its type is known to you.\n\nYou need to determine whether it is possible to draw exactly $n$ directed\nedges between the source graphs such that the following four conditions are\nmet:\n\n  * The ends of any added edge lie in different graphs. \n  * From each outgoing vertex, exactly one added edge originates. \n  * Into each incoming vertex, exactly one added edge enters. \n  * In the resulting graph, the length of any cycle is divisible by $k$. \n\n$^{\\dagger}$A strongly connected graph is a graph in which there is a path\nfrom every vertex to every other vertex.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$\n($2 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in each graph\nand the value by which the length of each cycle is divisible.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($a_i \\in \\\\{0, 1\\\\}$). If $a_i = 0$, then vertex\n$i$ of the first graph is incoming. If $a_i = 1$, then vertex $i$\nof the first graph is outgoing.\n\nThe third line of each test case contains a single integer $m_1$ ($1 \\le\nm_1 \\le 5 \\cdot 10^5$) \u2014 the number of edges in the first graph.\n\nThe next $m_1$ lines contain descriptions of the edges of the first graph.\nThe $i$-th of them contains two integers $v_i$ and $u_i$ ($1 \\le\nv_i, u_i \\le n$) \u2014 an edge in the first graph leading from vertex $v_i$\nto vertex $u_i$.\n\nNext, in the same format, follows the description of the second graph.\n\nThe next line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($b_i\n\\in \\\\{0, 1\\\\}$). If $b_i = 0$, then vertex $i$ of the second graph\nis incoming. If $b_i = 1$, then vertex $i$ of the second graph is\noutgoing.\n\nThe next line contains a single integer $m_2$ ($1 \\le m_2 \\le 5 \\cdot\n10^5$) \u2014 the number of edges in the second graph.\n\nThe next $m_2$ lines contain descriptions of the edges of the second\ngraph. The $i$-th of them contains two integers $v_i$ and $u_i$\n($1 \\le v_i, u_i \\le n$) \u2014 an edge in the second graph leading from vertex\n$v_i$ to vertex $u_i$.\n\nIt is guaranteed that both graphs are strongly connected, and the lengths of\nall cycles are divisible by $k$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$. It is guaranteed that the sum of $m_1$ and the sum of\n$m_2$ over all test cases does not exceed $5 \\cdot 10^5$.",
        "output": "For each test case, output \"YES\" (without quotes) if it is possible to draw\n$n$ new edges such that all conditions are met, and \"NO\" (without quotes)\notherwise.\n\nYou may output the answer in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4 2\n1 0 0 1\n4\n1 2\n2 3\n3 4\n4 1\n1 0 0 1\n4\n1 3\n3 2\n2 4\n4 1\n3 3\n0 0 0\n3\n1 2\n2 3\n3 1\n1 1 0\n3\n1 2\n2 3\n3 1\n4 2\n1 1 1 1\n4\n1 2\n2 3\n3 4\n4 1\n0 0 0 0\n6\n1 2\n2 1\n1 3\n3 1\n1 4\n4 1\n</pre></td>\n    <td><pre>YES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it is possible to draw edges from the first graph to\nthe second graph as $(1, 3)$ and $(4, 2)$ (the first number in the\npair is the vertex number in the first graph, and the second number in the\npair is the vertex number in the second graph), and from the second graph to\nthe first graph as $(1, 2)$, $(4, 3)$ (the first number in the pair is\nthe vertex number in the second graph, and the second number in the pair is\nthe vertex number in the first graph).\n\nIn the second test case, there are a total of $4$ incoming vertices and\n$2$ outgoing vertices, so it is not possible to draw $3$ edges."
    },
    {
        "problem_id": "2024F",
        "url": "https://codeforces.com/problemset/problem/2024/F",
        "title": "Many Games",
        "rating": 2900,
        "tags": [
            "dp",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Recently, you received a rare ticket to the only casino in the world where you\ncan actually earn something, and you want to take full advantage of this\nopportunity.\n\nThe conditions in this casino are as follows:\n\n  * There are a total of $n$ games in the casino. \n  * You can play each game at most once. \n  * Each game is characterized by two parameters: $p_i$ ($1 \\le p_i \\le 100$) and $w_i$ \u2014 the probability of winning the game in percentage and the winnings for a win. \n  * If you lose in any game you decide to play, you will receive nothing at all (even for the games you won). \n\nYou need to choose a set of games in advance that you will play in such a way\nas to maximize the expected value of your winnings.\n\nIn this case, if you choose to play the games with indices $i_1 < i_2 <\n\\ldots < i_k$, you will win in all of them with a probability of\n$\\prod\\limits_{j=1}^k \\frac{p_{i_j}}{100}$, and in that case, your\nwinnings will be equal to $\\sum\\limits_{j=1}^k w_{i_j}$.\n\nThat is, the expected value of your winnings will be\n$\\left(\\prod\\limits_{j=1}^k \\frac{p_{i_j}}{100}\\right) \\cdot\n\\left(\\sum\\limits_{j=1}^k w_{i_j}\\right)$.\n\nTo avoid going bankrupt, the casino owners have limited the expected value of\nwinnings for each individual game. Thus, for all $i$ ($1 \\le i \\le\nn$), it holds that $w_i \\cdot p_i \\le 2 \\cdot 10^5$.\n\nYour task is to find the maximum expected value of winnings that can be\nobtained by choosing some set of games in the casino.",
        "input": "The first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot\n10^5$) \u2014 the number of games offered to play.\n\nThe $i$-th of the following $n$ lines contains two integers $p_i$\nand $w_i$ ($1 \\leq p_i \\leq 100$, $1 \\leq w_i, p_i \\cdot w_i \\leq 2\n\\cdot 10^5$) \u2014 the probability of winning and the size of the winnings in\nthe $i$-th game.",
        "output": "Output a single number \u2014 the maximum expected value of winnings in the casino\nthat can be obtained by choosing some subset of games.\n\nYour answer will be accepted if the relative or absolute error does not exceed\n$10^{-6}$. Formally, if $a$ is your answer and $b$ is the jury's\nanswer, it will be accepted if $\\frac{|a-b|}{\\max(b, 1)} \\le 10^{-6}$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n80 80\n70 100\n50 200\n</pre></td>\n    <td><pre>112.00000000\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n100 1\n100 1\n</pre></td>\n    <td><pre>2.00000000\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 100\n2 1000\n2 100\n3 1\n</pre></td>\n    <td><pre>20.00000000\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n34 804\n78 209\n99 191\n61 439\n90 79\n</pre></td>\n    <td><pre>395.20423800\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, you can choose the first and third games. In this case,\nthe expected value of winnings will be $\\left(\\frac{p_1}{100}\\cdot\n\\frac{p_3}{100}\\right) \\cdot (w_1 + w_3) = \\left(\\frac{80}{100}\\cdot\n\\frac{50}{100}\\right) \\cdot (80 + 200) = 112$.\n\nIn the second example, you can choose the first and second games. In this\ncase, the expected value of winnings will be $\\left(\\frac{p_1}{100}\\cdot\n\\frac{p_2}{100}\\right) \\cdot (w_1 + w_2) = \\left(\\frac{100}{100}\\cdot\n\\frac{100}{100}\\right) \\cdot (1 + 1) = 2$.\n\nIn the third example, you can choose only the second game. In this case, the\nexpected value of winnings will be $\\frac{p_2}{100} \\cdot w_2 =\n\\frac{2}{100} \\cdot 1000 = 20$."
    },
    {
        "problem_id": "2025A",
        "url": "https://codeforces.com/problemset/problem/2025/A",
        "title": "Two Screens",
        "rating": 800,
        "tags": [
            "binary search",
            "greedy",
            "strings",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "There are two screens which can display sequences of uppercase Latin letters.\nInitially, both screens display nothing.\n\nIn one second, you can do one of the following two actions:\n\n  * choose a screen and an uppercase Latin letter, and append that letter to the end of the sequence displayed on that screen; \n  * choose a screen and copy the sequence from it to the other screen, overwriting the sequence that was displayed on the other screen. \n\nYou have to calculate the minimum number of seconds you have to spend so that\nthe first screen displays the sequence $s$, and the second screen displays\nthe sequence $t$.",
        "input": "The first line contains one integer $q$ ($1 \\le q \\le 500$) \u2014 the\nnumber of test cases.\n\nEach test case consists of two lines. The first line contains the string\n$s$, and the second line contains the string $t$ ($1 \\le |s|, |t|\n\\le 100$). Both strings consist of uppercase Latin letters.",
        "output": "For each test case, print one integer \u2014 the minimum possible number of seconds\nyou have to spend so that the first screen displays the sequence $s$, and\nthe second screen displays the sequence $t$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\nGARAGE\nGARAGEFORSALE\nABCDE\nAABCD\nTRAINING\nDRAINING\n</pre></td>\n    <td><pre>14\n10\n16\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the following sequence of actions is possible:\n\n  * spend $6$ seconds to write the sequence GARAGE on the first screen; \n  * copy the sequence from the first screen to the second screen; \n  * spend $7$ seconds to complete the sequence on the second screen by writing FORSALE. \n\nIn the second test case, the following sequence of actions is possible:\n\n  * spend $1$ second to write the sequence A on the second screen; \n  * copy the sequence from the second screen to the first screen; \n  * spend $4$ seconds to complete the sequence on the first screen by writing BCDE; \n  * spend $4$ seconds to complete the sequence on the second screen by writing ABCD. \n\nIn the third test case, the fastest way to display the sequences is to type\nboth of them character by character without copying, and this requires\n$16$ seconds."
    },
    {
        "problem_id": "2025B",
        "url": "https://codeforces.com/problemset/problem/2025/B",
        "title": "Binomial Coefficients, Kind Of",
        "rating": 1100,
        "tags": [
            "combinatorics",
            "dp",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Recently, akshiM met a task that needed binomial coefficients to solve. He\nwrote a code he usually does that looked like this:\n\n    \n    \n        for (int n = 0; n < N; n++) { // loop over n from 0 to N-1 (inclusive)  \n            C[n][0] = 1;  \n            C[n][n] = 1;  \n            for (int k = 1; k < n; k++) // loop over k from 1 to n-1 (inclusive)  \n                C[n][k] = C[n][k - 1] + C[n - 1][k - 1];  \n        }  \n    \n\nUnfortunately, he made an error, since the right formula is the following:\n\n    \n    \n                C[n][k] = C[n - 1][k] + C[n - 1][k - 1]  \n    \n\nBut his team member keblidA is interested in values that were produced using\nthe wrong formula. Please help him to calculate these coefficients for $t$\nvarious pairs $(n_i, k_i)$. Note that they should be calculated according\nto the first (wrong) formula.\n\nSince values $C[n_i][k_i]$ may be too large, print them modulo $10^9 +\n7$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^5$) \u2014\nthe number of pairs. Next, $t$ pairs are written in two lines.\n\nThe second line contains $t$ integers $n_1, n_2, \\dots, n_t$ ($2 \\le\nn_i \\le 10^5$).\n\nThe third line contains $t$ integers $k_1, k_2, \\dots, k_t$ ($1 \\le\nk_i < n_i$).",
        "output": "Print $t$ integers $C[n_i][k_i]$ modulo $10^9 + 7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n2 5 5 100000 100000 100000 100000\n1 2 3 1 33333 66666 99999\n</pre></td>\n    <td><pre>2\n4\n8\n2\n326186014\n984426998\n303861760\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2025C",
        "url": "https://codeforces.com/problemset/problem/2025/C",
        "title": "New Game",
        "rating": 1300,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "There's a new game Monocarp wants to play. The game uses a deck of $n$\ncards, where the $i$-th card has exactly one integer $a_i$ written on\nit.\n\nAt the beginning of the game, on the first turn, Monocarp can take any card\nfrom the deck. During each subsequent turn, Monocarp can take exactly one card\nthat has either the same number as on the card taken on the previous turn or a\nnumber that is one greater than the number on the card taken on the previous\nturn.\n\nIn other words, if on the previous turn Monocarp took a card with the number\n$x$, then on the current turn he can take either a card with the number\n$x$ or a card with the number $x + 1$. Monocarp can take any card\nwhich meets that condition, regardless of its position in the deck.\n\nAfter Monocarp takes a card on the current turn, it is removed from the deck.\n\nAccording to the rules of the game, the number of distinct numbers written on\nthe cards that Monocarp has taken must not exceed $k$.\n\nIf, after a turn, Monocarp cannot take a card without violating the described\nrules, the game ends.\n\nYour task is to determine the maximum number of cards that Monocarp can take\nfrom the deck during the game, given that on the first turn he can take any\ncard from the deck.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\le k \\le n \\le 200\\,000$) \u2014 the number of cards in the deck and the\nmaximum number of distinct numbers that can be written on the cards that\nMonocarp takes.\n\nThe second line contains a sequence of integers $a_1, a_2, \\dots, a_n$\n($1 \\le a_i \\le 10^{9}$), where $a_i$ is the number written on the\n$i$-th card.\n\nAdditional constraint of the input: the sum of $n$ over all test cases\ndoesn't exceed $200\\,000$.",
        "output": "For each test case, print the maximum number of cards that Monocarp can take\nfrom the deck during the game, given that on the first turn he can take any\ncard from the deck.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n10 2\n5 2 4 3 4 3 4 5 3 2\n5 1\n10 11 10 11 10\n9 3\n4 5 4 4 6 5 4 4 6\n3 2\n1 3 1\n</pre></td>\n    <td><pre>6\n3\n9\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, Monocarp needs to take any of the cards with the number\n$3$. On the next two turns, he needs to take the two remaining cards with\nthe number $3$. On the next three turns, he needs to take three cards with\nthe number $4$. After that, Monocarp will not be able to take any more\ncards from the deck, and he will have $6$ cards."
    },
    {
        "problem_id": "2025D",
        "url": "https://codeforces.com/problemset/problem/2025/D",
        "title": "Attribute Checks",
        "rating": 1800,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2500,
        "memory_limit_mb": 512,
        "description": "Imagine a game where you play as a character that has two attributes:\n\"Strength\" and \"Intelligence\", that are at zero level initially.\n\nDuring the game, you'll acquire $m$ attribute points that allow you to\nincrease your attribute levels \u2014 one point will increase one of the attributes\nby one level. But sometimes, you'll encounter a so-called \"Attribute Checks\":\nif your corresponding attribute is high enough, you'll pass it; otherwise,\nyou'll fail it.\n\nSpending some time, you finally prepared a list which contains records of all\npoints you got and all checks you've met. And now you're wondering: what is\nthe maximum number of attribute checks you can pass in a single run if you'd\nspend points wisely?\n\nNote that you can't change the order of records.",
        "input": "The first line contains two integers $n$ and $m$ ($1 \\le m \\le\n5000$; $m < n \\le 2 \\cdot 10^6$) \u2014 the number of records in the list and\nthe total number of points you'll get during the game.\n\nThe second line contains $n$ integers $r_1, r_2, \\dots, r_n$ ($-m\n\\le r_i \\le m$), where $r_i$ encodes the $i$-th record:\n\n  * If $r_i = 0$, then the $i$-th record is an acquiring one attribute point. You can spend to level up either Strength or Intelligence; \n  * If $r_i > 0$, then it's an Intelligence check: if your Intelligence level is greater than or equal to $|r_i|$, you pass. \n  * If $r_i < 0$, then it's a Strength check: if your Strength level is greater than or equal to $|r_i|$, you pass. \n\nAdditional constraint on the input: the sequence $r_1, r_2, \\dots, r_n$\ncontains exactly $m$ elements equal to $0$.",
        "output": "Print one integer \u2014 the maximum number of checks you can pass.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10 5\n0 1 0 2 0 -3 0 -4 0 -5\n</pre></td>\n    <td><pre>3\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3 1\n1 -1 0\n</pre></td>\n    <td><pre>0\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9 3\n0 0 1 0 2 -3 -2 -2 1\n</pre></td>\n    <td><pre>4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test, it's optimal to spend each point in Strength, so you'll\nfail $2$ Intelligence checks but pass $3$ Strength checks.\n\nIn the second test, you'll fail both checks, since the first point you get\ncomes after the checks.\n\nIn the third test, one of the optimal strategies is:\n\n  1. spend the first point on Intelligence; \n  2. spend the second point on Strength; \n  3. spend the third point on Strength; \n\nAs a result, you'll pass $2$ Intelligence checks $r_3$ and $r_9$\nand $2$ Strength checks $r_7$ and $r_8$."
    },
    {
        "problem_id": "2025E",
        "url": "https://codeforces.com/problemset/problem/2025/E",
        "title": "Card Game",
        "rating": 2200,
        "tags": [
            "combinatorics",
            "dp",
            "fft",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "In the most popular card game in Berland, a deck of $n \\times m$ cards is\nused. Each card has two parameters: suit and rank. Suits in the game are\nnumbered from $1$ to $n$, and ranks are numbered from $1$ to\n$m$. There is exactly one card in the deck for each combination of suit\nand rank.\n\nA card with suit $a$ and rank $b$ can beat a card with suit $c$\nand rank $d$ in one of two cases:\n\n  * $a = 1$, $c \\ne 1$ (a card of suit $1$ can beat a card of any other suit); \n  * $a = c$, $b > d$ (a card can beat any other card of the same suit but of a lower rank). \n\nTwo players play the game. Before the game starts, they receive exactly half\nof the deck each. The first player wins if for every card of the second\nplayer, he can choose his card that can beat it, and there is no card that is\nchosen twice (i. e. there exists a matching of the first player's cards with\nthe second player's cards such that in each pair the first player's card beats\nthe second player's card). Otherwise, the second player wins.\n\nYour task is to calculate the number of ways to distribute the cards so that\nthe first player wins. Two ways are considered different if there exists a\ncard such that in one way it belongs to the first player and in the other way\nit belongs to the second player. The number of ways can be very large, so\nprint it modulo $998244353$.",
        "input": "The only line contains two integers $n$ and $m$ ($1 \\le n, m \\le\n500$).\n\nAdditional constraint on the input: $m$ is even.",
        "output": "Print a single integer \u2014 the number of ways to distribute the cards so that\nthe first player wins, taken modulo $998244353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1 4\n</pre></td>\n    <td><pre>2\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2 2\n</pre></td>\n    <td><pre>2\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3 6\n</pre></td>\n    <td><pre>1690\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5 4\n</pre></td>\n    <td><pre>568\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>500 500\n</pre></td>\n    <td><pre>84693741\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2025F",
        "url": "https://codeforces.com/problemset/problem/2025/F",
        "title": "Choose Your Queries",
        "rating": 2700,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "You are given an array $a$, consisting of $n$ integers (numbered from\n$1$ to $n$). Initially, they are all zeroes.\n\nYou have to process $q$ queries. The $i$-th query consists of two\ndifferent integers $x_i$ and $y_i$. During the $i$-th query, you\nhave to choose an integer $p$ (which is either $x_i$ or $y_i$) and\nan integer $d$ (which is either $1$ or $-1$), and assign $a_p =\na_p + d$.\n\nAfter each query, every element of $a$ should be a non-negative integer.\n\nProcess all queries in such a way that the sum of all elements of $a$\nafter the last query is the minimum possible.",
        "input": "The first line contains two integers $n$ and $q$ ($2 \\le n \\le 3\n\\cdot 10^5$; $1 \\le q \\le 3 \\cdot 10^5$) \u2014 the number of elements in\n$a$ and the number of queries, respectively.\n\nThen $q$ lines follow. The $i$-th of these lines contains two integers\n$x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$) \u2014 the\ndescription of the $i$-th query.",
        "output": "For each query, print a line containing two characters:\n\n  * the first character should be x if you choose $p=x_i$, or y if you choose $p=y_i$; \n  * the second character should be + if you choose $d=1$, or - if you choose $d=-1$. \n\nIf there are multiple answers, print any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3 4\n1 2\n3 2\n3 1\n1 2\n</pre></td>\n    <td><pre>y+\nx+\nx-\ny-\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4 4\n1 2\n2 3\n3 4\n3 2\n</pre></td>\n    <td><pre>y+\ny+\nx-\ny-\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4 2\n2 1\n4 3\n</pre></td>\n    <td><pre>y+\nx+\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2025G",
        "url": "https://codeforces.com/problemset/problem/2025/G",
        "title": "Variable Damage",
        "rating": 3000,
        "tags": [
            "data structures",
            "flows"
        ],
        "div": "Div. 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 512,
        "description": "Monocarp is gathering an army to fight a dragon in a videogame.\n\nThe army consists of two parts: the heroes and the defensive artifacts. Each\nhero has one parameter \u2014 his health. Each defensive artifact also has one\nparameter \u2014 its durability.\n\nBefore the battle begins, Monocarp distributes artifacts to the heroes so that\neach hero receives at most one artifact.\n\nThe battle consists of rounds that proceed as follows:\n\n  * first, the dragon deals damage equal to $\\frac{1}{a + b}$ (a real number without rounding) to each hero, where $a$ is the number of heroes alive and $b$ is the number of active artifacts; \n  * after that, all heroes with health $0$ or less die; \n  * finally, some artifacts are deactivated. An artifact with durability $x$ is deactivated when one of the following occurs: the hero holding the artifact either dies or receives $x$ total damage (from the start of the battle). If an artifact is not held by any hero, it is inactive from the beginning of the battle. \n\nThe battle ends when there are no heroes left alive.\n\nInitially, the army is empty. There are $q$ queries: add a hero with\nhealth $x$ or an artifact with durability $y$ to the army. After each\nquery, determine the maximum number of rounds that Monocarp can survive if he\ndistributes the artifacts optimally.",
        "input": "The first line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) \u2014\nthe number of queries.\n\nIn the $i$-th of the following $q$ lines, there are two integers\n$t_i$ and $v_i$ ($t_i \\in \\\\{1, 2\\\\}$; $1 \\le v_i \\le 10^9$) \u2014\nthe type of the query and the value of the query parameter. If the type is\n$1$, a hero with health $v_i$ is added. If the type is $2$, an\nartifact with durability $v_i$ is added.",
        "output": "Print $q$ integers. After each query, output the maximum number of rounds\nthat Monocarp can survive if he distributes the artifacts optimally.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n2 5\n1 4\n1 10\n</pre></td>\n    <td><pre>0\n8\n19\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>10\n1 9\n1 6\n2 4\n1 8\n1 3\n2 10\n1 3\n1 6\n1 10\n2 6\n</pre></td>\n    <td><pre>9\n15\n19\n27\n30\n39\n42\n48\n59\n65\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Let's consider the first example.\n\n  * An artifact with durability $5$ is added. Since there are no heroes yet, the battle ends immediately. \n  * A hero with health $4$ is added. Monocarp can give him an artifact with durability $5$. First, there are rounds in which the hero takes $\\frac{1}{1 + 1} = \\frac{1}{2}$ damage. After $8$ such rounds, a total of $4$ damage will have been dealt, and the hero will die, while the artifact will deactivate. There are no more heroes alive, so the battle ends after $8$ rounds. \n  * A hero with health $10$ is added. Now let the artifact with durability $5$ be with this hero. Then, in the first $12$ rounds, the heroes will take $12 \\cdot \\frac{1}{2 + 1} = 4$ damage, and the first hero will die. The second hero has $6$ health left, and the artifact has $1$ durability. Now the damage is $\\frac{1}{2}$, so after another $2$ rounds, the artifact will deactivate. The second hero has $5$ health left. After another $5$ rounds, the second hero will die. Therefore, the answer is $12 + 2 + 5 = 19$."
    },
    {
        "problem_id": "2026A",
        "url": "https://codeforces.com/problemset/problem/2026/A",
        "title": "Perpendicular Segments",
        "rating": 900,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a coordinate plane and three integers $X$, $Y$, and\n$K$. Find two line segments $AB$ and $CD$ such that\n\n  1. the coordinates of points $A$, $B$, $C$, and $D$ are integers; \n  2. $0 \\le A_x, B_x, C_x, D_x \\le X$ and $0 \\le A_y, B_y, C_y, D_y \\le Y$; \n  3. the length of segment $AB$ is at least $K$; \n  4. the length of segment $CD$ is at least $K$; \n  5. segments $AB$ and $CD$ are perpendicular: if you draw lines that contain $AB$ and $CD$, they will cross at a right angle. \n\nNote that it's not necessary for segments to intersect. Segments are\nperpendicular as long as the lines they induce are perpendicular.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 5000$) \u2014\nthe number of test cases. Next, $t$ cases follow.\n\nThe first and only line of each test case contains three integers $X$,\n$Y$, and $K$ ($1 \\le X, Y \\le 1000$; $1 \\le K \\le 1414$).\n\nAdditional constraint on the input: the values of $X$, $Y$, and\n$K$ are chosen in such a way that the answer exists.",
        "output": "For each test case, print two lines. The first line should contain $4$\nintegers $A_x$, $A_y$, $B_x$, and $B_y$ \u2014 the coordinates of\nthe first segment.\n\nThe second line should also contain $4$ integers $C_x$, $C_y$,\n$D_x$, and $D_y$ \u2014 the coordinates of the second segment.\n\nIf there are multiple answers, print any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 1 1\n3 4 1\n4 3 3\n3 4 4\n</pre></td>\n    <td><pre>0 0 1 0\n0 0 0 1\n2 4 2 2\n0 1 1 1\n0 0 1 3\n1 2 4 1\n0 1 3 4\n0 3 3 0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "The answer for the first test case is shown below:\n\n![](CDN_BASE_URL/fde49f7448aea636de500404fb8804d1) The answer for the second\ntest case:  ![](CDN_BASE_URL/218ed75e7877cea15a02e0b20b635ea4) The answer for\nthe third test case:  ![](CDN_BASE_URL/a78511ad84067550d68b03ae1de99762) The\nanswer for the fourth test case:\n![](CDN_BASE_URL/e06aa850f6b8b3b4ee28ceaee5c5b478)"
    },
    {
        "problem_id": "2026B",
        "url": "https://codeforces.com/problemset/problem/2026/B",
        "title": "Black Cells",
        "rating": 1300,
        "tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a strip divided into cells, numbered from left to right from\n$0$ to $10^{18}$. Initially, all cells are white.\n\nYou can perform the following operation: choose two white cells $i$ and\n$j$, such that $i \\ne j$ and $|i - j| \\le k$, and paint them\nblack.\n\nA list $a$ is given. All cells from this list must be painted black.\nAdditionally, at most one cell that is not in this list can also be painted\nblack. Your task is to determine the minimum value of $k$ for which this\nis possible.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 500$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 <\na_i < 10^{18}$; $a_i < a_{i + 1}$).\n\nAdditional constraint on the input: the sum of $n$ across all test cases\ndoes not exceed $2000$.",
        "output": "For each test case, print a single integer \u2014 the minimum value of $k$ for\nwhich it is possible to paint all the given cells black.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2\n1 2\n1\n7\n3\n2 4 9\n5\n1 5 8 10 13\n</pre></td>\n    <td><pre>1\n1\n2\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, with $k=1$, it is possible to paint the cells $(1,\n2)$.\n\nIn the second example, with $k=1$, it is possible to paint the cells\n$(7, 8)$.\n\nIn the third example, with $k=2$, it is possible to paint the cells $(2,\n4)$ and $(8, 9)$.\n\nIn the fourth example, with $k=3$, it is possible to paint the cells\n$(0, 1)$, $(5, 8)$ and $(10, 13)$."
    },
    {
        "problem_id": "2026C",
        "url": "https://codeforces.com/problemset/problem/2026/C",
        "title": "Action Figures",
        "rating": 1500,
        "tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2500,
        "memory_limit_mb": 512,
        "description": "There is a shop that sells action figures near Monocarp's house. A new set of\naction figures will be released shortly; this set contains $n$ figures,\nthe $i$-th figure costs $i$ coins and is available for purchase from\nday $i$ to day $n$.\n\nFor each of the $n$ days, Monocarp knows whether he can visit the shop.\n\nEvery time Monocarp visits the shop, he can buy any number of action figures\nwhich are sold in the shop (of course, he cannot buy an action figure that is\nnot yet available for purchase). If Monocarp buys at least two figures during\nthe same day, he gets a discount equal to the cost of the most expensive\nfigure he buys (in other words, he gets the most expensive of the figures he\nbuys for free).\n\nMonocarp wants to buy exactly one $1$-st figure, one $2$-nd figure,\n..., one $n$-th figure from the set. He cannot buy the same figure twice.\nWhat is the minimum amount of money he has to spend?",
        "input": "The first line contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases.\n\nEach test case consists of two lines:\n\n  * the first line contains one integer $n$ ($1 \\le n \\le 4 \\cdot 10^5$) \u2014 the number of figures in the set (and the number of days); \n  * the second line contains a string $s$ ($|s| = n$, each $s_i$ is either 0 or 1). If Monocarp can visit the shop on the $i$-th day, then $s_i$ is 1; otherwise, $s_i$ is 0. \n\nAdditional constraints on the input:\n\n  * in each test case, $s_n$ is 1, so Monocarp is always able to buy all figures during the $n$-th day; \n  * the sum of $n$ over all test cases does not exceed $4 \\cdot 10^5$.",
        "output": "For each test case, print one integer \u2014 the minimum amount of money Monocarp\nhas to spend.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1\n1\n6\n101101\n7\n1110001\n5\n11111\n</pre></td>\n    <td><pre>1\n8\n18\n6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Monocarp buys the $1$-st figure on the $1$-st\nday and spends $1$ coin.\n\nIn the second test case, Monocarp can buy the $1$-st and the $3$-rd\nfigure on the $3$-rd day, the $2$-nd and the $4$-th figure on the\n$4$-th day, and the $5$-th and the $6$-th figure on the $6$-th\nday. Then, he will spend $1+2+5=8$ coins.\n\nIn the third test case, Monocarp can buy the $2$-nd and the $3$-rd\nfigure on the $3$-rd day, and all other figures on the $7$-th day.\nThen, he will spend $1+2+4+5+6 = 18$ coins."
    },
    {
        "problem_id": "2026D",
        "url": "https://codeforces.com/problemset/problem/2026/D",
        "title": "Sums of Segments",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "You are given a sequence of integers $[a_1, a_2, \\dots, a_n]$. Let\n$s(l,r)$ be the sum of elements from $a_l$ to $a_r$ (i. e.\n$s(l,r) = \\sum\\limits_{i=l}^{r} a_i$).\n\nLet's construct another sequence $b$ of size $\\frac{n(n+1)}{2}$ as\nfollows: $b = [s(1,1), s(1,2), \\dots, s(1,n), s(2,2), s(2,3), \\dots, s(2,n),\ns(3,3), \\dots, s(n,n)]$.\n\nFor example, if $a = [1, 2, 5, 10]$, then $b = [1, 3, 8, 18, 2, 7, 17,\n5, 15, 10]$.\n\nYou are given $q$ queries. During the $i$-th query, you are given two\nintegers $l_i$ and $r_i$, and you have to calculate $\\sum\n\\limits_{j=l_i}^{r_i} b_j$.",
        "input": "The first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10\n\\le a_i \\le 10$).\n\nThe third line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$).\n\nThen $q$ lines follow, the $i$-th of them contains two integers\n$l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le \\frac{n(n+1)}{2}$).",
        "output": "Print $q$ integers, the $i$-th of which should be equal to $\\sum\n\\limits_{j=l_i}^{r_i} b_j$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 2 5 10\n15\n1 1\n1 2\n1 3\n1 4\n1 5\n1 10\n5 10\n6 10\n2 8\n3 4\n3 10\n3 8\n5 6\n5 5\n1 8\n</pre></td>\n    <td><pre>1\n4\n12\n30\n32\n86\n56\n54\n60\n26\n82\n57\n9\n2\n61\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2026E",
        "url": "https://codeforces.com/problemset/problem/2026/E",
        "title": "Best Subsequence",
        "rating": 2500,
        "tags": [
            "bitmasks",
            "dfs and similar",
            "flows",
            "graph matchings",
            "graphs"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Given an integer array $a$ of size $n$.\n\nLet's define the value of the array as its size minus the number of set bits\nin the bitwise OR of all elements of the array.\n\nFor example, for the array $[1, 0, 1, 2]$, the bitwise OR is $3$\n(which contains $2$ set bits), and the value of the array is $4-2=2$.\n\nYour task is to calculate the maximum possible value of some subsequence of\nthe given array.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 100$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 100$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\dots, a_n$ ($0 \\le a_i < 2^{60}$).",
        "output": "For each test case, print the maximum possible value of some subsequence of\nthe given array.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n0 0 0\n4\n1 0 1 2\n1\n5\n8\n7 1 48 14 13 8 7 6\n</pre></td>\n    <td><pre>3\n2\n0\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2026F",
        "url": "https://codeforces.com/problemset/problem/2026/F",
        "title": "Bermart Ice Cream",
        "rating": 2700,
        "tags": [
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dp",
            "implementation",
            "trees"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 1024,
        "description": "In the Bermart chain of stores, a variety of ice cream is sold. Each type of\nice cream has two parameters: price and tastiness.\n\nInitially, there is one store numbered $1$, which sells nothing. You have\nto process $q$ queries of the following types:\n\n  * $1~x$ \u2014 a new store opens, that sells the same types of ice cream as store $x$. It receives the minimum available positive index. The order of the types of ice cream in the new store is the same as in store $x$. \n  * $2~x~p~t$ \u2014 a type of ice cream with price $p$ and tastiness $t$ becomes available in store $x$. \n  * $3~x$ \u2014 a type of ice cream that was available the longest (appeared the earliest) in store $x$ is removed. \n  * $4~x~p$ \u2014 for store $x$, find the maximum total tastiness of a subset of types of ice cream that are sold there, such that the total price does not exceed $p$ (each type can be used in the subset no more than once).",
        "input": "The first line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot\n10^4$) \u2014 the number of queries.\n\nEach of the following $q$ lines contains a query in the format described\nin the statement:\n\n  * $1~x$; \n  * $2~x~p~t$ ($1 \\le p, t \\le 2000$); \n  * $3~x$; \n  * $4~x~p$ ($1 \\le p \\le 2000$). \n\nAdditional constraints on the input data:\n\n  * $x$ in each query does not exceed the current number of stores (that is, $1$ plus the number of type $1$ queries); \n  * query type $3$ is not applied to a store that has no types of ice cream; \n  * there is at least one query of type $4$.",
        "output": "For each query of type $4$, output a single integer \u2014 for store $x$,\nfind the maximum total tastiness of a subset of types of ice cream that are\nsold there, such that the total price does not exceed $p$ (each type can\nbe used in the subset no more than once).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>12\n2 1 5 7\n2 1 3 4\n4 1 4\n4 1 8\n4 1 2\n1 1\n2 2 4 10\n4 1 9\n4 2 9\n3 1\n4 1 9\n4 2 9\n</pre></td>\n    <td><pre>4\n11\n0\n11\n17\n4\n17\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2027A",
        "url": "https://codeforces.com/problemset/problem/2027/A",
        "title": "Rectangle Arrangement",
        "rating": 800,
        "tags": [
            "geometry",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are coloring an infinite square grid, in which all cells are initially\nwhite. To do this, you are given $n$ stamps. Each stamp is a rectangle of\nwidth $w_i$ and height $h_i$.\n\nYou will use each stamp exactly once to color a rectangle of the same size as\nthe stamp on the grid in black. You cannot rotate the stamp, and for each\ncell, the stamp must either cover it fully or not cover it at all. You can use\nthe stamp at any position on the grid, even if some or all of the cells\ncovered by the stamping area are already black.\n\nWhat is the minimum sum of the perimeters of the connected regions of black\nsquares you can obtain after all the stamps have been used?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 100$).\n\nThe $i$-th of the next $n$ lines contains two integers $w_i$ and\n$h_i$ ($1 \\le w_i, h_i \\le 100$).",
        "output": "For each test case, output a single integer \u2014 the minimum sum of the\nperimeters of the connected regions of black squares you can obtain after all\nthe stamps have been used.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n3\n2 2\n1 1\n1 2\n1\n3 2\n3\n100 100\n100 100\n100 100\n4\n1 4\n2 3\n1 5\n3 2\n</pre></td>\n    <td><pre>20\n8\n10\n400\n16\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the stamps can be used as shown on the left. Each\nstamp is highlighted in its own color for clarity.\n\n![](CDN_BASE_URL/877686333ced56f689851506a90eefb8)\n\nAfter all these stamps are used, there is one black region (as shown on the\nright), and its perimeter is $20$. It can be shown that there is no way of\nusing the stamps that yields a lower total perimeter.\n\nIn the second test case, the second and third stamps can be used entirely\ninside the first one, so the minimum perimeter is equal to $8$."
    },
    {
        "problem_id": "2027B",
        "url": "https://codeforces.com/problemset/problem/2027/B",
        "title": "Stalin Sort",
        "rating": 1100,
        "tags": [
            "brute force",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Stalin Sort is a humorous sorting algorithm designed to eliminate elements\nwhich are out of place instead of bothering to sort them properly, lending\nitself to an $\\mathcal{O}(n)$ time complexity.\n\nIt goes as follows: starting from the second element in the array, if it is\nstrictly smaller than the previous element (ignoring those which have already\nbeen deleted), then delete it. Continue iterating through the array until it\nis sorted in non-decreasing order. For example, the array $[1, 4, 2, 3, 6,\n5, 5, 7, 7]$ becomes $[1, 4, 6, 7, 7]$ after a Stalin Sort.\n\nWe define an array as vulnerable if you can sort it in non-increasing order by\nrepeatedly applying a Stalin Sort to any of its subarrays$^{\\text{\u2217}}$, as\nmany times as is needed.\n\nGiven an array $a$ of $n$ integers, determine the minimum number of\nintegers which must be removed from the array to make it vulnerable.\n\n$^{\\text{\u2217}}$An array $a$ is a subarray of an array $b$ if $a$\ncan be obtained from $b$ by the deletion of several (possibly, zero or\nall) elements from the beginning and several (possibly, zero or all) elements\nfrom the end.",
        "input": "Each test consists of several test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 500$) \u2014 the number of test cases. This is\nfollowed by descriptions of the test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2000$) \u2014 the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2000$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of integers\nwhich must be removed from the array to make it vulnerable.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n7\n3 6 4 9 2 5 2\n5\n5 4 4 2 2\n8\n2 2 4 4 6 6 10 10\n1\n1000\n9\n6 8 9 10 12 9 7 5 4\n7\n300000000 600000000 400000000 900000000 200000000 400000000 200000000\n</pre></td>\n    <td><pre>2\n0\n6\n0\n4\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the optimal answer is to remove the numbers $3$\nand $9$. Then we are left with $a = [6, 4, 2, 5, 2]$. To show this\narray is vulnerable, we can first apply a Stalin Sort on the subarray $[4,\n2, 5]$ to get $a = [6, 4, 5, 2]$ and then apply a Stalin Sort on the\nsubarray $[6, 4, 5]$ to get $a = [6, 2]$, which is non-increasing.\n\nIn the second test case, the array is already non-increasing, so we don't have\nto remove any integers."
    },
    {
        "problem_id": "2027C",
        "url": "https://codeforces.com/problemset/problem/2027/C",
        "title": "Add Zeros",
        "rating": 1500,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "graphs",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "You're given an array $a$ initially containing $n$ integers. In one\noperation, you must do the following:\n\n  * Choose a position $i$ such that $1 < i \\le |a|$ and $a_i = |a| + 1 - i$, where $|a|$ is the current size of the array. \n  * Append $i - 1$ zeros onto the end of $a$. \n\nAfter performing this operation as many times as you want, what is the maximum\npossible length of the array $a$?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 3 \\cdot\n10^5$) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^{12}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$3 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the maximum possible length of\n$a$ after performing some sequence of operations.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n5\n2 4 6 2 5\n5\n5 4 4 5 1\n4\n6 8 2 3\n1\n1\n</pre></td>\n    <td><pre>10\n11\n10\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, we can first choose $i = 4$, since $a_4 = 5 + 1\n- 4 = 2$. After this, the array becomes $[2, 4, 6, 2, 5, 0, 0, 0]$. We\ncan then choose $i = 3$ since $a_3 = 8 + 1 - 3 = 6$. After this, the\narray becomes $[2, 4, 6, 2, 5, 0, 0, 0, 0, 0]$, which has a length of\n$10$. It can be shown that no sequence of operations will make the final\narray longer.\n\nIn the second test case, we can choose $i=2$, then $i=3$, then\n$i=4$. The final array will be $[5, 4, 4, 5, 1, 0, 0, 0, 0, 0, 0]$,\nwith a length of $11$."
    },
    {
        "problem_id": "2027D1",
        "url": "https://codeforces.com/problemset/problem/2027/D1",
        "title": "The Endspeaker (Easy Version)",
        "rating": 1700,
        "tags": [
            "binary search",
            "dp",
            "graphs",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of this problem. The only difference is that you only\nneed to output the minimum total cost of operations in this version. You must\nsolve both versions to be able to hack.\n\nYou're given an array $a$ of length $n$, and an array $b$ of\nlength $m$ ($b_i > b_{i+1}$ for all $1 \\le i < m$). Initially, the\nvalue of $k$ is $1$. Your aim is to make the array $a$ empty by\nperforming one of these two operations repeatedly:\n\n  * Type $1$ \u2014 If the value of $k$ is less than $m$ and the array $a$ is not empty, you can increase the value of $k$ by $1$. This does not incur any cost. \n  * Type $2$ \u2014 You remove a non-empty prefix of array $a$, such that its sum does not exceed $b_k$. This incurs a cost of $m - k$. \n\nYou need to minimize the total cost of the operations to make array $a$\nempty. If it's impossible to do this through any sequence of operations,\noutput $-1$. Otherwise, output the minimum total cost of the operations.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\le n, m \\le 3 \\cdot 10^5$, $\\boldsymbol{1 \\le n \\cdot m \\le 3 \\cdot\n10^5}$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ integers $b_1, b_2,\n\\ldots, b_m$ ($1 \\le b_i \\le 10^9$).\n\nIt is also guaranteed that $b_i > b_{i+1}$ for all $1 \\le i < m$.\n\nIt is guaranteed that the sum of $\\boldsymbol{n \\cdot m}$ over all test\ncases does not exceed $3 \\cdot 10^5$.",
        "output": "For each test case, if it's possible to make $a$ empty, then output the\nminimum total cost of the operations.\n\nIf there is no possible sequence of operations which makes $a$ empty, then\noutput a single integer $-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n4 2\n9 3 4 3\n11 7\n1 2\n20\n19 18\n10 2\n2 5 2 1 10 3 2 9 9 6\n17 9\n10 11\n2 2 2 2 2 2 2 2 2 2\n20 18 16 14 12 10 8 6 4 2 1\n1 6\n10\n32 16 8 4 2 1\n</pre></td>\n    <td><pre>1\n-1\n2\n10\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one optimal sequence of operations which yields a\ntotal cost of $1$ is as follows:\n\n  * Perform an operation of type $2$. Choose the prefix to be $[9]$. This incurs a cost of $1$. \n  * Perform an operation of type $1$. The value of $k$ is now $2$. This incurs no cost. \n  * Perform an operation of type $2$. Choose the prefix to be $[3, 4]$. This incurs a cost of $0$. \n  * Perform an operation of type $2$. Choose the prefix to be $[3]$. This incurs a cost of $0$. \n  * The array $a$ is now empty, and the total cost of all operations is $1$. \n\nIn the second test case, it's impossible to remove any prefix of the array\nsince $a_1 > b_1$, so array $a$ cannot be made empty by any sequence\nof operations."
    },
    {
        "problem_id": "2027D2",
        "url": "https://codeforces.com/problemset/problem/2027/D2",
        "title": "The Endspeaker (Hard Version)",
        "rating": 2200,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of this problem. The only difference is that you need\nto also output the number of optimal sequences in this version. You must solve\nboth versions to be able to hack.\n\nYou're given an array $a$ of length $n$, and an array $b$ of\nlength $m$ ($b_i > b_{i+1}$ for all $1 \\le i < m$). Initially, the\nvalue of $k$ is $1$. Your aim is to make the array $a$ empty by\nperforming one of these two operations repeatedly:\n\n  * Type $1$ \u2014 If the value of $k$ is less than $m$ and the array $a$ is not empty, you can increase the value of $k$ by $1$. This does not incur any cost. \n  * Type $2$ \u2014 You remove a non-empty prefix of array $a$, such that its sum does not exceed $b_k$. This incurs a cost of $m - k$. \n\nYou need to minimize the total cost of the operations to make array $a$\nempty. If it's impossible to do this through any sequence of operations,\noutput $-1$. Otherwise, output the minimum total cost of the operations,\nand the number of sequences of operations which yield this minimum cost modulo\n$10^9 + 7$.\n\nTwo sequences of operations are considered different if you choose a different\ntype of operation at any step, or the size of the removed prefix is different\nat any step.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\le n, m \\le 3 \\cdot 10^5$, $\\boldsymbol{1 \\le n \\cdot m \\le 3 \\cdot\n10^5}$).\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe third line of each test case contains $m$ integers $b_1, b_2,\n\\ldots, b_m$ ($1 \\le b_i \\le 10^9$).\n\nIt is also guaranteed that $b_i > b_{i+1}$ for all $1 \\le i < m$.\n\nIt is guaranteed that the sum of $\\boldsymbol{n \\cdot m}$ over all test\ncases does not exceed $3 \\cdot 10^5$.",
        "output": "For each test case, if it's possible to make $a$ empty, then output two\nintegers. The first should be the minimum total cost of the operations, and\nthe second should be the number of sequences of operations which achieve this\nminimum cost, modulo $10^9 + 7$.\n\nIf there is no possible sequence of operations which makes $a$ empty, then\noutput a single integer $-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n4 2\n9 3 4 3\n11 7\n1 2\n20\n19 18\n10 2\n2 5 2 1 10 3 2 9 9 6\n17 9\n10 11\n2 2 2 2 2 2 2 2 2 2\n20 18 16 14 12 10 8 6 4 2 1\n1 6\n10\n32 16 8 4 2 1\n</pre></td>\n    <td><pre>1 3\n-1\n2 11\n10 42\n4 1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there are $3$ optimal sequences of operations\nwhich yield a total cost of $1$:\n\n  * All $3$ sequences begin with a type $2$ operation, removing the prefix $[9]$ to make $a = [3, 4, 3]$, incurring a cost of $1$. Then, we perform a type $1$ operation to increase the value of $k$ by $1$. All subsequent operations now incur a cost of $0$. \n  * One sequence continues by removing the prefixes $[3, 4]$ then $[3]$. \n  * Another sequence continues by removing the prefixes $[3]$ then $[4, 3]$. \n  * Another sequence continues by removing the prefixes $[3]$ then $[4]$ then $[3]$. \n\nIn the second test case, it's impossible to remove any prefix of the array\nsince $a_1 > b_1$, so array $a$ cannot be made empty by any sequence\nof operations."
    },
    {
        "problem_id": "2027E1",
        "url": "https://codeforces.com/problemset/problem/2027/E1",
        "title": "Bit Game (Easy Version)",
        "rating": 2800,
        "tags": [
            "bitmasks",
            "brute force",
            "games",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the easy version of this problem. The only difference is that you need\nto output the winner of the game in this version, and the number of stones in\neach pile are fixed. You must solve both versions to be able to hack.\n\nAlice and Bob are playing a familiar game where they take turns removing\nstones from $n$ piles. Initially, there are $x_i$ stones in the\n$i$-th pile, and it has an associated value $a_i$. A player can take\n$d$ stones away from the $i$-th pile if and only if both of the\nfollowing conditions are met:\n\n  * $1 \\le d \\le a_i$, and \n  * $x \\, \\& \\, d = d$, where $x$ is the current number of stones in the $i$-th pile and $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND). \n\nThe player who cannot make a move loses, and Alice goes first.\n\nYou're given the $a_i$ and $x_i$ values for each pile, please\ndetermine who will win the game if both players play optimally.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 10^4$) \u2014\nthe number of piles.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i < 2^{30}$).\n\nThe third line of each test case contains $n$ integers $x_1, x_2,\n\\ldots, x_n$ ($1 \\le x_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^4$.",
        "output": "Print a single line with the winner's name. If Alice wins, print \"Alice\",\notherwise print \"Bob\" (without quotes).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n2\n1 6\n10 7\n3\n10 8 15\n25 4 14\n4\n8 32 65 64\n7 45 126 94\n3\n20 40 1\n23 55 1\n5\n12345 9876 86419 8641 1\n6789 54321 7532 97532 1\n2\n20 64\n44 61\n3\n57 109 55\n69 90 85\n</pre></td>\n    <td><pre>Bob\nBob\nBob\nBob\nBob\nAlice\nAlice\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, neither player can take any stones from the first pile\nsince there is no value of $d$ satisfying the conditions. For the second\npile, to begin with, Alice can remove between $1$ and $6$ stones. No\nmatter which move Alice performs, Bob can remove the rest of the stones on his\nturn. After Bob's move, there are no more moves that Alice can perform, so Bob\nwins.\n\nIn the second test case, here is one example of how the game might go. Alice\nmoves first, and she decides to remove from the first pile. She cannot take\n$17$ stones, because $17 > 10$, which fails the first condition. She\ncannot take $10$ stones, because $25 \\, \\& \\, 10 = 8$ which fails the\nsecond condition. One option is to take $9$ stones; now the pile has\n$16$ stones left. On Bob's turn he decides to take stones from the second\npile; the only option here is to take all $4$. Now, no more stones can be\ntaken from either of the first two piles, so Alice must take some stones from\nthe last pile. She decides to take $12$ stones, and Bob then follows by\ntaking the last $2$ stones on that pile. Since Alice now has no legal\nmoves left, Bob wins. It can be shown that no matter which strategy Alice\nfollows, Bob will always be able to win if he plays optimally."
    },
    {
        "problem_id": "2027E2",
        "url": "https://codeforces.com/problemset/problem/2027/E2",
        "title": "Bit Game (Hard Version)",
        "rating": 3100,
        "tags": [
            "bitmasks",
            "dp",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is the hard version of this problem. The only difference is that you need\nto output the number of choices of games where Bob wins in this version, where\nthe number of stones in each pile are not fixed. You must solve both versions\nto be able to hack.\n\nAlice and Bob are playing a familiar game where they take turns removing\nstones from $n$ piles. Initially, there are $x_i$ stones in the\n$i$-th pile, and it has an associated value $a_i$. A player can take\n$d$ stones away from the $i$-th pile if and only if both of the\nfollowing conditions are met:\n\n  * $1 \\le d \\le a_i$, and \n  * $x \\, \\& \\, d = d$, where $x$ is the current number of stones in the $i$-th pile and $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND). \n\nThe player who cannot make a move loses, and Alice goes first.\n\nYou're given the $a_i$ values of each pile, but the number of stones in\nthe $i$-th pile has not been determined yet. For the $i$-th pile,\n$x_i$ can be any integer between $1$ and $b_i$, inclusive. That\nis, you can choose an array $x_1, x_2, \\ldots, x_n$ such that the\ncondition $1 \\le x_i \\le b_i$ is satisfied for all piles.\n\nYour task is to count the number of games where Bob wins if both players play\noptimally. Two games are considered different if the number of stones in any\npile is different, i.e., the arrays of $x$ differ in at least one\nposition.\n\nSince the answer can be very large, please output the result modulo $10^9 +\n7$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 1000$). The description of the test cases\nfollows.\n\nThe first line of each test case contains $n$ ($1 \\le n \\le 10^4$) \u2014\nthe number of piles.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i < 2^{30}$).\n\nThe third line of each test case contains $n$ integers $b_1, b_2,\n\\ldots, b_n$ ($1 \\le b_i < 2^{30}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^4$.",
        "output": "Output a single integer, the number of games where Bob wins, modulo $10^9 +\n7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n3\n1 2 3\n3 2 2\n1\n13\n45\n5\n5 4 7 8 6\n4 4 5 5 5\n4\n6 4 8 8\n12 13 14 12\n3\n92856133 46637598 12345678\n29384774 73775896 87654321\n2\n65 12\n110 31\n4\n677810235 275091182 428565855 720629731\n74522416 889934149 3394714 230851724\n</pre></td>\n    <td><pre>4\n4\n0\n6552\n722019507\n541\n665443265\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, no matter which values of $x_2$ and $x_3$ we\nchoose, the second and third piles will always be chosen exactly once before\nno more stones can be taken from them. If $x_1 = 2$, then no stones can be\ntaken from it, so Bob will make the last move. If $x_1 = 1$ or $x_1 =\n3$, then exactly one move can be made on that pile, so Alice will make the\nlast move. So Bob wins when $x = [2, 1, 1]$ or $x = [2, 1, 2]$ or $x\n= [2, 2, 1]$ or $x = [2, 2, 2]$.\n\nIn the second test case, Bob wins when $x_1 = 14$ or $x_1 = 30$ by\nremoving $14 - k$ stones, where $k$ is the number of stones Alice\nremoves on her turn. Bob also wins when $x_1 = 16$ or $x_1 = 32$ since\nAlice does not have any moves to begin with."
    },
    {
        "problem_id": "2028A",
        "url": "https://codeforces.com/problemset/problem/2028/A",
        "title": "Alice's Adventures in ''Chess''",
        "rating": 800,
        "tags": [
            "brute force",
            "implementation",
            "math",
            "strings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice is trying to meet up with the Red Queen in the countryside! Right now,\nAlice is at position $(0, 0)$, and the Red Queen is at position $(a,\nb)$. Alice can only move in the four cardinal directions (north, east,\nsouth, west).\n\nMore formally, if Alice is at the point $(x, y)$, she will do one of the\nfollowing:\n\n  * go north (represented by N), moving to $(x, y+1)$; \n  * go east (represented by E), moving to $(x+1, y)$; \n  * go south (represented by S), moving to $(x, y-1)$; or \n  * go west (represented by W), moving to $(x-1, y)$. \n\nAlice's movements are predetermined. She has a string $s$ representing a\nsequence of moves that she performs from left to right. Once she reaches the\nend of the sequence, she repeats the same pattern of moves forever.\n\nCan you help Alice figure out if she will ever meet the Red Queen?",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 500$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $n$, $a$,\n$b$ ($1 \\le n$, $a$, $b \\le 10$) \u2014 the length of the string\nand the initial coordinates of the Red Queen.\n\nThe second line contains a string $s$ of length $n$ consisting only of\nthe characters N, E, S, or W.",
        "output": "For each test case, output a single string \"YES\" or \"NO\" (without the quotes)\ndenoting whether Alice will eventually meet the Red Queen.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2 2 2\nNE\n3 2 2\nNNE\n6 2 1\nNNEESW\n6 10 10\nNNEESW\n3 4 2\nNEE\n4 5 5\nNEWS\n</pre></td>\n    <td><pre>YES\nNO\nYES\nYES\nYES\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Alice follows the path $(0,0)\n\\xrightarrow[\\texttt{N}]{} (0,1) \\xrightarrow[\\texttt{E}]{} (1,1)\n\\xrightarrow[\\texttt{N}]{} (1,2) \\xrightarrow[\\texttt{E}]{} (2,2)$.\n\nIn the second test case, Alice can never reach the Red Queen."
    },
    {
        "problem_id": "2028B",
        "url": "https://codeforces.com/problemset/problem/2028/B",
        "title": "Alice's Adventures in Permuting",
        "rating": 1400,
        "tags": [
            "binary search",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice mixed up the words transmutation and permutation! She has an array\n$a$ specified via three integers $n$, $b$, $c$: the array\n$a$ has length $n$ and is given via $a_i = b\\cdot (i - 1) + c$ for\n$1\\le i\\le n$. For example, if $n=3$, $b=2$, and $c=1$, then\n$a=[2 \\cdot 0 + 1, 2 \\cdot 1 + 1, 2 \\cdot 2 + 1] = [1, 3, 5]$.\n\nNow, Alice really enjoys permutations of $[0, \\ldots,\nn-1]$$^{\\text{\u2217}}$ and would like to transform $a$ into a\npermutation. In one operation, Alice replaces the maximum element of $a$\nwith the $\\operatorname{MEX}$$^{\\text{\u2020}}$ of $a$. If there are\nmultiple maximum elements in $a$, Alice chooses the leftmost one to\nreplace.\n\nCan you help Alice figure out how many operations she has to do for $a$ to\nbecome a permutation for the first time? If it is impossible, you should\nreport it.\n\n$^{\\text{\u2217}}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $0$ to $n-1$ in arbitrary order. Please\nnote, this is slightly different from the usual definition of a permutation.\nFor example, $[1,2,0,4,3]$ is a permutation, but $[0,1,1]$ is not a\npermutation ($1$ appears twice in the array), and $[0,2,3]$ is also\nnot a permutation ($n=3$ but there is $3$ in the array).\n\n$^{\\text{\u2020}}$The $\\operatorname{MEX}$ of an array is the smallest non-\nnegative integer that does not belong to the array. For example, the\n$\\operatorname{MEX}$ of $[0, 3, 1, 3]$ is $2$ and the\n$\\operatorname{MEX}$ of $[5]$ is $0$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^5$). The description of the test cases\nfollows.\n\nThe only line of each test case contains three integers $n$, $b$,\n$c$ ($1\\le n\\le 10^{18}$; $0\\le b$, $c\\le 10^{18}$) \u2014 the\nparameters of the array.",
        "output": "For each test case, if the array can never become a permutation, output\n$-1$. Otherwise, output the minimum number of operations for the array to\nbecome a permutation.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n10 1 0\n1 2 3\n100 2 1\n3 0 1\n3 0 0\n1000000000000000000 0 0\n1000000000000000000 1000000000000000000 1000000000000000000\n</pre></td>\n    <td><pre>0\n1\n50\n2\n-1\n-1\n1000000000000000000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the array is already $[0, 1, \\ldots, 9]$, so no\noperations are required.\n\nIn the third test case, the starting array is $[1, 3, 5, \\ldots, 199]$.\nAfter the first operation, the $199$ gets transformed into a $0$. In\nthe second operation, the $197$ gets transformed into a $2$. If we\ncontinue this, it will take exactly $50$ operations to get the array\n$[0, 1, 2, 3, \\ldots, 99]$.\n\nIn the fourth test case, two operations are needed: $[1,1,1] \\to [0,1,1] \\to\n[0,2,1]$.\n\nIn the fifth test case, the process is $[0,0,0] \\to [1,0,0] \\to [2,0,0] \\to\n[1,0,0] \\to [2,0,0]$. This process repeats forever, so the array is never a\npermutation and the answer is $-1$."
    },
    {
        "problem_id": "2028C",
        "url": "https://codeforces.com/problemset/problem/2028/C",
        "title": "Alice's Adventures in Cutting Cake",
        "rating": 1600,
        "tags": [
            "binary search",
            "dp",
            "greedy",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alice is at the Mad Hatter's tea party! There is a long sheet cake made up of\n$n$ sections with tastiness values $a_1, a_2, \\ldots, a_n$. There are\n$m$ creatures at the tea party, excluding Alice.\n\nAlice will cut the cake into $m + 1$ pieces. Formally, she will partition\nthe cake into $m + 1$ subarrays, where each subarray consists of some\nnumber of adjacent sections. The tastiness of a piece is the sum of tastiness\nof its sections. Afterwards, she will divvy these $m + 1$ pieces up among\nthe $m$ creatures and herself (her piece can be empty). However, each of\nthe $m$ creatures will only be happy when the tastiness of its piece is\n$v$ or more.\n\nAlice wants to make sure every creature is happy. Limited by this condition,\nshe also wants to maximize the tastiness of her own piece. Can you help Alice\nfind the maximum tastiness her piece can have? If there is no way to make sure\nevery creature is happy, output $-1$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains three integers $n, m, v$\n($1\\le m\\le n\\le 2\\cdot 10^5$; $1\\le v\\le 10^9$) \u2014 the number of\nsections, the number of creatures, and the creatures' minimum requirement for\ntastiness, respectively.\n\nThe next line contains $n$ space separated integers $a_1, a_2, \\ldots,\na_n$ ($1 \\le a_i \\le 10^9$) \u2014 the tastinesses of the sections.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.",
        "output": "For each test case, output the maximum tastiness Alice can achieve for her\npiece, or $-1$ if there is no way to make sure every creature is happy.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n6 2 1\n1 1 10 1 1 10\n6 2 2\n1 1 10 1 1 10\n6 2 3\n1 1 10 1 1 10\n6 2 10\n1 1 10 1 1 10\n6 2 11\n1 1 10 1 1 10\n6 2 12\n1 1 10 1 1 10\n6 2 12\n1 1 1 1 10 10\n</pre></td>\n    <td><pre>22\n12\n2\n2\n2\n0\n-1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, Alice can give the first and second section as their\nown pieces, and then take the remaining $10 + 1 + 1 + 10 = 22$ tastiness\nfor herself. We can show that she cannot do any better.\n\nFor the second test case, Alice could give the first and second section as one\npiece, and the sixth section as one piece. She can then take the remaining\n$10 + 1 + 1 = 12$ tastiness for herself. We can show that she cannot do\nany better.\n\nFor the seventh test case, Alice cannot give each creature a piece of at least\n$12$ tastiness."
    },
    {
        "problem_id": "2028D",
        "url": "https://codeforces.com/problemset/problem/2028/D",
        "title": "Alice's Adventures in Cards",
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "divide and conquer",
            "dp",
            "graphs",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alice is playing cards with the Queen of Hearts, King of Hearts, and Jack of\nHearts. There are $n$ different types of cards in their card game. Alice\ncurrently has a card of type $1$ and needs a card of type $n$ to\nescape Wonderland. The other players have one of each kind of card.\n\nIn this card game, Alice can trade cards with the three other players. Each\nplayer has different preferences for the $n$ types of cards, which can be\ndescribed by permutations$^{\\text{\u2217}}$ $q$, $k$, and $j$ for\nthe Queen, King, and Jack, respectively.\n\nA player values card $a$ more than card $b$ if for their permutation\n$p$, $p_a > p_b$. Then, this player is willing to trade card $b$\nto Alice in exchange for card $a$. Alice's preferences are\nstraightforward: she values card $a$ more than card $b$ if $a >\nb$, and she will also only trade according to these preferences.\n\nDetermine if Alice can trade up from card $1$ to card $n$ subject to\nthese preferences, and if it is possible, give a possible set of trades to do\nit.\n\n$^{\\text{\u2217}}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains an integer $n$ ($2\\le n\\le\n2\\cdot 10^5$) \u2014 the number of card types.\n\nThe next three lines contain the preferences of the Queen, King, and Jack\nrespectively. Each of these lines contains $n$ integers $p_1, p_2,\n\\ldots, p_n$ ($1\\le p_i\\le n$) \u2014 a permutation corresponding to the\nplayer's preferences.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.",
        "output": "For each test case, on the first line output a single string \"YES\" or \"NO\"\n(without the quotes) denoting whether Alice can trade up to card $n$.\n\nIf the first line was \"YES\", then on the next line output $k$ \u2014 the number\nof trades Alice will make. On the next $k$ lines output space separated a\ncharacter $c\\in \\\\{\\texttt{q}, \\texttt{k}, \\texttt{j}\\\\}$ and integer\n$x$, denoting that Alice trades with player $c$ to get card $x$.\nIt must be the case that on the $k$'th line, $x = n$. If there are\nmultiple solutions, print any of them.\n\nYou can output this answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses. The same goes for the character $c$ denoting the player in the\ntrade ($\\texttt{Q}, \\texttt{K}, \\texttt{J}$ will all be accepted alongside\ntheir lowercase variants).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n3\n1 3 2\n2 1 3\n1 2 3\n4\n2 3 1 4\n1 2 3 4\n1 4 2 3\n</pre></td>\n    <td><pre>YES\n2\nk 2\nq 3\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, Alice can trade with the King to get card $2$. She\ncan then trade with the Queen to get card $3$.\n\nIn the second testcase, even though Alice can trade with the Queen to get card\n$3$, with the King to get card $2$, and then with the Jack to get card\n$4$, this is not a valid solution since it doesn't respect Alice's\npreferences. We can show that there is no way for Alice to get to card\n$4$."
    },
    {
        "problem_id": "2028E",
        "url": "https://codeforces.com/contest/2028/problem/E",
        "title": "Alice's Adventures in the Rabbit Hole",
        "rating": 2300,
        "tags": null,
        "div": "Div. 2",
        "time_limit_ms": 0,
        "memory_limit_mb": 0,
        "description": "Alice is at the bottom of the rabbit hole! The rabbit hole can be modeled as a\ntree$^{\\text{\u2217}}$ which has an exit at vertex $1$, and Alice starts at\nsome vertex $v$. She wants to get out of the hole, but unfortunately, the\nQueen of Hearts has ordered her execution.\n\nEach minute, a fair coin is flipped. If it lands heads, Alice gets to move to\nan adjacent vertex of her current location, and otherwise, the Queen of Hearts\ngets to pull Alice to an adjacent vertex of the Queen's choosing. If Alice\never ends up on any of the non-root leaves$^{\\text{\u2020}}$ of the tree, Alice\nloses.\n\nAssuming both of them move optimally, compute the probability that Alice\nmanages to escape for every single starting vertex $1\\le v\\le n$. Since\nthese probabilities can be very small, output them modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the exact answer\ncan be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$\nand $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the\ninteger equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an\ninteger $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n$^{\\text{\u2217}}$A tree is a connected simple graph which has $n$ vertices\nand $n-1$ edges.\n\n$^{\\text{\u2020}}$A leaf is a vertex that is connected to exactly one edge.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases\nfollows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le\nn\\le 2\\cdot 10^5$) \u2014 the number of vertices in the tree.\n\nThe $i$-th of the next $n - 1$ lines contains two integers $x_i$\nand $y_i$ ($1 \\le x_i, y_i \\le n$ and $x_i \\neq y_i$) \u2014 the edges\nof the tree. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, output $n$ integers on one line \u2014 the probabilities of\nAlice escaping starting from vertex $1, 2, \\ldots, n$. Since these\nprobabilities can be very small, output them modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n5\n1 2\n1 3\n2 4\n3 5\n9\n1 2\n2 3\n4 5\n5 6\n7 8\n8 9\n2 4\n5 7\n</pre></td>\n    <td><pre>1 499122177 499122177 0 0 \n1 499122177 0 332748118 166374059 0 443664157 720954255 0 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case:\n\n  1. Alice escapes from the root (vertex $1$) by definition with probability $1$. \n  2. Alice immediately loses from vertices $4$ and $5$ since they are leaves. \n  3. From the other two vertices, Alice escapes with probability $\\frac 12$ since the Queen will pull her to the leaves."
    },
    {
        "problem_id": "2028F",
        "url": "https://codeforces.com/contest/2028/problem/F",
        "title": "Alice's Adventures in Addition",
        "rating": 2700,
        "tags": null,
        "div": "Div. 2",
        "time_limit_ms": 0,
        "memory_limit_mb": 0,
        "description": "Note that the memory limit is unusual.\n\nThe Cheshire Cat has a riddle for Alice: given $n$ integers $a_1, a_2,\n\\ldots, a_n$ and a target $m$, is there a way to insert $+$ and\n$\\times$ into the circles of the expression $$a_1 \\circ a_2 \\circ\n\\cdots \\circ a_n = m$$ to make it true? We follow the usual order of\noperations: $\\times$ is done before $+$.\n\nAlthough Alice is excellent at chess, she is not good at math. Please help her\nso she can find a way out of Wonderland!",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains two integers $n, m$ ($1\\le\nn\\le 2\\cdot 10^5$; $1\\le m\\le 10^4$) \u2014 the number of integers and the\ntarget, respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0\\le a_i\\le 10^4$) \u2014 the elements of the array $a$.\n\nThe sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.",
        "output": "For each test case, output \"YES\" without quotes if it is possible to get the\ntarget by inserting $+$ or $\\times$ and \"NO\" otherwise.\n\nYou can output each letter in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as a positive answer).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5 4\n2 1 1 1 2\n5 5\n2 1 1 1 2\n5 6\n2 1 1 1 2\n5 7\n2 1 1 1 2\n5 8\n2 1 1 1 2\n5 6\n2 0 2 2 3\n</pre></td>\n    <td><pre>YES\nYES\nYES\nYES\nNO\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Possible solutions for the first four test cases are shown below.\n$$\\begin{align*} 2 \\times 1 + 1 \\times 1 \\times 2 &= 4 \\\\\\ 2 \\times 1 + 1\n+ 1 \\times 2 &= 5 \\\\\\ 2 \\times 1 + 1 + 1 \\times 2 &= 6 \\\\\\ 2 + 1 + 1 + 1 + 2\n&= 7 \\\\\\ \\end{align*}$$ It is impossible to get a result of $8$ in the\nfifth test case."
    },
    {
        "problem_id": "2029A",
        "url": "https://codeforces.com/problemset/problem/2029/A",
        "title": "Set",
        "rating": 800,
        "tags": [
            "binary search",
            "greedy",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given a positive integer $k$ and a set $S$ of all integers\nfrom $l$ to $r$ (inclusive).\n\nYou can perform the following two-step operation any number of times (possibly\nzero):\n\n  1. First, choose a number $x$ from the set $S$, such that there are at least $k$ multiples of $x$ in $S$ (including $x$ itself); \n  2. Then, remove $x$ from $S$ (note that nothing else is removed).\n\nFind the maximum possible number of operations that can be performed.",
        "input": "Each test contains multiple test cases. The first line of the input contains a\nsingle integer $t$ ($1\\le t\\le 10^4$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe only line of each test case contains three integers $l$, $r$, and\n$k$ ($1\\le l\\le r\\leq 10^9$, $1\\leq k\\le r-l+1$) \u2014 the minimum\ninteger in $S$, the maximum integer in $S$, and the parameter $k$.",
        "output": "For each test case, output a single integer \u2014 the maximum possible number of\noperations that can be performed.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n3 9 2\n4 9 1\n7 9 2\n2 10 2\n154 220 2\n147 294 2\n998 24435 3\n1 1000000000 2\n</pre></td>\n    <td><pre>2\n6\n0\n4\n0\n1\n7148\n500000000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, initially, $S = \\\\{3,4,5,6,7,8,9\\\\}$. One possible\noptimal sequence of operations is:\n\n  1. Choose $x = 4$ for the first operation, since there are two multiples of $4$ in $S$: $4$ and $8$. $S$ becomes equal to $\\\\{3,5,6,7,8,9\\\\}$; \n  2. Choose $x = 3$ for the second operation, since there are three multiples of $3$ in $S$: $3$, $6$, and $9$. $S$ becomes equal to $\\\\{5,6,7,8,9\\\\}$. \n\nIn the second test case, initially, $S=\\\\{4,5,6,7,8,9\\\\}$. One possible\noptimal sequence of operations is:\n\n  1. Choose $x = 5$, $S$ becomes equal to $\\\\{4,6,7,8,9\\\\}$; \n  2. Choose $x = 6$, $S$ becomes equal to $\\\\{4,7,8,9\\\\}$; \n  3. Choose $x = 4$, $S$ becomes equal to $\\\\{7,8,9\\\\}$; \n  4. Choose $x = 8$, $S$ becomes equal to $\\\\{7,9\\\\}$; \n  5. Choose $x = 7$, $S$ becomes equal to $\\\\{9\\\\}$; \n  6. Choose $x = 9$, $S$ becomes equal to $\\\\{\\\\}$. \n\nIn the third test case, initially, $S=\\\\{7,8,9\\\\}$. For each $x$ in\n$S$, no multiple of $x$ other than $x$ itself can be found in\n$S$. Since $k = 2$, you can perform no operations.\n\nIn the fourth test case, initially, $S=\\\\{2,3,4,5,6,7,8,9,10\\\\}$. One\npossible optimal sequence of operations is:\n\n  1. Choose $x = 2$, $S$ becomes equal to $\\\\{3,4,5,6,7,8,9,10\\\\}$; \n  2. Choose $x = 4$, $S$ becomes equal to $\\\\{3,5,6,7,8,9,10\\\\}$; \n  3. Choose $x = 3$, $S$ becomes equal to $\\\\{5,6,7,8,9,10\\\\}$; \n  4. Choose $x = 5$, $S$ becomes equal to $\\\\{6,7,8,9,10\\\\}$."
    },
    {
        "problem_id": "2029B",
        "url": "https://codeforces.com/problemset/problem/2029/B",
        "title": "Replacement",
        "rating": 1100,
        "tags": [
            "games",
            "greedy",
            "strings"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You have a binary string$^{\\text{\u2217}}$ $s$ of length $n$, and Iris\ngives you another binary string $r$ of length $n-1$.\n\nIris is going to play a game with you. During the game, you will perform\n$n-1$ operations on $s$. In the $i$-th operation ($1 \\le i \\le\nn-1$):\n\n  * First, you choose an index $k$ such that $1\\le k\\le |s| - 1$ and $s_{k} \\neq s_{k+1}$. If it is impossible to choose such an index, you lose; \n  * Then, you replace $s_ks_{k+1}$ with $r_i$. Note that this decreases the length of $s$ by $1$. \n\nIf all the $n-1$ operations are performed successfully, you win.\n\nDetermine whether it is possible for you to win this game.\n\n$^{\\text{\u2217}}$A binary string is a string where each character is either\n$\\mathtt{0}$ or $\\mathtt{1}$.",
        "input": "Each test contains multiple test cases. The first line of the input contains a\nsingle integer $t$ ($1\\le t\\le 10^4$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le\nn\\le 10^5$) \u2014 the length of $s$.\n\nThe second line contains the binary string $s$ of length $n$\n($s_i=\\mathtt{0}$ or $\\mathtt{1}$).\n\nThe third line contains the binary string $r$ of length $n-1$\n($r_i=\\mathtt{0}$ or $\\mathtt{1}$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, print \"YES\" (without quotes) if you can win the game, and\n\"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n2\n11\n0\n2\n01\n1\n4\n1101\n001\n6\n111110\n10000\n6\n010010\n11010\n8\n10010010\n0010010\n</pre></td>\n    <td><pre>NO\nYES\nYES\nNO\nYES\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you cannot perform the first operation. Thus, you lose\nthe game.\n\nIn the second test case, you can choose $k=1$ in the only operation, and\nafter that, $s$ becomes equal to $\\mathtt{1}$. Thus, you win the game.\n\nIn the third test case, you can perform the following operations:\n$\\mathtt{1}\\underline{\\mathtt{10}}\\mathtt{1}\\xrightarrow{r_1=\\mathtt{0}}\n\\mathtt{1}\\underline{\\mathtt{01}} \\xrightarrow{r_2=\\mathtt{0}}\n\\underline{\\mathtt{10}} \\xrightarrow{r_3=\\mathtt{1}} \\mathtt{1}$."
    },
    {
        "problem_id": "2029C",
        "url": "https://codeforces.com/problemset/problem/2029/C",
        "title": "New Rating",
        "rating": 1700,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "Hello, Codeforces Forcescode!\n\n\n\nKevin used to be a participant of Codeforces. Recently, the KDOI Team has\ndeveloped a new Online Judge called Forcescode.\n\nKevin has participated in $n$ contests on Forcescode. In the $i$-th\ncontest, his performance rating is $a_i$.\n\nNow he has hacked into the backend of Forcescode and will select an interval\n$[l,r]$ ($1\\le l\\le r\\le n$), then skip all of the contests in this\ninterval. After that, his rating will be recalculated in the following way:\n\n  * Initially, his rating is $x=0$; \n  * For each $1\\le i\\le n$, after the $i$-th contest, \n    * If $l\\le i\\le r$, this contest will be skipped, and the rating will remain unchanged; \n    * Otherwise, his rating will be updated according to the following rules: \n      * If $a_i>x$, his rating $x$ will increase by $1$; \n      * If $a_i=x$, his rating $x$ will remain unchanged; \n      * If $a_i<x$, his rating $x$ will decrease by $1$. \n\nYou have to help Kevin to find his maximum possible rating after the\nrecalculation if he chooses the interval $[l,r]$ optimally. Note that\nKevin has to skip at least one contest.",
        "input": "Each test contains multiple test cases. The first line of the input contains a\nsingle integer $t$ ($1\\le t\\le 5\\cdot 10^4$) \u2014 the number of test\ncases. The description of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le\nn\\le 3\\cdot 10^5$) \u2014 the number of contests.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\le\na_i\\le n$) \u2014 the performance ratings in the contests.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$3 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the maximum possible rating\nafter the recalculation if Kevin chooses the interval optimally.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n6\n1 2 3 4 5 6\n7\n1 2 1 1 1 3 4\n1\n1\n9\n9 9 8 2 4 4 3 5 3\n10\n1 2 3 4 1 3 2 1 1 10\n</pre></td>\n    <td><pre>5\n4\n0\n4\n5\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Kevin must skip at least one contest. If he chooses\nany interval of length $1$, his rating after the recalculation will be\nequal to $5$.\n\nIn the second test case, Kevin's optimal choice is to select the interval\n$[3,5]$. During the recalculation, his rating changes as follows:\n\n$$ 0 \\xrightarrow{a_1=1} 1 \\xrightarrow{a_2=2} 2\n\\xrightarrow{\\mathtt{skip}} 2 \\xrightarrow{\\mathtt{skip}} 2\n\\xrightarrow{\\mathtt{skip}} 2 \\xrightarrow{a_6=3} 3 \\xrightarrow{a_7=4} 4\n$$\n\nIn the third test case, Kevin must skip the only contest, so his rating will\nremain at the initial value of $0$.\n\nIn the fourth test case, Kevin's optimal choice is to select the interval\n$[7,9]$. During the recalculation, his rating changes as follows:\n\n$$ 0 \\xrightarrow{a_1=9} 1 \\xrightarrow{a_2=9} 2 \\xrightarrow{a_3=8} 3\n\\xrightarrow{a_4=2} 2 \\xrightarrow{a_5=4} 3 \\xrightarrow{a_6=4} 4\n\\xrightarrow{\\mathtt{skip}} 4 \\xrightarrow{\\mathtt{skip}} 4\n\\xrightarrow{\\mathtt{skip}} 4 $$\n\nIn the fifth test case, Kevin's optimal choice is to select the interval\n$[5,9]$."
    },
    {
        "problem_id": "2029D",
        "url": "https://codeforces.com/problemset/problem/2029/D",
        "title": "Cool Graph",
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "You are given an undirected graph with $n$ vertices and $m$ edges.\n\nYou can perform the following operation at most $2\\cdot \\max(n,m)$ times:\n\n  * Choose three distinct vertices $a$, $b$, and $c$, then for each of the edges $(a,b)$, $(b,c)$, and $(c,a)$, do the following: \n    * If the edge does not exist, add it. On the contrary, if it exists, remove it. \n\nA graph is called cool if and only if one of the following holds:\n\n  * The graph has no edges, or \n  * The graph is a tree. \n\nYou have to make the graph cool by performing the above operations. Note that\nyou can use at most $2\\cdot \\max(n,m)$ operations.\n\nIt can be shown that there always exists at least one solution.",
        "input": "Each test contains multiple test cases. The first line of input contains a\nsingle integer $t$ ($1\\le t\\le 10^4$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$\n($3\\le n\\le 10^5$, $0\\le m\\le \\min\\left(\\frac{n(n-1)}{2},2\\cdot\n10^5\\right)$) \u2014 the number of vertices and the number of edges.\n\nThen $m$ lines follow, the $i$-th line contains two integers $u_i$\nand $v_i$ ($1\\le u_i,v_i\\le n$) \u2014 the two nodes that the $i$-th\nedge connects.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$, and the sum of $m$ over all test cases does not exceed\n$2\\cdot 10^5$.\n\nIt is guaranteed that there are no self-loops or multiple-edges in the given\ngraph.",
        "output": "For each test case, in the first line output an integer $k$ ($0\\le k\\le\n2\\cdot \\max(n, m)$) \u2014 the number of operations.\n\nThen output $k$ lines, the $i$-th line containing three distinct\nintegers $a$, $b$, and $c$ ($1\\le a,b,c\\le n$) \u2014 the three\nintegers you choose in the $i$-th operation.\n\nIf there are multiple solutions, you can output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 0\n3 1\n1 2\n3 2\n1 2\n2 3\n3 3\n1 2\n2 3\n3 1\n6 6\n1 2\n1 6\n4 5\n3 4\n4 6\n3 6\n</pre></td>\n    <td><pre>0\n1\n1 2 3\n0\n1\n1 2 3\n3\n1 3 6\n2 4 5\n3 4 6\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the graph is already cool because there are no edges.\n\nIn the second test case, after performing the only operation, the graph\nbecomes a tree, so it is cool.\n\nIn the third test case, the graph is already cool because it is a tree.\n\nIn the fourth test case, after performing the only operation, the graph has no\nedges, so it is cool.\n\nIn the fifth test case:\n\nOperation| Graph before the operation| Graph after the operation  \n---|---|---  \n$1$| ![](CDN_BASE_URL/2ae6076e1f03509c037a09c9076dda44)|\n![](CDN_BASE_URL/f67f064593f982711104693ae4686716)  \n$2$| ![](CDN_BASE_URL/e255209e458ced6bc4506880eff20f51)|\n![](CDN_BASE_URL/bd025bd4677e0b4aa572053845638281)  \n$3$| ![](CDN_BASE_URL/201da19f0948f088eeec88037834610e)|\n![](CDN_BASE_URL/7190a38dd77c4ed23d9567462fd4f2f2)  \n  \nNote that after the first operation, the graph has already become cool, and\nthere are two extra operations. As the graph is still cool after the two extra\noperations, this is a valid answer."
    },
    {
        "problem_id": "2029E",
        "url": "https://codeforces.com/problemset/problem/2029/E",
        "title": "Common Generator",
        "rating": 2100,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "For two integers $x$ and $y$ ($x,y\\ge 2$), we will say that\n$x$ is a generator of $y$ if and only if $x$ can be transformed to\n$y$ by performing the following operation some number of times (possibly\nzero):\n\n  * Choose a divisor $d$ ($d\\ge 2$) of $x$, then increase $x$ by $d$. \n\nFor example,\n\n  * $3$ is a generator of $8$ since we can perform the following operations: $3 \\xrightarrow{d = 3} 6 \\xrightarrow{d = 2} 8$; \n  * $4$ is a generator of $10$ since we can perform the following operations: $4 \\xrightarrow{d = 4} 8 \\xrightarrow{d = 2} 10$; \n  * $5$ is not a generator of $6$ since we cannot transform $5$ into $6$ with the operation above. \n\nNow, Kevin gives you an array $a$ consisting of $n$ pairwise distinct\nintegers ($a_i\\ge 2$).\n\nYou have to find an integer $x\\ge 2$ such that for each $1\\le i\\le n$,\n$x$ is a generator of $a_i$, or determine that such an integer does\nnot exist.",
        "input": "Each test contains multiple test cases. The first line of the input contains a\nsingle integer $t$ ($1\\le t\\le 10^4$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1\\le\nn\\le 10^5$) \u2014 the length of the array $a$.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($2\\le\na_i\\le 4\\cdot 10^5$) \u2014 the elements in the array $a$. It is guaranteed\nthat the elements are pairwise distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^5$.",
        "output": "For each test case, output a single integer $x$ \u2014 the integer you found.\nPrint $-1$ if there does not exist a valid $x$.\n\nIf there are multiple answers, you may output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n8 9 10\n4\n2 3 4 5\n2\n147 154\n5\n3 6 8 25 100000\n</pre></td>\n    <td><pre>2\n-1\n7\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, for $x=2$:\n\n  * $2$ is a generator of $8$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 4} 8$; \n  * $2$ is a generator of $9$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 2} 6 \\xrightarrow{d = 3} 9$. \n  * $2$ is a generator of $10$, since we can perform the following operations: $2 \\xrightarrow{d = 2} 4 \\xrightarrow{d = 2} 6 \\xrightarrow{d = 2} 8 \\xrightarrow{d = 2} 10$. \n\nIn the second test case, it can be proven that it is impossible to find a\ncommon generator of the four integers."
    },
    {
        "problem_id": "2029F",
        "url": "https://codeforces.com/problemset/problem/2029/F",
        "title": "Palindrome Everywhere",
        "rating": 2500,
        "tags": [
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 512,
        "description": "You are given a cycle with $n$ vertices numbered from $0$ to\n$n-1$. For each $0\\le i\\le n-1$, there is an undirected edge between\nvertex $i$ and vertex $((i+1)\\bmod n)$ with the color $c_i$\n($c_i=\\texttt{R}$ or $\\texttt{B}$).\n\nDetermine whether the following condition holds for every pair of vertices\n$(i,j)$ ($0\\le i<j\\le n-1$):\n\n  * There exists a palindrome route between vertex $i$ and vertex $j$. Note that the route may not be simple. Formally, there must exist a sequence $p=[p_0,p_1,p_2,\\ldots,p_m]$ such that:\n    * $p_0=i$, $p_m=j$; \n    * For each $0\\leq x\\le m-1$, either $p_{x+1}=(p_x+1)\\bmod n$ or $p_{x+1}=(p_{x}-1)\\bmod n$; \n    * For each $0\\le x\\le y\\le m-1$ satisfying $x+y=m-1$, the edge between $p_x$ and $p_{x+1}$ has the same color as the edge between $p_y$ and $p_{y+1}$.",
        "input": "Each test contains multiple test cases. The first line contains the number of\ntest cases $t$ ($1 \\le t \\le 10^5$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($3\\leq\nn\\leq10^6$) \u2014 the number of vertices in the cycle.\n\nThe second line contains a string $c$ of length $n$\n($c_i=\\texttt{R}$ or $\\texttt{B}$) \u2014 the color of each edge.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, print \"YES\" (without quotes) if there is a palindrome\nroute between any pair of nodes, and \"NO\" (without quotes) otherwise.\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>7\n5\nRRRRR\n5\nRRRRB\n5\nRBBRB\n6\nRBRBRB\n6\nRRBBRB\n5\nRBRBR\n12\nRRBRRBRRBRRB\n</pre></td>\n    <td><pre>YES\nYES\nYES\nNO\nNO\nYES\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, it is easy to show that there is a palindrome route\nbetween any two vertices.\n\nIn the second test case, for any two vertices, there exists a palindrome route\nwith only red edges.\n\nIn the third test case, the cycle is as follows:\n$0\\color{red}{\\overset{\\texttt{R}}{\\longleftrightarrow}}1\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}2\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}3\\color{red}{\\overset{\\texttt{R}}{\\longleftrightarrow}}4\\color{blue}{\\overset{\\texttt{B}}{\\longleftrightarrow}}0$.\nTake $(i,j)=(0,3)$ as an example, then\n$0\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}1\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}2\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}3\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}4\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}0\\color{blue}{\\overset{\\texttt{B}}{\\longrightarrow}}4\\color{red}{\\overset{\\texttt{R}}{\\longrightarrow}}3$\nis a palindrome route. Thus, the condition holds for $(i,j)=(0,3)$.\n\nIn the fourth test case, when $(i,j)=(0,2)$, there does not exist a\npalindrome route."
    },
    {
        "problem_id": "2029G",
        "url": "https://codeforces.com/problemset/problem/2029/G",
        "title": "Balanced Problem",
        "rating": 3000,
        "tags": [
            "data structures",
            "dp"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 1024,
        "description": "There is an array $a$ consisting of $n$ integers. Initially, all\nelements of $a$ are equal to $0$.\n\nKevin can perform several operations on the array. Each operation is one of\nthe following two types:\n\n  * Prefix addition \u2014 Kevin first selects an index $x$ ($1\\le x\\le n$), and then for each $1\\le j\\le x$, increases $a_j$ by $1$; \n  * Suffix addition \u2014 Kevin first selects an index $x$ ($1\\le x\\le n$), and then for each $x\\le j\\le n$, increases $a_j$ by $1$.\n\nIn the country of KDOI, people think that the integer $v$ is balanced.\nThus, Iris gives Kevin an array $c$ consisting of $n$ integers and\ndefines the beauty of the array $a$ as follows:\n\n  * Initially, set $b=0$; \n  * For each $1\\le i\\le n$, if $a_i=v$, add $c_i$ to $b$; \n  * The beauty of $a$ is the final value of $b$.\n\nKevin wants to maximize the beauty of $a$ after all the operations.\nHowever, he had already performed $m$ operations when he was sleepy. Now,\nhe can perform an arbitrary number (possibly zero) of new operations.\n\nYou have to help Kevin find the maximum possible beauty if he optimally\nperforms the new operations.\n\nHowever, to make sure that you are not just rolling the dice, Kevin gives you\nan integer $V$, and you need to solve the problem for each $1\\le v\\le\nV$.",
        "input": "Each test contains multiple test cases. The first line of the input contains a\nsingle integer $t$ ($1\\le t\\le 1000$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and\n$V$ ($1\\le n, m\\le 2\\cdot 10^5$, $1\\le V\\le 2000$) \u2014 the length of\nthe array $a$, the number of initial operations, and the number that Kevin\ngives you.\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1\\le\nc_i\\le 10^9$) \u2014 the elements in the array $c$.\n\nThen $m$ lines follow, the $i$-th line containing a character $op$\nand an integer $x$ ($op=\\mathtt{L}$ or $\\mathtt{R}$, $1\\le x\\le\nn$) \u2014 the type of the $i$-th operation and the selected index.\n\n  * If $op=\\mathtt{L}$, this operation is a prefix addition on index $x$; \n  * If $op=\\mathtt{R}$, this operation is a suffix addition on index $x$. \n\nIt is guaranteed that:\n\n  * the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$; \n  * the sum of $m$ over all test cases does not exceed $2\\cdot 10^5$; \n  * the sum of $V^2$ over all test cases does not exceed $4\\cdot 10^6$.",
        "output": "For each test case, output $V$ integers in a single line, the $i$-th\ninteger denoting the maximum possible beauty after Kevin performs some new\noperations when $v=i$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3 3 2\n1 2 4\nL 3\nR 3\nL 1\n3 3 2\n5 1 4\nL 3\nR 3\nL 1\n5 4 5\n1 1 1 1 1\nL 3\nR 2\nL 5\nL 4\n10 12 9\n10 9 8 7 6 5 4 3 2 1\nL 2\nL 4\nR 4\nR 4\nL 6\nR 8\nL 3\nL 2\nR 1\nR 10\nL 8\nL 1\n1 1 4\n1000000000\nL 1\n</pre></td>\n    <td><pre>2 6\n1 9\n0 1 3 5 5\n0 0 0 6 25 32 35 44 51\n1000000000 1000000000 1000000000 1000000000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the array $a$ changes as follows for the initial\noperations: $[0, 0, 0] \\xrightarrow{\\mathtt{L}\\ 3} [1, 1, 1]\n\\xrightarrow{\\mathtt{R}\\ 3} [1, 1, 2] \\xrightarrow{\\mathtt{L}\\ 1} [2, 1,\n2]$.\n\n  * For $v=1$, it is optimal to not perform any new operations, and the beauty is $b=c_2=2$; \n  * For $v=2$, it is optimal to perform a prefix addition operation on index $2$. After that, $a$ becomes $[3,2,2]$, and the beauty is $b=c_2+c_3=6$. \n\nIn the second test case, for both $v=1$ and $v=2$, it is optimal to\nnot perform any new operations."
    },
    {
        "problem_id": "2029H",
        "url": "https://codeforces.com/problemset/problem/2029/H",
        "title": "Message Spread",
        "rating": 3500,
        "tags": [
            "bitmasks",
            "combinatorics",
            "dp"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 12000,
        "memory_limit_mb": 1024,
        "description": "Given is an undirected graph with $n$ vertices and $m$ edges. Each\nedge connects two vertices $(u, v)$ and has a probability of\n$\\frac{p}{q}$ of appearing each day.\n\nInitially, vertex $1$ has a message. At the end of the day, a vertex has a\nmessage if and only if itself or at least one of the vertices adjacent to it\nhad the message the day before. Note that each day, each edge chooses its\nappearance independently.\n\nCalculate the expected number of days before all the vertices have the\nmessage, modulo $998\\,244\\,353$.",
        "input": "The first line contains two integers $n$ and $m$ ($1\\leq n\\leq\n21$, $n-1\\leq m\\leq\\frac{n(n-1)}{2}$).\n\nThen $m$ lines follow, each containing four integers $u$, $v$,\n$p$, and $q$ ($1\\leq u\\neq v\\leq n$, $1\\leq\np<q<998\\,244\\,353$, $\\gcd(p,q)=1$) \u2014 there is an undirected edge between\n$u$ and $v$, and it has a probability of appearance of\n$\\frac{p}{q}$ each day.\n\nIt is guaranteed that there are no self-loops or multiple-edges in the graph\nand that the graph is connected if all of the edges appear.\n\nAdditional constraint in the input: Let $g_{i,j}$ be the probability of\nappearance of the edge between $i$ and $j$ ($g_{i,j}=0$ if there\nis no edge between $i$ and $j$). It is guaranteed that for any\n$S\\subseteq\\\\{1,2,\\ldots,n\\\\}$ ($|S|\\ge 1$), $$ \\prod_{i\\in\nS}\\left(\\prod_{j\\in\\\\{1,2,\\ldots,n\\\\}\\setminus\nS}(1-g_{i,j})\\right)\\not\\equiv1\\pmod{998\\,244\\,353}. $$",
        "output": "Print a single integer in the only line of the output \u2014 the expected number of\ndays, modulo $998\\,244\\,353$.\n\nFormally, let $M = 998\\,244\\,353$. It can be shown that the exact answer\ncan be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$\nand $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the\ninteger equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an\ninteger $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2 1\n1 2 1 10\n</pre></td>\n    <td><pre>10</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3 3\n1 2 1 2\n1 3 1 2\n2 3 1 2\n</pre></td>\n    <td><pre>887328316</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>1 0\n</pre></td>\n    <td><pre>0</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5 8\n1 2 1 11\n1 3 2 11\n1 4 3 11\n1 5 4 11\n2 4 5 11\n2 5 6 11\n3 4 7 11\n4 5 8 11\n</pre></td>\n    <td><pre>469993557</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>21 22\n1 2 3 4\n2 3 4 5\n3 4 5 6\n5 6 7 8\n6 7 8 9\n7 8 9 10\n8 9 2 3\n9 10 3 4\n10 11 4 5\n11 12 5 6\n12 13 6 7\n13 14 7 8\n14 15 8 9\n15 16 9 10\n16 17 2 3\n17 18 3 4\n18 19 4 5\n19 20 5 6\n20 21 6 7\n1 10 100 1001\n15 4 147 220\n4 11 1 998244352\n</pre></td>\n    <td><pre>299529765</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test, the answer is equal to the expected number of days before\nthe only edge in the graph first appears, and that is $\\frac{1}{0.1}=10$.\n\nIn the second test, the answer is equal to $\\frac{20}{9}$ before it is\ntaken modulo $998\\,244\\,353$.\n\nIn the third test, the only vertex already has the message, so the answer is\n$0$."
    },
    {
        "problem_id": "2029I",
        "url": "https://codeforces.com/problemset/problem/2029/I",
        "title": "Variance Challenge",
        "rating": 3400,
        "tags": [
            "flows",
            "graphs",
            "greedy"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 6000,
        "memory_limit_mb": 256,
        "description": "Kevin has recently learned the definition of variance. For an array $a$ of\nlength $n$, the variance of $a$ is defined as follows:\n\n  * Let $x=\\dfrac{1}{n}\\displaystyle\\sum_{i=1}^n a_i$, i.e., $x$ is the mean of the array $a$; \n  * Then, the variance of $a$ is $$ V(a)=\\frac{1}{n}\\sum_{i=1}^n(a_i-x)^2. $$ \n\nNow, Kevin gives you an array $a$ consisting of $n$ integers, as well\nas an integer $k$. You can perform the following operation on $a$:\n\n  * Select an interval $[l,r]$ ($1\\le l\\le r\\le n$), then for each $l\\le i\\le r$, increase $a_i$ by $k$. \n\nFor each $1\\le p\\le m$, you have to find the minimum possible variance of\n$a$ after exactly $p$ operations are performed, independently for each\n$p$.\n\nFor simplicity, you only need to output the answers multiplied by $n^2$.\nIt can be proven that the results are always integers.",
        "input": "Each test contains multiple test cases. The first line of the input contains a\nsingle integer $t$ ($1\\le t\\le 100$) \u2014 the number of test cases. The\ndescription of test cases follows.\n\nThe first line of each test case contains three integers $n$, $m$, and\n$k$ ($1\\le n,m\\le 5000$, $\\color{red}{n\\cdot m\\le 2\\cdot 10^4}$,\n$1\\le k\\le 10^5$) \u2014 the length of the array $a$, the maximum number of\noperations, and the number you add to $a_i$ each time, respectively.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots, a_n$ ($1\\le\na_i\\le 10^5$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all tests does not exceed\n$2\\cdot 10^4$.",
        "output": "For each test case, output $m$ integers in a single line, the $p$-th\ninteger denoting the minimum possible variance of $a$ when exactly $p$\noperations are performed, multiplied by $n^2$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9\n3 2 1\n1 2 2\n3 2 2\n1 2 2\n10 2 1\n10 1 1 1 1 10 1 1 1 1\n6 8 2\n1 1 4 5 1 3\n8 8 7\n20 43 24 2 4 3 20 43\n8 8 3\n20 43 24 2 4 3 20 43\n10 12 1\n5 3 3 5 4 1 8 1 1 1\n13 10 100000\n1 2 3 4 5 6 7 8 9 10 11 5 4\n10 5 10000\n2308 9982 4435 3310 100000 9 7 8100 1919 100000\n</pre></td>\n    <td><pre>0 0\n2 2\n1161 1024\n53 21 21 5 5 5 5 5\n10608 6912 4448 3104 1991 1312 535 304\n13248 11184 9375 7815 6447 5319 4383 3687\n385 316 269 224 181 156 124 101 80 56 41 29\n1486 1486 1486 1486 1486 1486 1486 1486 1486 1486\n134618047140 119919447140 107020847140 93922247140 82623647140\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case:\n\n  * For $p = 1$, you can perform the operation on $[1, 1]$, changing $a$ from $[1, 2, 2]$ to $[2, 2, 2]$. Since all of the elements are equal, the variance is equal to $0$. \n  * For $p = 2$, you can perform the operation on $[1, 3]$ and then $[1, 1]$, changing $a$ from $[1, 2, 2]$ to $[2, 3, 3]$ to $[3, 3, 3]$. Since all of the elements are equal, the variance is equal to $0$. \n\nIn the second test case, some possible optimal choices are:\n\n  * $p=1$: $[\\underline{1,}\\,2,2]\\to [3,2,2]$; \n  * $p=2$: $[1,\\underline{2,2}] \\to [\\underline{1,}\\,4,4] \\to [3,4,4]$. \n\nIn the third test case, some possible optimal choices are:\n\n  * $p=1$: $[10,\\underline{1,1,1,1,10,1,1,1,1}]\\to[10,2,2,2,2,11,2,2,2,2]$; \n  * $p=2$: $[10,1,1,1,1,10,\\underline{1,1,1,1}] \\to [10,\\underline{1,1,1,1},10,2,2,2,2] \\to [10,2,2,2,2,10,2,2,2,2]$. \n\nIn the eighth test case, the optimal choice for all $p$ is to perform the\noperation on the whole array $p$ times."
    },
    {
        "problem_id": "2030A",
        "url": "https://codeforces.com/problemset/problem/2030/A",
        "title": "A Gift From Orangutan",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "While exploring the jungle, you have bumped into a rare orangutan with a bow\ntie! You shake hands with the orangutan and offer him some food and water. In\nreturn...\n\nThe orangutan has gifted you an array $a$ of length $n$. Using\n$a$, you will construct two arrays $b$ and $c$, both containing\n$n$ elements, in the following manner:\n\n  * $b_i = \\min(a_1, a_2, \\ldots, a_i)$ for each $1 \\leq i \\leq n$. \n  * $c_i = \\max(a_1, a_2, \\ldots, a_i)$ for each $1 \\leq i \\leq n$. \n\nDefine the score of $a$ as $\\sum_{i=1}^n c_i - b_i$ (i.e. the sum of\n$c_i - b_i$ over all $1 \\leq i \\leq n$). Before you calculate the\nscore, you can shuffle the elements of $a$ however you want.\n\nFind the maximum score that you can get if you shuffle the elements of $a$\noptimally.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 100$) \u2014 the number of test\ncases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq\n1000$) \u2014 the number of elements in $a$.\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\leq a_i \\leq 1000$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$1000$.",
        "output": "For each test case, output the maximum score that you can get.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1\n69\n3\n7 6 5\n5\n1 1 1 2 2\n</pre></td>\n    <td><pre>0\n4\n4\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there is no other way to rearrange $a$. So, $b =\n[69]$ and $c = [69]$. The only possible score is $69 - 69 = 0$.\n\nIn the second test case, you can rearrange $a$ as $[7, 5, 6]$. Here,\n$b = [7, 5, 5]$ and $c = [7, 7, 7]$. The score in this case is $(7 -\n7) + (7 - 5) + (7 - 5) = 4$. It can be shown this is the maximum possible\nscore."
    },
    {
        "problem_id": "2030B",
        "url": "https://codeforces.com/problemset/problem/2030/B",
        "title": "Minimise Oneness",
        "rating": 800,
        "tags": [
            "combinatorics",
            "constructive algorithms",
            "games",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1500,
        "memory_limit_mb": 256,
        "description": "For an arbitrary binary string $t$$^{\\text{\u2217}}$, let $f(t)$ be the\nnumber of non-empty subsequences$^{\\text{\u2020}}$ of $t$ that contain only\n$\\mathtt{0}$, and let $g(t)$ be the number of non-empty subsequences\nof $t$ that contain at least one $\\mathtt{1}$.\n\nNote that for $f(t)$ and for $g(t)$, each subsequence is counted as\nmany times as it appears in $t$. E.g., $f(\\mathtt{000}) = 7,\ng(\\mathtt{100}) = 4$.\n\nWe define the oneness of the binary string $t$ to be $|f(t)-g(t)|$,\nwhere for an arbitrary integer $z$, $|z|$ represents the absolute\nvalue of $z$.\n\nYou are given a positive integer $n$. Find a binary string $s$ of\nlength $n$ such that its oneness is as small as possible. If there are\nmultiple strings, you can print any of them.\n\n$^{\\text{\u2217}}$A binary string is a string that only consists of characters\n$\\texttt{0}$ and $\\texttt{1}$.\n\n$^{\\text{\u2020}}$A sequence $a$ is a subsequence of a sequence $b$ if\n$a$ can be obtained from $b$ by the deletion of several (possibly,\nzero or all) elements. For example, subsequences of $\\mathtt{1011101}$ are\n$\\mathtt{0}$, $\\mathtt{1}$, $\\mathtt{11111}$, $\\mathtt{0111}$,\nbut not $\\mathtt{000}$ nor $\\mathtt{11100}$.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains an integer $n$ ($1 \\leq n \\leq\n2\\cdot10^5$) \u2014 the length of $s$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2\\cdot10^5$.",
        "output": "For each test case, output $s$ on a new line. If multiple answers exist,\noutput any.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n1\n2\n3\n</pre></td>\n    <td><pre>0\n01\n010\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, for the example output, $f(t)=1$ because there is\none subsequence that contains only $\\mathtt{0}$ ($\\mathtt{0}$), and\n$g(t)=0$ because there are no subsequences that contain at least one\n$1$. The oneness is $|1-0|=1$. The output $\\mathtt{1}$ is correct\nas well because its oneness is $|0-1|=1$.\n\nFor the example output of the second test case, $f(t)=1$ because there is\none non-empty subsequence that contains only $\\mathtt{0}$, and\n$g(t)=2$ because there are two non-empty subsequences that contain at\nleast one $\\mathtt{1}$ ($\\mathtt{01}$ and $\\mathtt{1}$). The\noneness is thus $|1-2|=1$. It can be shown that $1$ is the minimum\npossible value of its oneness over all possible binary strings of size\n$2$."
    },
    {
        "problem_id": "2030C",
        "url": "https://codeforces.com/problemset/problem/2030/C",
        "title": "A TRUE Battle",
        "rating": 1100,
        "tags": [
            "brute force",
            "games",
            "greedy"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alice and Bob are playing a game. There is a list of $n$ booleans, each of\nwhich is either true or false, given as a binary string $^{\\text{\u2217}}$ of\nlength $n$ (where $\\texttt{1}$ represents true, and $\\texttt{0}$\nrepresents false). Initially, there are no operators between the booleans.\n\nAlice and Bob will take alternate turns placing and or or between the\nbooleans, with Alice going first. Thus, the game will consist of $n-1$\nturns since there are $n$ booleans. Alice aims for the final statement to\nevaluate to true, while Bob aims for it to evaluate to false. Given the list\nof boolean values, determine whether Alice will win if both players play\noptimally.\n\nTo evaluate the final expression, repeatedly perform the following steps until\nthe statement consists of a single true or false:\n\n  * If the statement contains an and operator, choose any one and replace the subexpression surrounding it with its evaluation. \n  * Otherwise, the statement contains an or operator. Choose any one and replace the subexpression surrounding the or with its evaluation. \n\nFor example, the expression true or false and false is evaluated as true or\n(false and false) $=$ true or false $=$ true. It can be shown that the\nresult of any compound statement is unique.\n\n$^{\\text{\u2217}}$A binary string is a string that only consists of characters\n$\\texttt{0}$ and $\\texttt{1}$",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of\ntest cases.\n\nThe first line of each test case contains an integer $n$ ($2 \\leq n \\leq\n2 \\cdot 10^5$) \u2014 the length of the string.\n\nThe second line contains a binary string of length $n$, consisting of\ncharacters $\\texttt{0}$ and $\\texttt{1}$ \u2014 the list of boolean values.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each testcase, output \"YES\" (without quotes) if Alice wins, and \"NO\"\n(without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\"\nand \"Yes\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2\n11\n3\n010\n12\n101111111100\n10\n0111111011\n8\n01000010\n</pre></td>\n    <td><pre>YES\nNO\nYES\nYES\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, Alice can place and between the two booleans. The game\nends as there are no other places to place operators, and Alice wins because\ntrue and true is true.\n\nIn the second testcase, Alice can place or between the middle true and the\nleft false. Bob can place and between the middle true and the right false. The\nstatement false or true and false is false.\n\nNote that these examples may not be the best strategies for either Alice or\nBob."
    },
    {
        "problem_id": "2030D",
        "url": "https://codeforces.com/problemset/problem/2030/D",
        "title": "QED's Favorite Permutation",
        "rating": 1700,
        "tags": [
            "data structures",
            "implementation",
            "sortings"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "QED is given a permutation$^{\\text{\u2217}}$ $p$ of length $n$. He also\nhas a string $s$ of length $n$ containing only characters\n$\\texttt{L}$ and $\\texttt{R}$. QED only likes permutations that are\nsorted in non-decreasing order. To sort $p$, he can select any of the\nfollowing operations and perform them any number of times:\n\n  * Choose an index $i$ such that $s_i = \\texttt{L}$. Then, swap $p_i$ and $p_{i-1}$. It is guaranteed that $s_1 \\neq \\texttt{L}$. \n  * Choose an index $i$ such that $s_i = \\texttt{R}$. Then, swap $p_i$ and $p_{i+1}$. It is guaranteed that $s_n \\neq \\texttt{R}$. \n\nHe is also given $q$ queries. In each query, he selects an index $i$\nand changes $s_i$ from $\\texttt{L}$ to $\\texttt{R}$ (or from\n$\\texttt{R}$ to $\\texttt{L}$). Note that the changes are persistent.\n\nAfter each query, he asks you if it is possible to sort $p$ in non-\ndecreasing order by performing the aforementioned operations any number of\ntimes. Note that before answering each query, the permutation $p$ is reset\nto its original form.\n\n$^{\\text{\u2217}}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of\ntest cases.\n\nThe first line of each test case contains two integers $n$ and $q$\n($3 \\leq n \\leq 2 \\cdot 10^5$, $1 \\leq q \\leq 2 \\cdot 10^5$) \u2013 the\nlength of the permutation and the number of queries.\n\nThe following line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1\n\\leq p_i \\leq n$, $p$ is a permutation).\n\nThe following line contains $n$ characters $s_1s_2 \\ldots s_n$. It is\nguaranteed that $s_i$ is either $\\texttt{L}$ or $\\texttt{R}$,\n$s_1 = \\texttt{R}$, and $s_n = \\texttt{L}$.\n\nThe following $q$ lines contain an integer $i$ ($2 \\leq i \\leq\nn-1$), denoting that $s_i$ is changed from $\\texttt{L}$ to\n$\\texttt{R}$ (or from $\\texttt{R}$ to $\\texttt{L}$).\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does\nnot exceed $2 \\cdot 10^5$.",
        "output": "For each query, output \"YES\" (without quotes) if it is possible, and \"NO\"\n(without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\"\nand \"Yes\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5 3\n1 4 2 5 3\nRLRLL\n2\n4\n3\n8 5\n1 5 2 4 8 3 6 7\nRRLLRRRL\n4\n3\n5\n3\n4\n6 2\n1 2 3 4 5 6\nRLRLRL\n4\n5\n</pre></td>\n    <td><pre>YES\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, $s = \\texttt{RRRLL}$ after the first query. QED may\nsort $p$ using the following operations:\n\n  * Initially, $p = [1,4,2,5,3]$. \n  * Select $i = 2$ and swap $p_2$ with $p_{3}$. Now, $p = [1,2,4,5,3]$. \n  * Select $i = 5$ and swap $p_5$ with $p_{4}$. Now, $p = [1,2,4,3,5]$. \n  * Select $i = 4$ and swap $p_4$ with $p_{3}$. Now, $p = [1,2,3,4,5]$, which is in non-decreasing order. \n\nIt can be shown that it is impossible to sort the array after all three\nupdates of the first testcase."
    },
    {
        "problem_id": "2030E",
        "url": "https://codeforces.com/problemset/problem/2030/E",
        "title": "MEXimize the Score",
        "rating": 2200,
        "tags": [
            "combinatorics",
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Suppose we partition the elements of an array $b$ into any number $k$\nof non-empty multisets $S_1, S_2, \\ldots, S_k$, where $k$ is an\narbitrary positive integer. Define the score of $b$ as the maximum value\nof $\\operatorname{MEX}(S_1)$$^{\\text{\u2217}}$$ + \\operatorname{MEX}(S_2)\n+ \\ldots + \\operatorname{MEX}(S_k)$ over all possible partitions of $b$\nfor any integer $k$.\n\nEnvy is given an array $a$ of size $n$. Since he knows that\ncalculating the score of $a$ is too easy for you, he instead asks you to\ncalculate the sum of scores of all $2^n - 1$ non-empty subsequences of\n$a$.$^{\\text{\u2020}}$ Since this answer may be large, please output it\nmodulo $998\\,244\\,353$.\n\n$^{\\text{\u2217}}$$\\operatorname{MEX}$ of a collection of integers $c_1,\nc_2, \\ldots, c_k$ is defined as the smallest non-negative integer $x$\nthat does not occur in the collection $c$. For example,\n$\\operatorname{MEX}([0,1,2,2]) = 3$ and $\\operatorname{MEX}([1,2,2]) =\n0$\n\n$^{\\text{\u2020}}$A sequence $x$ is a subsequence of a sequence $y$ if\n$x$ can be obtained from $y$ by deleting several (possibly, zero or\nall) elements.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq\n2 \\cdot 10^5$) \u2014 the length of $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\leq a_i < n$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output the answer, modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3\n0 0 1\n4\n0 0 1 1\n5\n0 0 1 2 2\n4\n1 1 1 1\n</pre></td>\n    <td><pre>11\n26\n53\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, we must consider seven subsequences:\n\n  * $[0]$: The score is $1$. \n  * $[0]$: The score is $1$. \n  * $[1]$: The score is $0$. \n  * $[0,0]$: The score is $2$. \n  * $[0,1]$: The score is $2$. \n  * $[0,1]$: The score is $2$. \n  * $[0,0,1]$: The score is $3$. \n\nThe answer for the first testcase is $1+1+2+2+2+3=11$.\n\nIn the last testcase, all subsequences have a score of $0$."
    },
    {
        "problem_id": "2030F",
        "url": "https://codeforces.com/problemset/problem/2030/F",
        "title": "Orangutan Approved Subarrays",
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 512,
        "description": "Suppose you have an array $b$. Initially, you also have a set $S$ that\ncontains all distinct elements of $b$. The array $b$ is called\norangutan-approved if it can be emptied by repeatedly performing the following\noperation:\n\n  * In one operation, select indices $l$ and $r$ ($1 \\leq l \\leq r \\leq |b|$) such that $v = b_l = b_{l+1} = \\ldots = b_r$ and $v$ is present in $S$. Remove $v$ from $S$, and simultaneously remove all $b_i$ such that $l \\leq i \\leq r$. Then, reindex the elements $b_{r+1}, b_{r+2}, \\ldots$ as $b_l, b_{l+1}, \\ldots$ accordingly. \n\nYou are given an array $a$ of length $n$ and $q$ queries.\n\nEach query consists of two indices $l$ and $r$ ($1 \\le l \\le r \\le\nn$), and you need to determine whether or not the subarray $a_{l},\na_{l+1}, \\ldots, a_r$ is orangutan-approved.",
        "input": "The first line contains $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of\ntest cases.\n\nThe first line of each test case contains integers $n$ and $q$ ($1\n\\leq n,q \\leq 2 \\cdot 10^5$) \u2014 the size of $a$ and the number of\nqueries, respectively.\n\nThe following line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\leq a_i \\leq n$) \u2014 the elements of the array $a$.\n\nThe following $q$ lines contain two integers $l$ and $r$ \u2014 the\nendpoints of the subarray for each query ($1 \\leq l \\leq r \\leq n$).\n\nIt is guaranteed that the sum of $n$ and $q$ over all test cases does\nnot exceed $2 \\cdot 10^5$.",
        "output": "For each query, output \"YES\" (without quotes) if the subarray from $l$ to\n$r$ is orangutan-approved, and \"NO\" (without quotes) otherwise.\n\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yES\", \"yes\"\nand \"Yes\" will be recognized as a positive response).",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4 2\n1 2 2 1\n1 4\n1 3\n5 3\n1 2 1 2 1\n2 5\n3 5\n1 3\n8 4\n1 2 3 2 1 3 2 3\n1 5\n2 8\n3 5\n6 8\n</pre></td>\n    <td><pre>YES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first query of the first testcase, the answer is YES.\n\n  * Initially, $S=\\\\{1,2\\\\}$ and $b=[1,2,2,1]$ \n  * Select $l=2$ and $r=3$. Since $b_2=b_3=2$ is in $S$, we may erase $b_2$ and $b_3$ from the array, as well as erasing $2$ from $S$. The set $S$ becomes $\\\\{1\\\\}$ and the array becomes $[1,1]$. \n  * Select $l=1$ and $r=2$. Since $b_1=b_2=1$ is in $S$, we may erase $b_1$ and $b_2$ from the array, as well as erasing $1$ from $S$. The set $S$ becomes $\\\\{\\\\}$ and the array becomes $[]$. \n  * Since the array is now empty, we can say the original array is orangutan-approved. \n\nIn the first query of the second testcase, the answer is NO, because it can be\nshown that the subarray $[2,1,2,1]$ cannot become empty through any\nsequence of valid operations."
    },
    {
        "problem_id": "2030G1",
        "url": "https://codeforces.com/problemset/problem/2030/G1",
        "title": "The Destruction of the Universe (Easy Version)",
        "rating": 2900,
        "tags": [
            "combinatorics",
            "greedy",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "This is the easy version of the problem. In this version, $n \\leq 5000$.\nYou can only make hacks if both versions of the problem are solved.\n\nOrangutans are powerful beings\u2014so powerful that they only need $1$ unit of\ntime to destroy every vulnerable planet in the universe!\n\nThere are $n$ planets in the universe. Each planet has an interval of\nvulnerability $[l, r]$, during which it will be exposed to destruction by\norangutans. Orangutans can also expand the interval of vulnerability of any\nplanet by $1$ unit.\n\nSpecifically, suppose the expansion is performed on planet $p$ with\ninterval of vulnerability $[l_p, r_p]$. Then, the resulting interval of\nvulnerability may be either $[l_p - 1, r_p]$ or $[l_p, r_p + 1]$.\n\nGiven a set of planets, orangutans can destroy all planets if the intervals of\nvulnerability of all planets in the set intersect at least one common point.\nLet the score of such a set denote the minimum number of expansions that must\nbe performed.\n\nOrangutans are interested in the sum of scores of all non-empty subsets of the\nplanets in the universe. As the answer can be large, output it modulo\n$998\\,244\\,353$.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 1000$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq\n5000$) \u2014 the number of planets in the universe.\n\nThe following $n$ lines contain two integers $l_i$ and $r_i$ ($1\n\\leq l_i \\leq r_i \\leq n$) \u2014 the initial interval of vulnerability of the\n$i$-th planet.\n\nIt is guaranteed that the sum of $n$ does not exceed $5000$ over all\ntest cases.",
        "output": "For each test case, output an integer \u2014 the sum of scores to destroy all non-\nempty subsets of the planets in the universe, modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n1 1\n2 3\n3 3\n4\n1 4\n2 3\n2 4\n1 1\n5\n1 2\n2 3\n3 4\n4 5\n1 5\n</pre></td>\n    <td><pre>5\n6\n24\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, there are seven non-empty subsets of planets we must\nconsider:\n\n  * For each of the subsets $\\\\{[1,1]\\\\}, \\\\{[2,3]\\\\}, \\\\{[3,3]\\\\}$, the score is $0$. \n  * For the subset $\\\\{[2,3], [3,3]\\\\}$, the score is $0$, because the point $3$ is already contained in both planets' interval of vulnerability. \n  * For the subset $\\\\{[1,1], [2,3]\\\\}$, the score is $1$. By using one operation on changing the interval of vulnerability of the second planet to be $[1,3]$, the two planets now both have the point $1$ in their interval. \n  * For the subset $\\\\{[1,1], [3,3]\\\\}$, the score is $2$. By using two operations on changing the interval of vulnerability of the first planet to be $[1,3]$, the two planets now both have the point $3$ in their interval. \n  * For the subset $\\\\{[1,1], [2,3], [3,3]\\\\}$, the score is $2$. By using one operation on changing the interval of vulnerability of the first planet to be $[1,2]$ and one operation on changing the interval of vulnerability of the third planet to $[2,3]$, all three planets will have the point $2$ in their interval. \n\nThe sum of scores of all non-empty subsets of the first testcase is $0 \\cdot\n4 + 1 \\cdot 1 + 2\\cdot2 = 5$."
    },
    {
        "problem_id": "2030G2",
        "url": "https://codeforces.com/problemset/problem/2030/G2",
        "title": "The Destruction of the Universe (Hard Version)",
        "rating": 3100,
        "tags": [
            "combinatorics",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 512,
        "description": "This is the hard version of the problem. In this version, $n \\leq 10^6$.\nYou can only make hacks if both versions of the problem are solved.\n\nOrangutans are powerful beings\u2014so powerful that they only need $1$ unit of\ntime to destroy every vulnerable planet in the universe!\n\nThere are $n$ planets in the universe. Each planet has an interval of\nvulnerability $[l, r]$, during which it will be exposed to destruction by\norangutans. Orangutans can also expand the interval of vulnerability of any\nplanet by $1$ unit.\n\nSpecifically, suppose the expansion is performed on planet $p$ with\ninterval of vulnerability $[l_p, r_p]$. Then, the resulting interval of\nvulnerability may be either $[l_p - 1, r_p]$ or $[l_p, r_p + 1]$.\n\nGiven a set of planets, orangutans can destroy all planets if the intervals of\nvulnerability of all planets in the set intersect at least one common point.\nLet the score of such a set denote the minimum number of expansions that must\nbe performed.\n\nOrangutans are interested in the sum of scores of all non-empty subsets of the\nplanets in the universe. As the answer can be large, output it modulo\n$998\\,244\\,353$.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq\n10^6$) \u2014 the number of planets in the universe.\n\nThe following $n$ lines contain two integers $l_i$ and $r_i$ ($1\n\\leq l_i \\leq r_i \\leq n$) \u2014 the initial interval of vulnerability of the\n$i$-th planet.\n\nIt is guaranteed that the sum of $n$ does not exceed $10^6$ over all\ntest cases.",
        "output": "For each test case, output an integer \u2014 the sum of scores to destroy all non-\nempty subsets of the planets in the universe, modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3\n1 1\n2 3\n3 3\n4\n1 4\n2 3\n2 4\n1 1\n5\n1 2\n2 3\n3 4\n4 5\n1 5\n</pre></td>\n    <td><pre>5\n6\n24\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first testcase, there are seven non-empty subsets of planets we must\nconsider:\n\n  * For each of the subsets $\\\\{[1,1]\\\\}, \\\\{[2,3]\\\\}, \\\\{[3,3]\\\\}$, the score is $0$. \n  * For the subset $\\\\{[2,3], [3,3]\\\\}$, the score is $0$, because the point $3$ is already contained in both planets' interval of vulnerability. \n  * For the subset $\\\\{[1,1], [2,3]\\\\}$, the score is $1$. By using one operation on changing the interval of vulnerability of the second planet to be $[1,3]$, the two planets now both have the point $1$ in their interval. \n  * For the subset $\\\\{[1,1], [3,3]\\\\}$, the score is $2$. By using two operations on changing the interval of vulnerability of the first planet to be $[1,3]$, the two planets now both have the point $3$ in their interval. \n  * For the subset $\\\\{[1,1], [2,3], [3,3]\\\\}$, the score is $2$. By using one operation on changing the interval of vulnerability of the first planet to be $[1,2]$ and one operation on changing the interval of vulnerability of the third planet to $[2,3]$, all three planets will have the point $2$ in their interval. \n\nThe sum of scores of all non-empty subsets of the first testcase is $0 \\cdot\n4 + 1 \\cdot 1 + 2\\cdot2 = 5$."
    },
    {
        "problem_id": "2032A",
        "url": "https://codeforces.com/problemset/problem/2032/A",
        "title": "Circuit",
        "rating": 800,
        "tags": [
            "greedy",
            "implementation",
            "math",
            "number theory"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice has just crafted a circuit with $n$ lights and $2n$ switches.\nEach component (a light or a switch) has two states: on or off. The lights and\nswitches are arranged in a way that:\n\n  * Each light is connected to exactly two switches. \n  * Each switch is connected to exactly one light. It's unknown which light each switch is connected to. \n  * When all switches are off, all lights are also off. \n  * If a switch is toggled (from on to off, or vice versa), the state of the light connected to it will also toggle. \n\nAlice brings the circuit, which shows only the states of the $2n$\nswitches, to her sister Iris and gives her a riddle: what is the minimum and\nmaximum number of lights that can be turned on?\n\nKnowing her little sister's antics too well, Iris takes no more than a second\nto give Alice a correct answer. Can you do the same?",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 500$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 50$) \u2014 the number of lights in the circuit.\n\nThe second line of each test case contains $2n$ integers $a_1, a_2,\n\\ldots, a_{2n}$ ($0 \\le a_i \\le 1$) \u2014 the states of the switches in the\ncircuit. $a_i = 0$ means the $i$-th switch is off, and $a_i = 1$\nmeans the $i$-th switch is on.",
        "output": "For each test case, output two integers \u2014 the minimum and maximum number of\nlights, respectively, that can be turned on.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n1\n0 0\n1\n0 1\n1\n1 1\n3\n0 0 1 0 1 0\n3\n0 1 1 1 0 0\n</pre></td>\n    <td><pre>0 0\n1 1\n0 0\n0 2\n1 3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, there is only one light in the circuit, and no switch\nis on, so the light is certainly off.\n\nIn the second test case, there is only one light in the circuit, but one\nswitch connected to it is on, so the light is on.\n\nIn the third test case, there is only one light in the circuit, and both\nswitches are on, so the light is off as it was toggled twice.\n\nIn the fourth test case, to have no lights on, the switches can be arranged in\nthis way:\n\n  * Switch $1$ and switch $4$ are connected to light $1$. Since both switches are off, light $1$ is also off. \n  * Switch $2$ and switch $6$ are connected to light $2$. Since both switches are off, light $2$ is also off. \n  * Switch $3$ and switch $5$ are connected to light $3$. Both switches are on, so light $3$ is toggled twice from its initial off state, and thus also stays off. \n\nAnd to have $2$ lights on, the switches can be arranged in this way:\n\n  * Switch $1$ and switch $2$ are connected to light $1$. Since both switches are off, light $1$ is also off. \n  * Switch $3$ and switch $4$ are connected to light $2$. Since switch $3$ is on and switch $4$ is off, light $2$ is toggled once from its initial off state, so it is on. \n  * Switch $5$ and switch $6$ are connected to light $3$. Since switch $5$ is on and switch $6$ is off, light $3$ is toggled once from its initial off state, so it is on."
    },
    {
        "problem_id": "2032B",
        "url": "https://codeforces.com/problemset/problem/2032/B",
        "title": "Medians",
        "rating": 1100,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "You are given an array $a = [1, 2, \\ldots, n]$, where $n$ is odd, and\nan integer $k$.\n\nYour task is to choose an odd positive integer $m$ and to split $a$\ninto $m$ subarrays$^{\\dagger}$ $b_1, b_2, \\ldots, b_m$ such that:\n\n  * Each element of the array $a$ belongs to exactly one subarray. \n  * For all $1 \\le i \\le m$, $|b_i|$ is odd, i.e., the length of each subarray is odd. \n  * $\\operatorname{median}([\\operatorname{median}(b_1), \\operatorname{median}(b_2), \\ldots, \\operatorname{median}(b_m)]) = k$, i.e., the median$^{\\ddagger}$ of the array of medians of all subarrays must equal $k$. $\\operatorname{median}(c)$ denotes the median of the array $c$. \n\n$^{\\dagger}$A subarray of the array $a$ of length $n$ is the array\n$[a_l, a_{l + 1}, \\ldots, a_r]$ for some integers $1 \\le l \\le r \\le\nn$.\n\n$^{\\ddagger}$A median of the array of odd length is the middle element\nafter the array is sorted in non-decreasing order. For example:\n$\\operatorname{median}([1,2,5,4,3]) = 3$,\n$\\operatorname{median}([3,2,1]) = 2$,\n$\\operatorname{median}([2,1,2,1,2,2,2]) = 2$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 5000$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\le k \\le n < 2 \\cdot 10^5$, $n$ is odd) \u2014 the length of array\n$a$ and the desired median of the array of medians of all subarrays.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case:\n\n  * If there is no suitable partition, output $-1$ in a single line. \n  * Otherwise, in the first line, output an odd integer $m$ ($1 \\le m \\le n$), and in the second line, output $m$ distinct integers $p_1, p_2 , p_3 , \\ldots, p_m$ ($1 = p_1 < p_2 < p_3 < \\ldots < p_m \\le n$) \u2014 denoting the left borders of each subarray. \n\nIn detail, for a valid answer $[p_1, p_2, \\ldots, p_m]$:\n\n  * $b_1 = \\left[ a_{p_1}, a_{p_1 + 1}, \\ldots, a_{p_2 - 1} \\right]$ \n  * $b_2 = \\left[ a_{p_2}, a_{p_2 + 1}, \\ldots, a_{p_3 - 1} \\right]$ \n  * $\\ldots$ \n  * $b_m = \\left[ a_{p_m}, a_{p_m + 1}, \\ldots, a_n \\right]$. \n\nIf there are multiple solutions, you can output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1 1\n3 2\n3 3\n15 8\n</pre></td>\n    <td><pre>1\n1\n3\n1 2 3\n-1\n5\n1 4 7 10 13\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the given partition has $m = 1$ and $b_1 =\n[1]$. It is obvious that\n$\\operatorname{median}([\\operatorname{median}([1])]) =\n\\operatorname{median}([1]) = 1$.\n\nIn the second test case, the given partition has $m = 3$ and:\n\n  * $b_1 = [1]$ \n  * $b_2 = [2]$ \n  * $b_3 = [3]$ \n\nTherefore, $\\operatorname{median}([\\operatorname{median}([1]),\n\\operatorname{median}([2]), \\operatorname{median}([3])]) =\n\\operatorname{median}([1, 2, 3]) = 2$.\n\nIn the third test case, there is no valid partition for $k = 3$.\n\nIn the fourth test case, the given partition has $m = 5$ and:\n\n  * $b_1 = [1, 2, 3]$ \n  * $b_2 = [4, 5, 6]$ \n  * $b_3 = [7, 8, 9]$ \n  * $b_4 = [10, 11, 12]$ \n  * $b_5 = [13, 14, 15]$ \n\nTherefore, $\\operatorname{median}([\\operatorname{median}([1, 2, 3]),\n\\operatorname{median}([4, 5, 6]), \\operatorname{median}([7, 8, 9]),\n\\operatorname{median}([10, 11, 12]), \\operatorname{median}([13, 14, 15])]) =\n\\operatorname{median}([2, 5, 8, 11, 14]) = 8$."
    },
    {
        "problem_id": "2032C",
        "url": "https://codeforces.com/problemset/problem/2032/C",
        "title": "Trinity",
        "rating": 1400,
        "tags": [
            "binary search",
            "math",
            "sortings",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given an array $a$ of $n$ elements $a_1, a_2, \\ldots,\na_n$.\n\nYou can perform the following operation any number (possibly $0$) of\ntimes:\n\n  * Choose two integers $i$ and $j$, where $1 \\le i, j \\le n$, and assign $a_i := a_j$. \n\nFind the minimum number of operations required to make the array $a$\nsatisfy the condition:\n\n  * For every pairwise distinct triplet of indices $(x, y, z)$ ($1 \\le x, y, z \\le n$, $x \\ne y$, $y \\ne z$, $x \\ne z$), there exists a non-degenerate triangle with side lengths $a_x$, $a_y$ and $a_z$, i.e. $a_x + a_y > a_z$, $a_y + a_z > a_x$ and $a_z + a_x > a_y$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output a single integer \u2014 the minimum number of operations\nrequired.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n7\n1 2 3 4 5 6 7\n3\n1 3 2\n3\n4 5 3\n15\n9 3 8 1 6 5 3 8 2 1 4 2 9 4 7\n</pre></td>\n    <td><pre>3\n1\n0\n8\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, one of the possible series of operations would be:\n\n  * Assign $a_1 := a_4 = 4$. The array will become $[4, 2, 3, 4, 5, 6, 7]$. \n  * Assign $a_2 := a_5 = 5$. The array will become $[4, 5, 3, 4, 5, 6, 7]$. \n  * Assign $a_7 := a_1 = 4$. The array will become $[4, 5, 3, 4, 5, 6, 4]$. \n\nIt can be proven that any triplet of elements with pairwise distinct indices\nin the final array forms a non-degenerate triangle, and there is no possible\nanswer using less than $3$ operations.\n\nIn the second test case, we can assign $a_1 := a_2 = 3$ to make the array\n$a = [3, 3, 2]$.\n\nIn the third test case, since $3$, $4$ and $5$ are valid side\nlengths of a triangle, we don't need to perform any operation to the array."
    },
    {
        "problem_id": "2032D",
        "url": "https://codeforces.com/problemset/problem/2032/D",
        "title": "Genokraken",
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "data structures",
            "graphs",
            "implementation",
            "interactive",
            "trees",
            "two pointers"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem.\n\nUpon clearing the Waterside Area, Gretel has found a monster named Genokraken,\nand she's keeping it contained for her scientific studies.\n\nThe monster's nerve system can be structured as a tree$^{\\dagger}$ of\n$n$ nodes (really, everything should stop resembling trees all the\ntime$\\ldots$), numbered from $0$ to $n-1$, with node $0$ as\nthe root.\n\nGretel's objective is to learn the exact structure of the monster's nerve\nsystem \u2014 more specifically, she wants to know the values $p_1, p_2, \\ldots,\np_{n-1}$ of the tree, where $p_i$ ($0 \\le p_i < i$) is the direct\nparent node of node $i$ ($1 \\le i \\le n - 1$).\n\nShe doesn't know exactly how the nodes are placed, but she knows a few\nconvenient facts:\n\n  * If we remove root node $0$ and all adjacent edges, this tree will turn into a forest consisting of only paths$^{\\ddagger}$. Each node that was initially adjacent to the node $0$ will be the end of some path. \n  * The nodes are indexed in a way that if $1 \\le x \\le y \\le n - 1$, then $p_x \\le p_y$. \n  * Node $1$ has exactly two adjacent nodes (including the node $0$). \n\n![](CDN_BASE_URL/9e3efde5fa1c3b92802e71707f427f91)|\n![](CDN_BASE_URL/ba6c28030157828dcd682786de7f0527)|\n![](CDN_BASE_URL/bdeedf002bf19f7cf8b52abe474df823)  \n---|---|---  \nThe tree in this picture does not satisfy the condition, because if we remove\nnode $0$, then node $2$ (which was initially adjacent to the node\n$0$) will not be the end of the path $4-2-5$.| The tree in this\npicture does not satisfy the condition, because $p_3 \\le p_4$ must hold.|\nThe tree in this picture does not satisfy the condition, because node $1$\nhas only one adjacent node.  \n  \nGretel can make queries to the containment cell:\n\n  * \"? a b\" ($1 \\le a, b < n$, $a \\ne b$) \u2014 the cell will check if the simple path between nodes $a$ and $b$ contains the node $0$. \n\nHowever, to avoid unexpected consequences by overstimulating the creature,\nGretel wants to query at most $2n - 6$ times. Though Gretel is gifted, she\ncan't do everything all at once, so can you give her a helping hand?\n\n$^{\\dagger}$A tree is a connected graph where every pair of distinct nodes\nhas exactly one simple path connecting them.\n\n$^{\\ddagger}$A path is a tree whose vertices can be listed in the order\n$v_1, v_2, \\ldots, v_k$ such that the edges are $(v_i, v_{i+1})$ ($1\n\\le i < k$).",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 500$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n\n\\le 10^4$) \u2014 the number of nodes in Genokraken's nerve system.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^4$.",
        "output": "",
        "interaction": "For each test case, interaction starts by reading the integer $n$.\n\nThen you can make queries of the following type:\n\n  * \"? a b\" (without quotes) ($1 \\le a, b < n$, $a \\ne b$). \n\nAfter the query, read an integer $r$ \u2014 the answer to your query. You are\nallowed to use at most $2n - 6$ queries of this type.\n\n  * If the simple path between nodes $a$ and $b$ does not contain node $0$, you will get $r = 0$. \n  * If the simple path between nodes $a$ and $b$ contains node $0$, you will get $r = 1$. \n  * In case you make more than $2n-6$ queries or make an invalid query, you will get $r = -1$. You will need to terminate after this to get the \"Wrong answer\" verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream. \n\nWhen you find out the structure, output a line in the format \"! $p_1 \\space\np_2 \\ldots p_{n-1}$\" (without quotes), where $p_i$ ($0 \\le p_i < i$)\ndenotes the index of the direct parent of node $i$. This query is not\ncounted towards the $2n - 6$ queries limit.\n\nAfter solving one test case, the program should immediately move on to the\nnext one. After solving all test cases, the program should be terminated\nimmediately.\n\nAfter printing any query do not forget to output an end of line and flush the\noutput buffer. Otherwise, you will get Idleness limit exceeded. To do this,\nuse:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\nThe interactor is non-adaptive. The tree does not change during the\ninteraction.\n\nHacks\n\nFor hack, use the following format:\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 500$) \u2014 the\nnumber of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n\n\\le 10^4$) \u2014 the number of nodes in Genokraken's nerve system.\n\nThe second line of each test case contains $n-1$ integers $p_1, p_2,\n\\ldots, p_{n-1}$ ($0 \\le p_1 \\le p_2 \\le \\ldots \\le p_{n-1} \\le n - 2$,\n$0 \\le p_i < i$) \u2014 the direct parents of node $1$, $2$, ...,\n$n-1$ in the system, respectively.\n\nIn each test case, the values $p_1, p_2, \\ldots, p_{n-1}$ must ensure the\nfollowing in the tree:\n\n  * If we remove root node $0$ and all adjacent edges, this tree will turn into a forest consisting of only paths. Each node that was initially adjacent to the node $0$ will be the end of some path. \n  * Node $1$ has exactly two adjacent nodes (including the node $0$). \n\nThe sum of $n$ over all test cases must not exceed $10^4$.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n4\n\n1\n\n5\n\n1\n\n0\n\n9\n\n</pre></td>\n    <td><pre>\n\n? 2 3\n\n! 0 0 1\n\n? 2 3\n\n? 2 4\n\n! 0 0 1 2\n\n! 0 0 0 1 3 5 6 7</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Genokraken's nerve system forms the following tree:\n\n![](CDN_BASE_URL/87b14582ff5a709979f7ee57b06ff866)\n\n  * The answer to \"? 2 3\" is $1$. This means that the simple path between nodes $2$ and $3$ contains node $0$. \n\nIn the second test case, Genokraken's nerve system forms the following tree:\n\n![](CDN_BASE_URL/6c7e646b7868f6758cc525e656e37c27)\n\n  * The answer to \"? 2 3\" is $1$. This means that the simple path between nodes $2$ and $3$ contains node $0$. \n  * The answer to \"? 2 4\" is $0$. This means that the simple path between nodes $2$ and $4$ doesn't contain node $0$. \n\nIn the third test case, Genokraken's nerve system forms the following tree:\n\n![](CDN_BASE_URL/6ed3921d7286298c332d0c0e2a45b503)"
    },
    {
        "problem_id": "2032E",
        "url": "https://codeforces.com/problemset/problem/2032/E",
        "title": "Balanced",
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "You are given a cyclic array $a$ with $n$ elements, where $n$ is\nodd. In each operation, you can do the following:\n\n  * Choose an index $1 \\le i \\le n$ and increase $a_{i - 1}$ by $1$, $a_i$ by $2$, and $a_{i + 1}$ by $1$. The element before the first element is the last element because this is a cyclic array. \n\nA cyclic array is called balanced if all its elements are equal to each other.\n\nFind any sequence of operations to make this cyclic array balanced or\ndetermine that it is impossible. Please note that you do not have to minimize\nthe number of operations.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 2 \\cdot 10^5$) \u2014 the number of test cases.\nThe description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n< 2 \\cdot 10^5$, $n$ is odd) \u2014 the length of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le 10^{6}$) \u2014 the elements of the array\n$a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case:\n\n  * If it is impossible to make the cyclic array balanced, output $-1$. \n  * Otherwise, output $n$ integers $v_1, v_2, \\ldots, v_n$ ($0 \\leq v_i \\leq 10^{18}$) \u2014 where $v_i$ denotes the number of operations applied to index $i$. It can be proved that if any solution exists, then there exists a solution under the given constraints. If there are several solutions under the given constraints, output any of them.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n3\n2 1 2\n3\n1 2 3\n5\n1 2 1 2 1\n7\n1 2 1 2 1 3 1\n9\n10000 10000 10000 10000 10000 10001 10002 10001 10000\n1\n10\n</pre></td>\n    <td><pre>0 1 0 \n2 1 0 \n2 0 3 0 2 \n4 2 7 0 8 0 6 \n1 1 1 1 1 1 0 1 1 \n0 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case:\n\n  * After $1$ operation applied to index $i = 2$, the array $a = [3, 3, 3]$. \n\nIn the second test case:\n\n  * After $2$ operations applied to index $i = 1$, the array $a = [5, 4, 5]$.\n  * After $1$ operation applied to index $i = 2$, the array $a = [6, 6, 6]$. \n\nIn the third test case:\n\n  * After $2$ operations applied to index $i = 1$, the array $a = [5, 4, 1, 2, 3]$.\n  * After $3$ operations applied to index $i = 3$, the array $a = [5, 7, 7, 5, 3]$.\n  * After $2$ operations applied to index $i = 5$, the array $a = [7, 7, 7, 7, 7]$."
    },
    {
        "problem_id": "2032F",
        "url": "https://codeforces.com/problemset/problem/2032/F",
        "title": "Peanuts",
        "rating": 2700,
        "tags": [
            "combinatorics",
            "dp",
            "games",
            "math"
        ],
        "div": "Div. 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "Having the magical beanstalk, Jack has been gathering a lot of peanuts lately.\nEventually, he has obtained $n$ pockets of peanuts, conveniently numbered\n$1$ to $n$ from left to right. The $i$-th pocket has $a_i$\npeanuts.\n\nJack and his childhood friend Alice decide to play a game around the peanuts.\nFirst, Alice divides the pockets into some boxes; each box will have a non-\nzero number of consecutive pockets, and each pocket will, obviously, belong to\nexactly one box. At the same time, Alice does not change the order of the\nboxes, that is, the boxes are numbered in ascending order of the indices of\nthe pockets in them.\n\nAfter that, Alice and Jack will take turns alternately, with Alice going\nfirst.\n\nAt each turn, the current player will remove a positive number of peanuts from\nexactly one pocket which belongs to the leftmost non-empty box (i.e., the\nleftmost box containing at least one non-empty pocket). In other words, if we\nnumber the boxes from left to right, then each player can only pick peanuts\nfrom the pocket in the $j$-th box ($j \\ge 2$) only if the $(j -\n1)$-th box has no peanuts left. The player who cannot make a valid move\nloses.\n\nAlice is sure she will win since she has the advantage of dividing the pockets\ninto boxes herself. Thus, she wanted to know how many ways there are for her\nto divide the peanuts into boxes at the start of the game so that she will\nwin, assuming both players play optimally. Can you help her with the\ncalculation?\n\nAs the result can be very large, output it modulo $998\\,244\\,353$.",
        "input": "Each test consists of multiple test cases. The first line contains a single\ninteger $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. The\ndescription of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq\nn \\leq 10^6$) \u2014 the number of pockets.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 the number of peanuts in each\npocket.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$10^6$.",
        "output": "For each test case, output a single integer \u2014 the number of ways for Alice to\ndivide the pockets into boxes at the start of the game to guarantee her win,\nassuming both players play optimally, modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n3\n1 2 3\n4\n1 2 3 1\n5\n1 1 1 1 1\n2\n1 1\n10\n1 2 3 4 5 6 7 8 9 10\n</pre></td>\n    <td><pre>1\n4\n16\n0\n205\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the only way for Alice to win is to divide the pockets\ninto two boxes as follows: $([1, 2], [3])$ (the first box contains the\nfirst two pockets and the second box contains the third pocket). Alice wins by\ntaking both peanuts from the second pocket, leaving Jack with $([1],\n[3])$. Jack is forced to take the only peanut left in the first box, which\nallows Alice to take the remaining ones in the second box.\n\nIn the second test case, the winning divisions for Alice are $([1], [2, 3,\n1])$, $([1, 2, 3, 1])$, $([1, 2], [3], [1])$, and $([1, 2], [3,\n1])$.\n\nIn the third test case, Alice always wins no matter how she divides the\npockets into boxes.\n\nIn the fourth test case, Alice always loses no matter how she divides the\npockets into boxes."
    },
    {
        "problem_id": "2033A",
        "url": "https://codeforces.com/problemset/problem/2033/A",
        "title": "Sakurako and Kosuke",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Sakurako and Kosuke decided to play some games with a dot on a coordinate\nline. The dot is currently located in position $x=0$. They will be taking\nturns, and Sakurako will be the one to start.\n\nOn the $i$-th move, the current player will move the dot in some direction\nby $2\\cdot i-1$ units. Sakurako will always be moving the dot in the\nnegative direction, whereas Kosuke will always move it in the positive\ndirection.\n\nIn other words, the following will happen:\n\n  1. Sakurako will change the position of the dot by $-1$, $x = -1$ now \n  2. Kosuke will change the position of the dot by $3$, $x = 2$ now \n  3. Sakurako will change the position of the dot by $-5$, $x = -3$ now \n  4. $\\cdots$ \n\nThey will keep on playing while the absolute value of the coordinate of the\ndot does not exceed $n$. More formally, the game continues while $-n\\le\nx\\le n$. It can be proven that the game will always end.\n\nYour task is to determine who will be the one who makes the last turn.",
        "input": "The first line contains one integer $t$ ($1\\le t\\le 100$) \u2014 the number\nof games that Sakurako and Kosuke played.\n\nEach game is described by one number $n$ ($1 \\le n\\le 100$) \u2014 the\nnumber that defines the condition when the game ends.",
        "output": "For each of the $t$ games, output a line with the result of that game. If\nSakurako makes the last turn, output \"Sakurako\" (without quotes); else output\n\"Kosuke\".",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1\n6\n3\n98\n</pre></td>\n    <td><pre>Kosuke\nSakurako\nKosuke\nSakurako\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2033B",
        "url": "https://codeforces.com/problemset/problem/2033/B",
        "title": "Sakurako and Water",
        "rating": 900,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "During her journey with Kosuke, Sakurako and Kosuke found a valley that can be\nrepresented as a matrix of size $n \\times n$, where at the intersection of\nthe $i$-th row and the $j$-th column is a mountain with a height of\n$a_{i,j}$. If $a_{i,j} < 0$, then there is a lake there.\n\nKosuke is very afraid of water, so Sakurako needs to help him:\n\n  * With her magic, she can select a square area of mountains and increase the height of each mountain on the main diagonal of that area by exactly one. \n\nMore formally, she can choose a submatrix with the upper left corner located\nat $(i, j)$ and the lower right corner at $(p, q)$, such that\n$p-i=q-j$. She can then add one to each element at the intersection of the\n$(i + k)$-th row and the $(j + k)$-th column, for all $k$ such\nthat $0 \\le k \\le p-i$.\n\nDetermine the minimum number of times Sakurako must use her magic so that\nthere are no lakes.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 200$) \u2014 the\nnumber of test cases.\n\nEach test case is described as follows:\n\n  * The first line of each test case consists of a single number $n$ ($1 \\le n \\le 500$). \n  * Each of the following $n$ lines consists of $n$ integers separated by spaces, which correspond to the heights of the mountains in the valley $a$ ($-10^5 \\le a_{i,j} \\le 10^5$). \n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$1000$.",
        "output": "For each test case, output the minimum number of times Sakurako will have to\nuse her magic so that all lakes disappear.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1\n1\n2\n-1 2\n3 0\n3\n1 2 3\n-2 1 -1\n0 0 -1\n5\n1 1 -1 -1 3\n-3 1 4 4 -4\n-1 -1 3 0 -5\n4 5 3 -3 -1\n3 1 -3 -1 5\n</pre></td>\n    <td><pre>0\n1\n4\n19\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2033C",
        "url": "https://codeforces.com/problemset/problem/2033/C",
        "title": "Sakurako's Field Trip",
        "rating": 1400,
        "tags": [
            "dp",
            "greedy",
            "two pointers"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Even in university, students need to relax. That is why Sakurakos teacher\ndecided to go on a field trip. It is known that all of the students will be\nwalking in one line. The student with index $i$ has some topic of interest\nwhich is described as $a_i$. As a teacher, you want to minimise the\ndisturbance of the line of students.\n\nThe disturbance of the line is defined as the number of neighbouring people\nwith the same topic of interest. In other words, disturbance is the number of\nindices $j$ ($1 \\le j < n$) such that $a_j = a_{j + 1}$.\n\nIn order to do this, you can choose index $i$ ($1\\le i\\le n$) and swap\nstudents at positions $i$ and $n-i+1$. You can perform any number of\nswaps.\n\nYour task is to determine the minimal amount of disturbance that you can\nachieve by doing the operation described above any number of times.",
        "input": "The first line contains one integer $t$ ($1\\le t\\le 10^4$) \u2014 the\nnumber of test cases.\n\nEach test case is described by two lines.\n\n  * The first line contains one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the length of the line of students. \n  * The second line contains $n$ integers $a_i$ ($1\\le a_i\\le n$) \u2014 the topics of interest of students in line. \n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$2\\cdot 10^5$.",
        "output": "For each test case, output the minimal possible disturbance of the line that\nyou can achieve.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>9\n5\n1 1 1 2 3\n6\n2 1 2 2 1 1\n4\n1 2 1 1\n6\n2 1 1 2 2 4\n4\n2 1 2 3\n6\n1 2 2 1 2 1\n5\n4 5 5 1 5\n7\n1 4 3 5 1 1 3\n7\n3 1 3 2 2 3 3\n</pre></td>\n    <td><pre>1\n2\n1\n0\n0\n1\n1\n0\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example, it is necessary to apply the operation to $i=2$,\nthus the array will become $[1, \\textbf{2}, 1, \\textbf{1}, 3]$, with the\nbold elements indicating those that have swapped places. The disturbance of\nthis array is equal to $1$.\n\nIn the fourth example, it is sufficient to apply the operation to $i=3$,\nthus the array will become $[2, 1, \\textbf{2}, \\textbf{1}, 2, 4]$. The\ndisturbance of this array is equal to $0$.\n\nIn the eighth example, it is sufficient to apply the operation to $i=3$,\nthus the array will become $[1, 4, \\textbf{1}, 5, \\textbf{3}, 1, 3]$. The\ndisturbance of this array is equal to $0$."
    },
    {
        "problem_id": "2033D",
        "url": "https://codeforces.com/problemset/problem/2033/D",
        "title": "Kousuke's Assignment",
        "rating": 1300,
        "tags": [
            "data structures",
            "dp",
            "dsu",
            "greedy",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "After a trip with Sakurako, Kousuke was very scared because he forgot about\nhis programming assignment. In this assignment, the teacher gave him an array\n$a$ of $n$ integers and asked him to calculate the number of non-\noverlapping segments of the array $a$, such that each segment is\nconsidered beautiful.\n\nA segment $[l,r]$ is considered beautiful if $a_l + a_{l+1} + \\dots +\na_{r-1} + a_r=0$.\n\nFor a fixed array $a$, your task is to compute the maximum number of non-\noverlapping beautiful segments.",
        "input": "The first line of input contains the number $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases. Each test case consists of $2$ lines.\n\n  * The first line contains one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the array.\n  * The second line contains $n$ integers $a_i$ ($-10^5 \\le a_i \\le 10^5$) \u2014 the elements of the array $a$. \n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$3\\cdot 10^5$.",
        "output": "For each test case, output a single integer: the maximum number of non-\noverlapping beautiful segments.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5\n2 1 -3 2 1\n7\n12 -4 4 43 -3 -5 8\n6\n0 -4 0 3 0 1\n</pre></td>\n    <td><pre>1\n2\n3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2033E",
        "url": "https://codeforces.com/problemset/problem/2033/E",
        "title": "Sakurako, Kosuke, and the Permutation",
        "rating": 1400,
        "tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "math"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Sakurako's exams are over, and she did excellently. As a reward, she received\na permutation $p$. Kosuke was not entirely satisfied because he failed one\nexam and did not receive a gift. He decided to sneak into her room (thanks to\nthe code for her lock) and spoil the permutation so that it becomes simple.\n\nA permutation $p$ is considered simple if for every $i$ $(1\\le i \\le\nn)$ one of the following conditions holds:\n\n  * $p_i=i$ \n  * $p_{p_i}=i$ \n\nFor example, the permutations $[1, 2, 3, 4]$, $[5, 2, 4, 3, 1]$, and\n$[2, 1]$ are simple, while $[2, 3, 1]$ and $[5, 2, 1, 4, 3]$ are\nnot.\n\nIn one operation, Kosuke can choose indices $i,j$ $(1\\le i,j\\le n)$\nand swap the elements $p_i$ and $p_j$.\n\nSakurako is about to return home. Your task is to calculate the minimum number\nof operations that Kosuke needs to perform to make the permutation simple.",
        "input": "The first line contains one integer $t$ ($1\\le t\\le 10^4$) \u2014 the\nnumber of test cases.\n\nEach test case is described by two lines.\n\n  * The first line contains one integer $n$ ($1\\le n \\le 10^6$) \u2014 the length of the permutation $p$. \n  * The second line contains $n$ integers $p_i$ ($1\\le p_i\\le n$) \u2014 the elements of the permutation $p$. \n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed\n$10^6$.\n\nIt is guaranteed that $p$ is a permutation.",
        "output": "For each test case, output the minimum number of operations that Kosuke needs\nto perform to make the permutation simple.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n2 3 4 5 1\n4\n2 3 4 1\n3\n1 3 2\n7\n2 3 1 5 6 7 4\n</pre></td>\n    <td><pre>0\n0\n2\n1\n0\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first and second examples, the permutations are already simple.\n\nIn the fourth example, it is sufficient to swap $p_2$ and $p_4$. Thus,\nthe permutation will become $[2, 1, 4, 3]$ in $1$ operation."
    },
    {
        "problem_id": "2033F",
        "url": "https://codeforces.com/problemset/problem/2033/F",
        "title": "Kosuke's Sloth",
        "rating": 1800,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Kosuke is too lazy. He will not give you any legend, just the task:\n\nFibonacci numbers are defined as follows:\n\n  * $f(1)=f(2)=1$. \n  * $f(n)=f(n-1)+f(n-2)$ $(3\\le n)$ \n\nWe denote $G(n,k)$ as an index of the $n$-th Fibonacci number that is\ndivisible by $k$. For given $n$ and $k$, compute $G(n,k)$.\n\nAs this number can be too big, output it by modulo $10^9+7$.\n\nFor example: $G(3,2)=9$ because the $3$-rd Fibonacci number that is\ndivisible by $2$ is $34$.\n$[1,1,\\textbf{2},3,5,\\textbf{8},13,21,\\textbf{34}]$.",
        "input": "The first line of the input data contains a single integer $t$ ($1 \\le t\n\\le 10^4$) \u2014 the number of test cases.\n\nThe first and only line contains two integers $n$ and $k$ ($1 \\le n\n\\le 10^{18}$, $1 \\le k \\le 10^5$).\n\nIt is guaranteed that the sum of $k$ across all test cases does not exceed\n$10^6$.",
        "output": "For each test case, output the only number: the value $G(n,k)$ taken by\nmodulo $10^9+7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n3 2\n100 1\n1000000000000 1377\n</pre></td>\n    <td><pre>9\n100\n999244007\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2033G",
        "url": "https://codeforces.com/problemset/problem/2033/G",
        "title": "Sakurako and Chefir",
        "rating": 2200,
        "tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "div": "Div. 3",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "Given a tree with $n$ vertices rooted at vertex $1$. While walking\nthrough it with her cat Chefir, Sakurako got distracted, and Chefir ran away.\n\nTo help Sakurako, Kosuke recorded his $q$ guesses. In the $i$-th\nguess, he assumes that Chefir got lost at vertex $v_i$ and had $k_i$\nstamina.\n\nAlso, for each guess, Kosuke assumes that Chefir could move along the edges an\narbitrary number of times:\n\n  * from vertex $a$ to vertex $b$, if $a$ is an ancestor$^{\\text{\u2217}}$ of $b$, the stamina will not change; \n  * from vertex $a$ to vertex $b$, if $a$ is not an ancestor of $b$, then Chefir's stamina decreases by $1$. \n\nIf Chefir's stamina is $0$, he cannot make a move of the second type.\n\nFor each assumption, your task is to find the distance to the farthest vertex\nthat Chefir could reach from vertex $v_i$, having $k_i$ stamina.\n\n$^{\\text{\u2217}}$Vertex $a$ is an ancestor of vertex $b$ if the\nshortest path from $b$ to the root passes through $a$.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 10^4$) \u2014 the\nnumber of test cases.\n\nEach test case is described as follows:\n\n  * The first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree.\n  * The next $n-1$ lines contain the edges of the tree. It is guaranteed that the given edges form a tree.\n  * The next line consists of a single integer $q$ $(1\\le q\\le 2 \\cdot 10^5)$, which denotes the number of guesses made by Kosuke.\n  * The next $q$ lines describe the guesses made by Kosuke, with two integers $v_i$, $k_i$ $(1\\le v_i \\le n, 0 \\le k_i\\le n)$. \n\nIt is guaranteed that the sum of $n$ and the sum of $q$ across all\ntest cases does not exceed $2\\cdot 10^5$.",
        "output": "For each test case and for each guess, output the maximum distance to the\nfarthest vertex that Chefir could reach from the starting point $v_i$\nhaving $k_i$ stamina.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n5\n1 2\n2 3\n3 4\n3 5\n3\n5 1\n3 1\n2 0\n9\n8 1\n1 7\n1 4\n7 3\n4 9\n3 2\n1 5\n3 6\n7\n6 0\n2 3\n6 2\n8 2\n2 4\n9 2\n6 3\n6\n2 1\n2 5\n2 4\n5 6\n4 3\n3\n3 1\n1 3\n6 5\n</pre></td>\n    <td><pre>2 1 2 \n0 5 2 4 5 5 5 \n1 3 4 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first example:\n\n  * In the first query, you can go from vertex $5$ to vertex $3$ (after which your stamina will decrease by $1$ and become $0$), and then you can go to vertex $4$; \n  * In the second query, from vertex $3$ with $1$ stamina, you can only reach vertices $2$, $3$, $4$, and $5$; \n  * In the third query, from vertex $2$ with $0$ stamina, you can only reach vertices $2$, $3$, $4$, and $5$;"
    },
    {
        "problem_id": "2035A",
        "url": "https://codeforces.com/problemset/problem/2035/A",
        "title": "Sliding",
        "rating": 800,
        "tags": [
            "implementation",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Red was ejected. They were not the imposter.\n\nThere are $n$ rows of $m$ people. Let the position in the $r$-th\nrow and the $c$-th column be denoted by $(r, c)$. Number each person\nstarting from $1$ in row-major order, i.e., the person numbered\n$(r-1)\\cdot m+c$ is initially at $(r,c)$.\n\nThe person at $(r, c)$ decides to leave. To fill the gap, let the person\nwho left be numbered $i$. Each person numbered $j>i$ will move to the\nposition where the person numbered $j-1$ is initially at. The following\ndiagram illustrates the case where $n=2$, $m=3$, $r=1$, and\n$c=2$.\n\n![](CDN_BASE_URL/9b0b8e601446e3410296d7c9b1ff8763)\n\nCalculate the sum of the Manhattan distances of each person's movement. If a\nperson was initially at $(r_0, c_0)$ and then moved to $(r_1, c_1)$,\nthe Manhattan distance is $|r_0-r_1|+|c_0-c_1|$.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 10^4$) \u2014 the\nnumber of test cases.\n\nThe only line of each testcase contains $4$ integers $n$, $m$,\n$r$, and $c$ ($1\\le r\\le n\\le 10^6$, $1 \\le c \\le m \\le\n10^6$), where $n$ is the number of rows, $m$ is the number of\ncolumns, and $(r,c)$ is the position where the person who left is\ninitially at.",
        "output": "For each test case, output a single integer denoting the sum of the Manhattan\ndistances.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2 3 1 2\n2 2 2 1\n1 1 1 1\n1000000 1000000 1 1\n</pre></td>\n    <td><pre>6\n1\n0\n1999998000000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, the person numbered $2$ leaves, and the distances\nof the movements of the person numbered $3$, $4$, $5$, and $6$\nare $1$, $3$, $1$, and $1$, respectively. So the answer is\n$1+3+1+1=6$.\n\nFor the second test case, the person numbered $3$ leaves, and the person\nnumbered $4$ moves. The answer is $1$."
    },
    {
        "problem_id": "2035B",
        "url": "https://codeforces.com/problemset/problem/2035/B",
        "title": "Everyone Loves Tres",
        "rating": 900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "There are 3 heroes and 3 villains, so 6 people in total.\n\nGiven a positive integer $n$. Find the smallest integer whose decimal\nrepresentation has length $n$ and consists only of $3$s and $6$s\nsuch that it is divisible by both $33$ and $66$. If no such integer\nexists, print $-1$.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 500$) \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains a single integer $n$ ($1\\le\nn\\le 500$) \u2014 the length of the decimal representation.",
        "output": "For each test case, output the smallest required integer if such an integer\nexists and $-1$ otherwise.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1\n2\n3\n4\n5\n7\n</pre></td>\n    <td><pre>-1\n66\n-1\n3366\n36366\n3336366\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For $n=1$, no such integer exists as neither $3$ nor $6$ is\ndivisible by $33$.\n\nFor $n=2$, $66$ consists only of $6$s and it is divisible by both\n$33$ and $66$.\n\nFor $n=3$, no such integer exists. Only $363$ is divisible by\n$33$, but it is not divisible by $66$.\n\nFor $n=4$, $3366$ and $6666$ are divisible by both $33$ and\n$66$, and $3366$ is the smallest."
    },
    {
        "problem_id": "2035C",
        "url": "https://codeforces.com/problemset/problem/2035/C",
        "title": "Alya and Permutation",
        "rating": 1400,
        "tags": [
            "bitmasks",
            "constructive algorithms",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Alya has been given a hard problem. Unfortunately, she is too busy running for\nstudent council. Please solve this problem for her.\n\nGiven an integer $n$, construct a permutation $p$ of integers $1, 2,\n\\ldots, n$ that maximizes the value of $k$ (which is initially $0$)\nafter the following process.\n\nPerform $n$ operations, on the $i$-th operation ($i=1, 2, \\dots,\nn$),\n\n  * If $i$ is odd, $k=k\\,\\&\\,p_i$, where $\\&$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND). \n  * If $i$ is even, $k=k\\,|\\,p_i$, where $|$ denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR).",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 500$) \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains a single integer $n$ ($5\\le\nn\\le 2 \\cdot 10^5$) \u2014 the length of the permutation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output the maximum value of $k$ in the first line and\noutput the permutation $p_1, p_2,\\ldots, p_n$ in the second line.\n\nIf there are multiple such permutations, output any.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n5\n6\n7\n8\n9\n10\n</pre></td>\n    <td><pre>5\n2 1 3 4 5 \n7\n1 2 4 6 5 3 \n7\n2 4 5 1 3 6 7 \n15\n2 4 5 1 3 6 7 8 \n9\n2 4 5 6 7 1 3 8 9 \n15\n1 2 3 4 5 6 8 10 9 7 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For the first test case, the value of $k$ is determined as follows:\n\n$k = 0$ initially.\n\n  * On the $1$st operation, $1$ is odd, so Alya sets $k$ to be $k\\&p_1 = 0\\&2 = 0$.\n  * On the $2$nd operation, $2$ is even, so Alya sets $k$ to be $k|p_2 = 0|1 = 1$.\n  * On the $3$rd operation, $3$ is odd, so Alya sets $k$ to be $k\\&p_3 = 1\\&3 = 1$.\n  * On the $4$th operation, $4$ is even, so Alya sets $k$ to be $k|p_4 = 1|4 = 5$.\n  * On the $5$th operation, $5$ is odd, so Alya sets $k$ to be $k\\&p_5 = 5\\&5 = 5$.\n\nThe final value of $k$ is $5$. It can be shown that the final value of\n$k$ is at most $5$ for all permutations of length $5$. Another\nvalid output is $[2, 3, 1, 4, 5]$.\n\nFor the second test case, the final value of $k$ is $7$. It can be\nshown that the final value of $k$ is at most $7$ for all permutations\nof length $6$. Other valid outputs include $[2, 4, 1, 6, 3, 5]$ and\n$[5, 2, 6, 1, 3, 4]$."
    },
    {
        "problem_id": "2035D",
        "url": "https://codeforces.com/problemset/problem/2035/D",
        "title": "Yet Another Real Number Problem",
        "rating": 1800,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "greedy",
            "implementation",
            "math"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Three r there are's in strawberry.\n\nYou are given an array $b$ of length $m$. You can perform the\nfollowing operation any number of times (possibly zero):\n\n  * Choose two distinct indices $i$ and $j$ where $\\bf{1\\le i < j\\le m}$ and $b_i$ is even, divide $b_i$ by $2$ and multiply $b_j$ by $2$. \n\nYour task is to maximize the sum of the array after performing any number of\nsuch operations. Since it could be large, output this sum modulo $10^9+7$.\n\nSince this problem is too easy, you are given an array $a$ of length\n$n$ and need to solve the problem for each prefix of $a$.\n\nIn other words, denoting the maximum sum of $b$ after performing any\nnumber of such operations as $f(b)$, you need to output $f([a_1])$,\n$f([a_1,a_2])$, $\\ldots$, $f([a_1,a_2,\\ldots,a_n])$ modulo\n$10^9+7$ respectively.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 10^4$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 2 \\cdot 10^5$) \u2014 the length of $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\n\\le a_i \\le 10^9$) \u2014 the starting values of array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed\n$2 \\cdot 10^5$.",
        "output": "For each test case, output $n$ integers representing the answer for each\nprefix of $a$ modulo $10^9+7$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n10\n1 2 3 4 5 6 7 8 9 10\n11\n1 6 9 4 7 4 4 10 3 2 3\n4\n527792568 502211460 850237282 374773208\n</pre></td>\n    <td><pre>1 3 8 13 46 59 126 149 1174 1311 \n1 7 22 26 70 74 150 1303 1306 1308 1568 \n527792568 83665723 399119771 773892979 \n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "For each prefix in the first example, a possible array after operations is:\n\n  * $[1]$ and the sum is $1$; \n  * $[1, 2]$ and the sum is $3$; \n  * $[1, 1, 6]$ and the sum is $8$; \n  * $[1, 1, 3, 8]$ and the sum is $13$; \n  * $[1, 1, 3, 1, 40]$ and the sum is $46$; \n  * $[1, 1, 3, 1, 5, 48]$ and the sum is $59$; \n  * $[1, 1, 3, 1, 5, 3, 112]$ and the sum is $126$; \n  * $[1, 1, 3, 1, 5, 3, 7, 128]$ and the sum is $149$; \n  * $[1, 1, 3, 1, 5, 3, 7, 1, 1152]$ and the sum is $1174$; \n  * $[1, 1, 3, 1, 5, 3, 7, 1, 9, 1280]$ and the sum is $1311$."
    },
    {
        "problem_id": "2035E",
        "url": "https://codeforces.com/problemset/problem/2035/E",
        "title": "Monster",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "greedy",
            "implementation",
            "math",
            "ternary search"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Man, this Genshin boss is so hard. Good thing they have a top-up of $6$\ncoins for only $ \\$4.99$. I should be careful and spend no more than I\nneed to, lest my mom catches me...\n\nYou are fighting a monster with $z$ health using a weapon with $d$\ndamage. Initially, $d=0$. You can perform the following operations.\n\n  * Increase $d$ \u2014 the damage of your weapon by $1$, costing $x$ coins. \n  * Attack the monster, dealing $d$ damage and costing $y$ coins. \n\nYou cannot perform the first operation for more than $k$ times in a row.\n\nFind the minimum number of coins needed to defeat the monster by dealing at\nleast $z$ damage.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 100$) \u2014 the\nnumber of test cases.\n\nThe only line of each test case contains 4 integers $x$, $y$, $z$,\nand $k$ ($1\\leq x, y, z, k\\leq 10^8$) \u2014 the first operation's cost,\nthe second operation's cost, the monster's health, and the limitation on the\nfirst operation.",
        "output": "For each test case, output the minimum number of coins needed to defeat the\nmonster.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n2 3 5 5\n10 20 40 5\n1 60 100 10\n60 1 100 10\n</pre></td>\n    <td><pre>12\n190\n280\n160\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, $x = 2$, $y = 3$, $z = 5$, and $k =\n5$. Here's a strategy that achieves the lowest possible cost of $12$\ncoins:\n\n  * Increase damage by $1$, costing $2$ coins. \n  * Increase damage by $1$, costing $2$ coins. \n  * Increase damage by $1$, costing $2$ coins. \n  * Attack the monster, dealing $3$ damage, costing $3$ coins. \n  * Attack the monster, dealing $3$ damage, costing $3$ coins. \n\nYou deal a total of $3 + 3 = 6$ damage, defeating the monster who has\n$5$ health. The total number of coins you use is $2 + 2 + 2 + 3 + 3 =\n12$ coins.\n\nIn the second test case, $x = 10$, $y = 20$, $z = 40$, and $k =\n5$. Here's a strategy that achieves the lowest possible cost of $190$\ncoins:\n\n  * Increase damage by $5$, costing $5\\cdot x$ = $50$ coins. \n  * Attack the monster once, dealing $5$ damage, costing $20$ coins. \n  * Increase damage by $2$, costing $2\\cdot x$ = $20$ coins. \n  * Attack the monster $5$ times, dealing $5\\cdot 7 = 35$ damage, costing $5\\cdot y$ = $100$ coins. \n\nYou deal a total of $5 + 35 = 40$ damage, defeating the monster who has\nexactly $40$ health. The total number of coins you use is $50 + 20 + 20\n+ 100 = 190$ coins."
    },
    {
        "problem_id": "2035F",
        "url": "https://codeforces.com/problemset/problem/2035/F",
        "title": "Tree Operations",
        "rating": 2500,
        "tags": [
            "binary search",
            "brute force",
            "dfs and similar",
            "dp",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 4000,
        "memory_limit_mb": 256,
        "description": "This really says a lot about our society.\n\nOne day, a turtle gives you a tree with $n$ nodes rooted at node $x$.\nEach node has an initial nonnegative value; the $i$-th node has starting\nvalue $a_i$.\n\nYou want to make the values of all nodes equal to $0$. To do so, you will\nperform a series of operations on the tree, where each operation will be\nperformed on a certain node. Define an operation on node $u$ as choosing a\nsingle node in $u$'s subtree$^{\\text{\u2217}}$ and incrementing or\ndecrementing its value by $1$. The order in which operations are performed\non nodes is as follows:\n\n  * For $1 \\le i \\le n$, the $i$-th operation will be performed on node $i$. \n  * For $i > n$, the $i$-th operation will be performed on the same node as operation $i - n$. \n\nMore formally, the $i$-th operation will be performed on the $(((i - 1)\n\\bmod n) + 1)$-th node.$^{\\text{\u2020}}$\n\nNote that you cannot skip over operations; that is, you cannot perform the\n$i$-th operation without first performing operations $1, 2, \\ldots, i -\n1$.\n\nFind the minimum number of operations you must perform before you can make the\nvalues of all nodes equal to $0$, assuming you pick operations optimally.\nIf it's impossible to make the values of all nodes equal to $0$ after\nfinite operations, output $-1$.\n\n$^{\\text{\u2217}}$The subtree of a node $u$ is the set of nodes for which\n$u$ lies on the shortest path from this node to the root, including\n$u$ itself.\n\n$^{\\text{\u2020}}$Here, $a \\bmod b$ denotes the remainder from dividing\n$a$ by $b$.",
        "input": "The first line contains a single integer $t$ ($1\\le t\\le 100$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$\n($1 \\le n \\le 2000$, $1 \\le x \\le n$) \u2014 the number of nodes and the\nroot of the tree.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the starting value of each node.\n\nEach of the next $n - 1$ lines of each test case contains two integers\n$u$ and $v$ ($1 \\le u, v \\le n$, $u \\neq v$) representing an\nundirected edge from $u$ to $v$. It is guaranteed that the given edges\nform a tree.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed\n$2000$.",
        "output": "For each test case, output a single integer denoting the minimum amount of\noperations needed to make all nodes $0$. If it's impossible to make all\nnodes $0$, output $-1$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>5\n2 1\n1 2\n1 2\n3 2\n2 1 3\n2 1\n3 2\n4 1\n1 1 0 1\n1 2\n2 3\n1 4\n12 6\n14 4 5 6 12 9 5 11 6 2 1 12\n3 9\n10 6\n6 12\n4 3\n3 1\n5 11\n9 7\n5 6\n1 8\n2 8\n5 1\n1 1\n0\n</pre></td>\n    <td><pre>3\n6\n5\n145\n0\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, you can make the following valid sequence of\noperations:\n\n  * For operation $1$, decrease the value of node $1$. This is valid because $(((1 - 1) \\bmod n) + 1) = 1$, and node $1$ is in the subtree of node $1$. \n  * For operation $2$, decrease the value of node $2$. This is valid because $(((2 - 1) \\bmod n) + 1) = 2$, and node $2$ is in the subtree of node $2$. \n  * For operation $3$, decrease the value of node $2$. This is valid because $(((3 - 1) \\bmod n) + 1) = 1$, and node $2$ is in the subtree of node $1$."
    },
    {
        "problem_id": "2035G1",
        "url": "https://codeforces.com/problemset/problem/2035/G1",
        "title": "Go Learn! (Easy Version)",
        "rating": 3300,
        "tags": [
            "dp",
            "trees"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 256,
        "description": "The differences between the easy and hard versions are the constraints on\n$n$ and the sum of $n$. In this version, $n \\leq 3000$ and the sum\nof $n$ does not exceed $10^4$. You can only make hacks if both\nversions are solved.\n\nWell, well, well, let's see how Bessie is managing her finances. She seems to\nbe in the trenches! Fortunately, she is applying for a job at Moogle to\nresolve this issue. Moogle interviews require intensive knowledge of obscure\nalgorithms and complex data structures, but Bessie received a tip-off from an\nLGM on exactly what she has to go learn.\n\nBessie wrote the following code to binary search for a certain element $k$\nin a possibly unsorted array $[a_1, a_2,\\ldots,a_n]$ with $n$\nelements.\n\n    \n    \n    let l = 1\n    let h = n\n    \n    while l < h:\n      let m = floor((l + h) / 2)\n    \n      if a[m] < k:\n        l = m + 1\n      else:\n        h = m\n    \n    return l\n    \n\nBessie submitted her code to Farmer John's problem with $m$ ($1 \\leq m\n\\leq n$) tests. The $i$-th test is of the form $(x_i, k_i)$ ($1\n\\leq x, k \\leq n$). It is guaranteed all the $x_i$ are distinct and all\nthe $k_i$ are distinct.\n\nTest $i$ is correct if the following hold:\n\n  1. The $x_i$-th element in the array is $k_i$. \n  2. If Bessie calls the binary search as shown in the above code for $k_i$, it will return $x_i$. \n\nIt might not be possible for all $m$ tests to be correct on the same\narray, so Farmer John will remove some of them so Bessie can AC. Let $r$\nbe the minimum of tests removed so that there exists an array $[a_1,\na_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ so that all remaining tests\nare correct.\n\nIn addition to finding $r$, Farmer John wants you to count the number of\narrays $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ such that\nthere exists a way to remove exactly $r$ tests so that all the remaining\ntests are correct. Since this number may be very large, please find it modulo\n$998\\,244\\,353$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\leq m \\leq n \\leq 3000$) denoting the number of the array and the\nnumber of tests.\n\nThe following $m$ lines each contain two integers, describing the tests.\nThe $i$-th line contains two integers $x_i$ and $k_i$ ($1 \\leq\nx_i, k_i \\leq n$) denoting the index and value of the test. It is guaranteed\nall $x_i$ are distinct and all $k_i$ are distinct.\n\nIt is guaranteed the sum of $n$ across all test cases does not exceed\n$10^4$.",
        "output": "For each test case, output two integers, $r$ \u2014 the minimum of tests\nremoved so that there exists an array so that all remaining tests are correct,\nand the number of arrays such that it is possible to remove $r$ tests to\nmake all remaining tests correct modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n5 4\n1 1\n2 2\n4 3\n5 4\n5 4\n5 4\n2 5\n1 2\n3 3\n</pre></td>\n    <td><pre>0 1\n1 3\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n6 6\n1 3\n2 5\n3 1\n4 2\n5 4\n6 6\n30 8\n19 22\n6 12\n12 1\n28 27\n3 4\n14 25\n29 14\n11 15\n</pre></td>\n    <td><pre>3 78\n3 839271911\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Consider the first example.\n\nIn the first test case, the array $[1,2,2,3,4]$ satisfies all $m$\ntests, so the minimum number of tests Bessie has to remove is $0$. Note\nthat this is also the only array that satisfies all $m$ tests.\n\nIn the second test case, the minimum number of tests Bessie has to remove is\n$1$. The only test Bessie can remove is $(2,5)$. If Bessie removes\ntest $(2,5)$, then the arrays satisfying the remaining $m-1$ tests are\n$[2,2,3,1,4]$, $[2,2,3,2,4]$, $[2,2,3,3,4]$."
    },
    {
        "problem_id": "2035G2",
        "url": "https://codeforces.com/problemset/problem/2035/G2",
        "title": "Go Learn! (Hard Version)",
        "rating": 3500,
        "tags": [
            "divide and conquer",
            "dp"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 5000,
        "memory_limit_mb": 256,
        "description": "The differences between the easy and hard versions are the constraints on\n$n$ and the sum of $n$. In this version, $n \\leq 3\\cdot 10^5$ and\nthe sum of $n$ does not exceed $10^6$. You can only make hacks if both\nversions are solved.\n\nWell, well, well, let's see how Bessie is managing her finances. She seems to\nbe in the trenches! Fortunately, she is applying for a job at Moogle to\nresolve this issue. Moogle interviews require intensive knowledge of obscure\nalgorithms and complex data structures, but Bessie received a tip-off from an\nLGM on exactly what she has to go learn.\n\nBessie wrote the following code to binary search for a certain element $k$\nin a possibly unsorted array $[a_1, a_2,\\ldots,a_n]$ with $n$\nelements.\n\n    \n    \n    let l = 1\n    let h = n\n    \n    while l < h:\n      let m = floor((l + h) / 2)\n    \n      if a[m] < k:\n        l = m + 1\n      else:\n        h = m\n    \n    return l\n    \n\nBessie submitted her code to Farmer John's problem with $m$ ($1 \\leq m\n\\leq n$) tests. The $i$-th test is of the form $(x_i, k_i)$ ($1\n\\leq x, k \\leq n$). It is guaranteed all the $x_i$ are distinct and all\nthe $k_i$ are distinct.\n\nTest $i$ is correct if the following hold:\n\n  1. The $x_i$-th element in the array is $k_i$. \n  2. If Bessie calls the binary search as shown in the above code for $k_i$, it will return $x_i$. \n\nIt might not be possible for all $m$ tests to be correct on the same\narray, so Farmer John will remove some of them so Bessie can AC. Let $r$\nbe the minimum of tests removed so that there exists an array $[a_1,\na_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ so that all remaining tests\nare correct.\n\nIn addition to finding $r$, Farmer John wants you to count the number of\narrays $[a_1, a_2,\\ldots,a_n]$ with $1 \\leq a_i \\leq n$ such that\nthere exists a way to remove exactly $r$ tests so that all the remaining\ntests are correct. Since this number may be very large, please find it modulo\n$998\\,244\\,353$.",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains two integers $n$ and $m$\n($1 \\leq m \\leq n \\leq 3 \\cdot 10^5$) denoting the number of the array and\nthe number of tests.\n\nThe following $m$ lines each contain two integers, describing the tests.\nThe $i$-th line contains two integers $x_i$ and $k_i$ ($1 \\leq\nx_i, k_i \\leq n$) denoting the index and value of the test. It is guaranteed\nall $x_i$ are distinct and all $k_i$ are distinct.\n\nIt is guaranteed the sum of $n$ across all test cases does not exceed\n$10^6$.",
        "output": "For each test case, output two integers, $r$ \u2014 the minimum of tests\nremoved so that there exists an array so that all remaining tests are correct,\nand the number of arrays such that it is possible to remove $r$ tests to\nmake all remaining tests correct modulo $998\\,244\\,353$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n5 4\n1 1\n2 2\n4 3\n5 4\n5 4\n5 4\n2 5\n1 2\n3 3\n</pre></td>\n    <td><pre>0 1\n1 3\n</pre></td>\n  </tr>\n</tbody>\n</table>\n<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3\n6 6\n1 3\n2 5\n3 1\n4 2\n5 4\n6 6\n30 8\n19 22\n6 12\n12 1\n28 27\n3 4\n14 25\n29 14\n11 15\n300000 1\n5 10\n</pre></td>\n    <td><pre>3 78\n3 839271911\n0 702730519\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "Consider the first example.\n\nIn the first test case, the array $[1,2,2,3,4]$ satisfies all $m$\ntests, so the minimum number of tests Bessie has to remove is $0$. Note\nthat this is also the only array that satisfies all $m$ tests.\n\nIn the second test case, the minimum number of tests Bessie has to remove is\n$1$. The only test Bessie can remove is $(2,5)$. If Bessie removes\ntest $(2,5)$, then the arrays satisfying the remaining $m-1$ tests are\n$[2,2,3,1,4]$, $[2,2,3,2,4]$, $[2,2,3,3,4]$."
    },
    {
        "problem_id": "2035H",
        "url": "https://codeforces.com/problemset/problem/2035/H",
        "title": "Peak Productivity Forces",
        "rating": 3500,
        "tags": [
            "constructive algorithms"
        ],
        "div": "Div. 1 + 2",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "I'm peakly productive and this is deep.\n\nYou are given two permutations$^{\\text{\u2217}}$ $a$ and $b$, both of\nlength $n$.\n\nYou can perform the following three-step operation on permutation $a$:\n\n  1. Choose an index $i$ ($1 \\le i \\le n$).\n  2. Cyclic shift $a_1, a_2, \\ldots, a_{i-1}$ by $1$ to the right. If you had chosen $i = 1$, then this range doesn't exist, and you cyclic shift nothing.\n  3. Cyclic shift $a_{i + 1}, a_{i + 2}, \\ldots, a_n$ by $1$ to the right. If you had chosen $i = n$, then this range doesn't exist, and you cyclic shift nothing.\n\nAfter the operation, $a_1,a_2,\\ldots, a_{i-2},a_{i-1},a_i,a_{i + 1}, a_{i +\n2},\\ldots,a_{n-1}, a_n$ is transformed into\n$a_{i-1},a_1,\\ldots,a_{i-3},a_{i-2},a_i,a_n, a_{i + 1},\\ldots,a_{n-2},\na_{n-1}$.\n\nHere are some examples of operations done on the identity permutation\n$[1,2,3,4,5,6,7]$ of length $7$:\n\n  * If we choose $i = 3$, it will become $[2, 1, 3, 7, 4, 5, 6]$. \n  * If we choose $i = 1$, it will become $[1, 7, 2, 3, 4, 5, 6]$. \n  * If we choose $i = 7$, it will become $[6, 1, 2, 3, 4, 5, 7]$. \n\nNotably, position $i$ is not shifted.\n\nFind a construction using at most $2n$ operations to make $a$ equal to\n$b$ or print $-1$ if it is impossible. The number of operations does\nnot need to be minimized. It can be shown that if it is possible to make\n$a$ equal to $b$, it is possible to do this within $2n$\noperations.\n\n$^{\\text{\u2217}}$A permutation of length $n$ is an array consisting of\n$n$ distinct integers from $1$ to $n$ in arbitrary order. For\nexample, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a\npermutation ($2$ appears twice in the array), and $[1,3,4]$ is also\nnot a permutation ($n=3$ but there is $4$ in the array).",
        "input": "The first line contains a single integer $t$ ($1 \\le t \\le 5 \\cdot\n10^4$) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n\n\\le 5 \\cdot 10^5$) \u2014 the lengths of permutations $a$ and $b$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\n\\ldots, a_n$ ($1 \\le a_i \\le n$) \u2014 the values of permutation $a$.\n\nThe third line of each test case contains $n$ integers $b_1, b_2,\n\\ldots, b_n$ ($1 \\le b_i \\le n$) \u2014 the values of permutation $b$.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed\n$5 \\cdot 10^5$.",
        "output": "For each test case:\n\nIf there is a sequence of operations to transform $a$ into $b$, output\na single integer $q$ ($0\\le q\\le 2n$) \u2014 the number of operations in\nthe first line and $q$ integers with the $i$-th number representing\nthe index of the $i$-th operation in the second line.\n\nIf there is no sequence of operations, output $-1$ in the only line.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n1\n1\n1\n2\n1 2\n2 1\n3\n2 1 3\n3 2 1\n8\n7 8 3 5 4 6 1 2\n2 1 6 4 5 3 8 7\n</pre></td>\n    <td><pre>0\n\n-1\n2\n1 3\n7\n3 4 5 1 2 1 1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first case, you can do no operation since $a=b$.\n\nIn the second case, it can be proved $a$ can not be transformed into\n$b$.\n\nIn the third case, $a$ is transformed into $[2,3,1]$ after the first\noperation and into $b$ after the second operation."
    },
    {
        "problem_id": "2036A",
        "url": "https://codeforces.com/problemset/problem/2036/A",
        "title": "Quintomania",
        "rating": 800,
        "tags": [
            "implementation"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Boris Notkin composes melodies. He represents them as a sequence of notes,\nwhere each note is encoded as an integer from $0$ to $127$ inclusive.\nThe interval between two notes $a$ and $b$ is equal to $|a - b|$\nsemitones.\n\nBoris considers a melody perfect if the interval between each two adjacent\nnotes is either $5$ semitones or $7$ semitones.\n\nAfter composing his latest melodies, he enthusiastically shows you his\ncollection of works. Help Boris Notkin understand whether his melodies are\nperfect.",
        "input": "The first line contains an integer $t$ ($1 \\leq t \\leq 1000$) \u2014 the\nnumber of melodies.\n\nEach melody is described by two lines.\n\nThe first line contains an integer $n$ ($2 \\leq n \\leq 50$) \u2014 the\nnumber of notes in the melody.\n\nThe second line contains $n$ integers $a_{1}, a_{2}, \\dots, a_{n}$\n($0 \\leq a_{i} \\leq 127$) \u2014 the notes of the melody.",
        "output": "For each melody, output \"YES\", if it is perfect; otherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n2\n114 109\n2\n17 10\n3\n76 83 88\n8\n38 45 38 80 85 92 99 106\n5\n63 58 65 58 65\n8\n117 124 48 53 48 43 54 49\n5\n95 102 107 114 121\n10\n72 77 82 75 70 75 68 75 68 75\n</pre></td>\n    <td><pre>YES\nYES\nYES\nNO\nYES\nNO\nYES\nYES\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2036B",
        "url": "https://codeforces.com/problemset/problem/2036/B",
        "title": "Startup",
        "rating": 800,
        "tags": [
            "greedy",
            "sortings"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "Arseniy came up with another business plan \u2014 to sell soda from a vending\nmachine! For this, he purchased a machine with $n$ shelves, as well as\n$k$ bottles, where the $i$-th bottle is characterized by the brand\nindex $b_i$ and the cost $c_i$.\n\nYou can place any number of bottles on each shelf, but all bottles on the same\nshelf must be of the same brand.\n\nArseniy knows that all the bottles he puts on the shelves of the machine will\nbe sold. Therefore, he asked you to calculate the maximum amount he can earn.",
        "input": "The first line contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$\n($1 \\le n, k \\le 2 \\cdot 10^5$), where $n$ is the number of shelves in\nthe machine, and $k$ is the number of bottles available to Arseniy.\n\nThe next $k$ lines contain two integers $b_i$ and $c_i$ ($1 \\le\nb_i \\le k, 1 \\le c_i \\le 1000$) \u2014 the brand and cost of the $i$-th\nbottle.\n\nIt is also guaranteed that the sum of $n$ across all test cases does not\nexceed $2 \\cdot 10^5$ and that the sum of $k$ across all test cases\nalso does not exceed $2 \\cdot 10^5$.",
        "output": "For each test case, output one integer \u2014 the maximum amount that Arseniy can\nearn.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n3 3\n2 6\n2 7\n1 15\n1 3\n2 6\n2 7\n1 15\n6 2\n1 7\n2 5\n190000 1\n1 1000\n</pre></td>\n    <td><pre>28\n15\n12\n1000\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, Arseniy has $3$ shelves in the vending machine. He\ncan place, for example, two bottles of the brand $2$ on the first shelf\nand a bottle of the brand $1$ on the second shelf. Then the total cost of\nthe bottles would be $6 + 7 + 15 = 28$.\n\nIn the second test case, he has only one shelf. It is not difficult to show\nthat the optimal option is to place a bottle of the brand $1$ on it. Then\nthe total cost will be $15$.\n\nIn the third test case, he has as many as $6$ shelves, so he can place all\navailable bottles with a total cost of $7 + 5 = 12$."
    },
    {
        "problem_id": "2036C",
        "url": "https://codeforces.com/problemset/problem/2036/C",
        "title": "Anya and 1100",
        "rating": 1100,
        "tags": [
            "brute force",
            "implementation"
        ],
        "div": "Div. 3",
        "time_limit_ms": 3000,
        "memory_limit_mb": 256,
        "description": "While rummaging through things in a distant drawer, Anya found a beautiful\nstring $s$ consisting only of zeros and ones.\n\nNow she wants to make it even more beautiful by performing $q$ operations\non it.\n\nEach operation is described by two integers $i$ ($1 \\le i \\le |s|$)\nand $v$ ($v \\in \\\\{0, 1\\\\}$) and means that the $i$-th character\nof the string is assigned the value $v$ (that is, the assignment $s_i =\nv$ is performed).\n\nBut Anya loves the number $1100$, so after each query, she asks you to\ntell her whether the substring \"1100\" is present in her string (i.e. there\nexist such $1 \\le i \\le |s| - 3$ that $s_{i}s_{i + 1}s_{i + 2}s_{i + 3}\n= \\texttt{1100}$).",
        "input": "The first line contains one integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the\nnumber of test cases.\n\nThe first line of the test case contains the string $s$ ($1 \\leq |s|\n\\leq 2 \\cdot 10^5$), consisting only of the characters \"0\" and \"1\". Here\n$|s|$ denotes the length of the string $s$.\n\nThe next line contains an integer $q$ ($1 \\leq q \\leq 2 \\cdot 10^5$) \u2014\nthe number of queries.\n\nThe following $q$ lines contain two integers $i$ ($1 \\leq i \\leq\n|s|$) and $v$ ($v \\in \\\\{0, 1\\\\}$), describing the query.\n\nIt is guaranteed that the sum of $|s|$ across all test cases does not\nexceed $2 \\cdot 10^5$. It is also guaranteed that the sum of $q$\nacross all test cases does not exceed $2 \\cdot 10^5$.",
        "output": "For each query, output \"YES\", if \"1100\" is present in Anya's string;\notherwise, output \"NO\".\n\nYou can output the answer in any case (upper or lower). For example, the\nstrings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive\nresponses.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>4\n100\n4\n1 1\n2 0\n2 0\n3 1\n1100000\n3\n6 1\n7 1\n4 1\n111010\n4\n1 1\n5 0\n4 1\n5 0\n0100\n4\n3 1\n1 1\n2 0\n2 1\n</pre></td>\n    <td><pre>NO\nNO\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": ""
    },
    {
        "problem_id": "2036D",
        "url": "https://codeforces.com/problemset/problem/2036/D",
        "title": "I Love 1543",
        "rating": 1300,
        "tags": [
            "brute force",
            "implementation",
            "matrices"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "One morning, Polycarp woke up and realized that $1543$ is the most\nfavorite number in his life.\n\nThe first thing that Polycarp saw that day as soon as he opened his eyes was a\nlarge wall carpet of size $n$ by $m$ cells; $n$ and $m$ are\neven integers. Each cell contains one of the digits from $0$ to $9$.\n\nPolycarp became curious about how many times the number $1543$ would\nappear in all layers$^{\\text{\u2217}}$ of the carpet when traversed clockwise.\n\n$^{\\text{\u2217}}$The first layer of a carpet of size $n \\times m$ is\ndefined as a closed strip of length $2 \\cdot (n+m-2)$ and thickness of\n$1$ element, surrounding its outer part. Each subsequent layer is defined\nas the first layer of the carpet obtained by removing all previous layers from\nthe original carpet.",
        "input": "The first line of the input contains a single integer $t$ ($1 \\leq t\n\\leq 100$) \u2014 the number of test cases. The following lines describe the test\ncases.\n\nThe first line of each test case contains a pair of numbers $n$ and\n$m$ ($2 \\leq n, m \\leq 10^3$, $n, m$ \u2014 even integers).\n\nThis is followed by $n$ lines of length $m$, consisting of digits from\n$0$ to $9$ \u2014 the description of the carpet.\n\nIt is guaranteed that the sum of $n \\cdot m$ across all test cases does\nnot exceed $10^6$.",
        "output": "For each test case, output a single number \u2014 the total number of times\n$1543$ appears in all layers of the carpet in the order of traversal\nclockwise.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>8\n2 4\n1543\n7777\n2 4\n7154\n8903\n2 4\n3451\n8888\n2 2\n54\n13\n2 2\n51\n43\n2 6\n432015\n512034\n4 4\n5431\n1435\n5518\n7634\n6 4\n5432\n1152\n4542\n2432\n2302\n5942\n</pre></td>\n    <td><pre>1\n1\n0\n1\n0\n2\n2\n2\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "![](CDN_BASE_URL/9c851ea8888390da76b9eeeb247a1d68) Occurrences of $1543$\nin the seventh example. Different layers are colored in different colors."
    },
    {
        "problem_id": "2036E",
        "url": "https://codeforces.com/problemset/problem/2036/E",
        "title": "Reverse the Rivers",
        "rating": 1600,
        "tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "A conspiracy of ancient sages, who decided to redirect rivers for their own\nconvenience, has put the world on the brink. But before implementing their\ngrand plan, they decided to carefully think through their strategy \u2014 that's\nwhat sages do.\n\nThere are $n$ countries, each with exactly $k$ regions. For the\n$j$-th region of the $i$-th country, they calculated the value\n$a_{i,j}$, which reflects the amount of water in it.\n\nThe sages intend to create channels between the $j$-th region of the\n$i$-th country and the $j$-th region of the $(i + 1)$-th country\nfor all $1 \\leq i \\leq (n - 1)$ and for all $1 \\leq j \\leq k$.\n\nSince all $n$ countries are on a large slope, water flows towards the country with the highest number. According to the sages' predictions, after the channel system is created, the new value of the $j$-th region of the $i$-th country will be $b_{i,j} = a_{1,j} | a_{2,j} | ... | a_{i,j}$, where $|$ denotes the [bitwise \"OR\"](http://tiny.cc/bitwise_or) operation.\n\nAfter the redistribution of water, the sages aim to choose the most suitable\ncountry for living, so they will send you $q$ queries for consideration.\n\nEach query will contain $m$ requirements.\n\nEach requirement contains three parameters: the region number $r$, the\nsign $o$ (either \"$<$\" or \"$>$\"), and the value $c$. If\n$o$ = \"$<$\", then in the $r$-th region of the country you choose,\nthe new value must be strictly less than the limit $c$, and if $o$ =\n\"$>$\", it must be strictly greater.\n\nIn other words, the chosen country $i$ must satisfy all $m$\nrequirements. If in the current requirement $o$ = \"$<$\", then it must\nhold that $b_{i,r} < c$, and if $o$ = \"$>$\", then $b_{i,r} >\nc$.\n\nIn response to each query, you should output a single integer \u2014 the number of\nthe suitable country. If there are multiple such countries, output the\nsmallest one. If no such country exists, output $-1$.",
        "input": "The first line contains three integers $n$, $k$, and $q$ ($1\n\\leq n, k, q \\leq 10^5$) \u2014 the number of countries, regions, and queries,\nrespectively.\n\nNext, there are $n$ lines, where the $i$-th line contains $k$\nintegers $a_{i,1}, a_{i,2}, \\dots, a_{i,k}$ ($1 \\leq a_{i,j} \\leq\n10^9$), where $a_{i,j}$ is the value of the $j$-th region of the\n$i$-th country.\n\nThen, $q$ queries are described.\n\nThe first line of each query contains a single integer $m$ ($1 \\leq m\n\\leq 10^5$) \u2014 the number of requirements.\n\nThen follow $m$ lines, each containing an integer $r$, a character\n$o$, and an integer $c$ ($1 \\leq r \\leq k$, $0 \\leq c \\leq 2\n\\cdot 10^9$), where $r$ and $c$ are the region number and the value,\nand $o$ is either \"$<$\" or \"$>$\" \u2014 the sign.\n\nIt is guaranteed that $n \\cdot k$ does not exceed $10^5$ and that the\nsum of $m$ across all queries also does not exceed $10^5$.",
        "output": "For each query, output a single integer on a new line \u2014 the smallest number of\nthe suitable country, or $-1$ if no such country exists.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>3 4 4\n1 3 5 9\n4 6 5 3\n2 1 2 7\n3\n1 &gt; 4\n2 &lt; 8\n1 &lt; 6\n2\n1 &lt; 8\n2 &gt; 8\n1\n3 &gt; 5\n2\n4 &gt; 8\n1 &lt; 8\n</pre></td>\n    <td><pre>2\n-1\n3\n1\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the example, the initial values of the regions are as follows:\n\n$1$| $3$| $5$| $9$  \n---|---|---|---  \n$4$| $6$| $5$| $3$  \n$2$| $1$| $2$| $7$  \n  \nAfter creating the channels, the new values will look like this:\n\n$1$| $3$| $5$| $9$  \n---|---|---|---  \n$1 | 4$| $3 | 6$| $5 | 5$| $9 | 3$  \n$1 | 4 | 2$| $3 | 6 | 1$| $5 | 5 | 2$| $9 | 3 | 7$  \n$\\downarrow$ $1$| $3$| $5$| $9$  \n---|---|---|---  \n$5$| $7$| $5$| $11$  \n$7$| $7$| $7$| $15$  \n  \nIn the first query, it is necessary to output the minimum country number\n(i.e., row) where, after the redistribution of water in the first region\n(i.e., column), the new value will be greater than four and less than six, and\nin the second region it will be less than eight. Only the country with number\n$2$ meets these requirements.\n\nIn the second query, there are no countries that meet the specified\nrequirements.\n\nIn the third query, only the country with number $3$ is suitable.\n\nIn the fourth query, all three countries meet the conditions, so the answer is\nthe smallest number $1$."
    },
    {
        "problem_id": "2036F",
        "url": "https://codeforces.com/problemset/problem/2036/F",
        "title": "XORificator 3000",
        "rating": 1900,
        "tags": [
            "bitmasks",
            "dp",
            "number theory",
            "two pointers"
        ],
        "div": "Div. 3",
        "time_limit_ms": 1000,
        "memory_limit_mb": 256,
        "description": "Alice has been giving gifts to Bob for many years, and she knows that what he\nenjoys the most is performing [bitwise XOR](http://tiny.cc/xor_wiki_eng) of\ninteresting integers. Bob considers a positive integer $x$ to be\ninteresting if it satisfies $x \\not\\equiv k (\\bmod 2^i)$. Therefore, this\nyear for his birthday, she gifted him a super-powerful \"XORificator 3000\", the\nlatest model.\n\nBob was very pleased with the gift, as it allowed him to instantly compute the\nXOR of all interesting integers in any range from $l$ to $r$,\ninclusive. After all, what else does a person need for happiness?\nUnfortunately, the device was so powerful that at one point it performed XOR\nwith itself and disappeared. Bob was very upset, and to cheer him up, Alice\nasked you to write your version of the \"XORificator\".",
        "input": "The first line of input contains a single integer $t$ $(1 \\leq t \\leq\n10^4)$ \u2014 the number of XOR queries on the segment. The following $t$\nlines contain the queries, each consisting of the integers $l$, $r$,\n$i$, $k$ $(1 \\leq l \\leq r \\leq 10^{18}$, $0 \\leq i \\leq 30$,\n$0 \\leq k < 2^i)$.",
        "output": "For each query, output a single integer \u2014 the XOR of all integers $x$ in\nthe range $[l, r]$ such that $x \\not\\equiv k \\mod 2^i$.",
        "interaction": "",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>6\n1 3 1 0\n2 28 3 7\n15 43 1 0\n57 2007 1 0\n1010 1993 2 2\n1 1000000000 30 1543\n</pre></td>\n    <td><pre>2\n2\n13\n0\n4\n1000000519\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first query, the interesting integers in the range $[1, 3]$ are\n$1$ and $3$, so the answer will be $1 \\oplus 3 = 2$."
    },
    {
        "problem_id": "2036G",
        "url": "https://codeforces.com/problemset/problem/2036/G",
        "title": "Library of Magic",
        "rating": 2200,
        "tags": [
            "binary search",
            "bitmasks",
            "constructive algorithms",
            "divide and conquer",
            "flows",
            "geometry",
            "interactive",
            "number theory"
        ],
        "div": "Div. 3",
        "time_limit_ms": 2000,
        "memory_limit_mb": 256,
        "description": "This is an interactive problem.\n\nThe Department of Supernatural Phenomena at the Oxenfurt Academy has opened\nthe Library of Magic, which contains the works of the greatest sorcerers of\nRedania \u2014 $n$ ($3 \\leq n \\leq 10^{18}$) types of books, numbered from\n$1$ to $n$. Each book's type number is indicated on its spine.\nMoreover, each type of book is stored in the library in exactly two copies!\nAnd you have been appointed as the librarian.\n\nOne night, you wake up to a strange noise and see a creature leaving the\nbuilding through a window. Three thick tomes of different colors were sticking\nout of the mysterious thief's backpack. Before you start searching for them,\nyou decide to compute the numbers $a$, $b$, and $c$ written on the\nspines of these books. All three numbers are distinct.\n\nSo, you have an unordered set of tomes, which includes one tome with each of\nthe pairwise distinct numbers $a$, $b$, and $c$, and two tomes for\nall numbers from $1$ to $n$, except for $a$, $b$, and $c$.\nYou want to find these values $a$, $b$, and $c$.\n\nSince you are not working in a simple library, but in the Library of Magic,\nyou can only use one spell in the form of a query to check the presence of\nbooks in their place:\n\n  * \"xor l r\" \u2014 Bitwise XOR query with parameters $l$ and $r$. Let $k$ be the number of such tomes in the library whose numbers are greater than or equal to $l$ and less than or equal to $r$. You will receive the result of the computation $v_1 \\oplus v_2 \\oplus ... \\oplus v_k$, where $v_1 ... v_k$ are the numbers on the spines of these tomes, and $\\oplus$ denotes the operation of [bitwise exclusive OR](http://tiny.cc/xor_wiki_eng). \n\nSince your magical abilities as a librarian are severely limited, you can make\nno more than $150$ queries.",
        "input": "The first line of input contains an integer $t$ ($1 \\le t \\le 300$) \u2014\nthe number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($3 \\leq\nn \\leq 10^{18}$) \u2014 the number of types of tomes.",
        "output": "",
        "interaction": "The interaction for each test case begins with reading the integer $n$.\n\nThen you can make up to $150$ queries.\n\nTo make a query, output a string in the format \"xor l r\" (without quotes)\n($1 \\leq l \\leq r \\leq n$). After each query, read an integer \u2014 the answer\nto your query.\n\nTo report the answer, output a string in the format \"ans a b c\" (without\nquotes), where $a$, $b$, and $c$ are the numbers you found as the\nanswer to the problem. You can output them in any order.\n\nThe interactor is not adaptive, which means that the answer is known before\nthe participant makes queries and does not depend on the queries made by the\nparticipant.\n\nAfter making $150$ queries, the answer to any other query will be\n$-1$. Upon receiving such an answer, terminate the program to receive a\nverdict of \"WA\" (Wrong answer).\n\nAfter outputting a query, do not forget to output a newline and flush the\noutput buffer. Otherwise, you will receive a verdict of \"IL\" (Idleness limit\nexceeded). To flush the buffer, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * refer to the documentation for other languages. \n\nHacks\n\nTo make a hack, use the following format.\n\nThe first line should contain a single integer $t$ ($1 \\leq t \\leq\n300$) \u2014 the number of test cases.\n\nThe only line of each test case should contain four integers $n$, $a$,\n$b$, and $c$ ($3 \\leq n \\leq 10^{18}$, $1 \\le a, b, c \\le n$)\n\u2014 the number of books in the library and the numbers of the stolen tomes. The\nnumbers $a$, $b$, and $c$ must be distinct.",
        "examples": "<table class='vjudge_sample'>\n<thead>\n  <tr>\n    <th>Input</th>\n    <th>Output</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><pre>2\n6\n\n0\n\n2\n\n3\n\n5\n\n3\n</pre></td>\n    <td><pre>\nxor 1 1\n\nxor 2 2\n\nxor 3 3\n\nxor 4 6\n\nans 2 3 5\n\nans 1 2 3\n</pre></td>\n  </tr>\n</tbody>\n</table>",
        "note": "In the first test case, the books in the library after the theft look like\nthis:\n\n![](CDN_BASE_URL/7f2df02870f4f40a14e1d14e8a942e2b)\n\nNow consider the answers to the queries:\n\n  * For the query \"xor 1 1\", you receive the result $1 \\oplus 1 = 0$. Two tomes satisfy the condition specified in the query \u2014 both with the number $1$. \n  * For the query \"xor 2 2\", you receive the result $2$, as only one tome satisfies the specified condition. \n  * For the query \"xor 3 3\", you receive the result $3$. \n  * For the query \"xor 4 6\", you receive the result $4 \\oplus 6 \\oplus 4 \\oplus 5 \\oplus 6 = 5$. \n\nIn the second test case, there are only $3$ types of books, and it is easy\nto guess that the missing ones have the numbers $1$, $2$, and $3$."
    }
]